# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import get_three_state_flag
from msgraph.cli.core.commands.validators import validate_file_or_dict
from azext_financials_beta.action import (
    AddAccounts,
    AddAgedAccountsPayable,
    AddAgedAccountsReceivable,
    AddCountriesRegions,
    AddCurrencies,
    AddFinancialsDimensionValues,
    AddItemCategories,
    AddPaymentMethods,
    AddPaymentTerms,
    AddFinancialsPicture,
    AddShipmentMethods,
    AddTaxAreas,
    AddTaxGroups,
    AddUnitsOfMeasure,
    AddAddress,
    AddCurrency,
    AddPaymentMethod,
    AddPaymentTerm,
    AddFinancialsCompaniesPicture,
    AddShipmentMethod,
    AddAccount,
    AddFinancialsCompaniesDimensionValues,
    AddFinancialsFinancialCompanyCreateEmployeePicture,
    AddItemCategory,
    AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture,
    AddFinancialsFinancialCompanyCreatePurchaseInvoicePicture
)


def load_arguments(self, _):

    with self.argument_context('financials financial update') as c:
        c.argument('companies', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('financials financial show-financial') as c:
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial create-company') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('business_profile_id', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('name', type=str, help='')
        c.argument('system_version', type=str, help='')
        c.argument('accounts', action=AddAccounts, nargs='+', help='')
        c.argument('aged_accounts_payable', action=AddAgedAccountsPayable, nargs='+', help='')
        c.argument('aged_accounts_receivable', action=AddAgedAccountsReceivable, nargs='+', help='')
        c.argument('company_information', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('countries_regions', action=AddCountriesRegions, nargs='+', help='')
        c.argument('currencies', action=AddCurrencies, nargs='+', help='')
        c.argument('customer_payment_journals', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('customer_payments', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('customers', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('dimensions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('dimension_values', action=AddFinancialsDimensionValues, nargs='+', help='')
        c.argument('employees', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('general_ledger_entries', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('item_categories', action=AddItemCategories, nargs='+', help='')
        c.argument('items', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('journal_lines', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('journals', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('payment_methods', action=AddPaymentMethods, nargs='+', help='')
        c.argument('payment_terms', action=AddPaymentTerms, nargs='+', help='')
        c.argument('picture', action=AddFinancialsPicture, nargs='+', help='')
        c.argument('purchase_invoice_lines', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('purchase_invoices', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('sales_credit_memo_lines', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('sales_credit_memos', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('sales_invoice_lines', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('sales_invoices', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('sales_order_lines', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('sales_orders', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('sales_quote_lines', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('sales_quotes', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('shipment_methods', action=AddShipmentMethods, nargs='+', help='')
        c.argument('tax_areas', action=AddTaxAreas, nargs='+', help='')
        c.argument('tax_groups', action=AddTaxGroups, nargs='+', help='')
        c.argument('units_of_measure', action=AddUnitsOfMeasure, nargs='+', help='')
        c.argument('vendors', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('financials financial delete-company') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial list-company') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial show-company') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial update-company') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('business_profile_id', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('name', type=str, help='')
        c.argument('system_version', type=str, help='')
        c.argument('accounts', action=AddAccounts, nargs='+', help='')
        c.argument('aged_accounts_payable', action=AddAgedAccountsPayable, nargs='+', help='')
        c.argument('aged_accounts_receivable', action=AddAgedAccountsReceivable, nargs='+', help='')
        c.argument('company_information', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('countries_regions', action=AddCountriesRegions, nargs='+', help='')
        c.argument('currencies', action=AddCurrencies, nargs='+', help='')
        c.argument('customer_payment_journals', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('customer_payments', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('customers', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('dimensions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('dimension_values', action=AddFinancialsDimensionValues, nargs='+', help='')
        c.argument('employees', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('general_ledger_entries', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('item_categories', action=AddItemCategories, nargs='+', help='')
        c.argument('items', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('journal_lines', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('journals', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('payment_methods', action=AddPaymentMethods, nargs='+', help='')
        c.argument('payment_terms', action=AddPaymentTerms, nargs='+', help='')
        c.argument('picture', action=AddFinancialsPicture, nargs='+', help='')
        c.argument('purchase_invoice_lines', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('purchase_invoices', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('sales_credit_memo_lines', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('sales_credit_memos', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('sales_invoice_lines', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('sales_invoices', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('sales_order_lines', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('sales_orders', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('sales_quote_lines', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('sales_quotes', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('shipment_methods', action=AddShipmentMethods, nargs='+', help='')
        c.argument('tax_areas', action=AddTaxAreas, nargs='+', help='')
        c.argument('tax_groups', action=AddTaxGroups, nargs='+', help='')
        c.argument('units_of_measure', action=AddUnitsOfMeasure, nargs='+', help='')
        c.argument('vendors', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('financials financial-company create-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials financial-company create-aged-account-payable') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('aged_as_of_date', help='')
        c.argument('balance_due', type=float, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('current_amount', type=float, help='')
        c.argument('name', type=str, help='')
        c.argument('period1_amount', type=float, help='')
        c.argument('period2_amount', type=float, help='')
        c.argument('period3_amount', type=float, help='')
        c.argument('period_length_filter', type=str, help='')
        c.argument('vendor_number', type=str, help='')

    with self.argument_context('financials financial-company create-aged-account-receivable') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('aged_as_of_date', help='')
        c.argument('balance_due', type=float, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('current_amount', type=float, help='')
        c.argument('customer_number', type=str, help='')
        c.argument('name', type=str, help='')
        c.argument('period1_amount', type=float, help='')
        c.argument('period2_amount', type=float, help='')
        c.argument('period3_amount', type=float, help='')
        c.argument('period_length_filter', type=str, help='')

    with self.argument_context('financials financial-company create-company-information') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('currency_code', type=str, help='')
        c.argument('current_fiscal_year_start_date', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('fax_number', type=str, help='')
        c.argument('industry', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('picture', help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('website', type=str, help='')

    with self.argument_context('financials financial-company create-country-region') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address_format', type=str, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company create-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials financial-company create-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('blocked', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_method_id', help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('shipment_method_id', help='')
        c.argument('tax_area_display_name', type=str, help='')
        c.argument('tax_area_id', help='')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('website', type=str, help='')
        c.argument('currency', action=AddCurrency, nargs='+', help='currency')
        c.argument('payment_method', action=AddPaymentMethod, nargs='+', help='paymentMethod')
        c.argument('payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm')
        c.argument('picture', action=AddFinancialsCompaniesPicture, nargs='+', help='')
        c.argument('shipment_method', action=AddShipmentMethod, nargs='+', help='shipmentMethod')

    with self.argument_context('financials financial-company create-customer-payment') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount', type=float, help='')
        c.argument('applies_to_invoice_id', help='')
        c.argument('applies_to_invoice_number', type=str, help='')
        c.argument('comment', type=str, help='')
        c.argument('contact_id', type=str, help='')
        c.argument('customer_id', help='')
        c.argument('customer_number', type=str, help='')
        c.argument('description', type=str, help='')
        c.argument('document_number', type=str, help='')
        c.argument('external_document_number', type=str, help='')
        c.argument('journal_display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('line_number', type=int, help='')
        c.argument('posting_date', help='')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Customer')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType', arg_group='Customer')
        c.argument('blocked', type=str, help='', arg_group='Customer')
        c.argument('currency_code', type=str, help='', arg_group='Customer')
        c.argument('currency_id', help='', arg_group='Customer')
        c.argument('display_name', type=str, help='', arg_group='Customer')
        c.argument('email', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_last_modified_date_time_last_modified_date_time', help='',
                   arg_group='Customer')
        c.argument('number', type=str, help='', arg_group='Customer')
        c.argument('payment_method_id', help='', arg_group='Customer')
        c.argument('payment_terms_id', help='', arg_group='Customer')
        c.argument('phone_number', type=str, help='', arg_group='Customer')
        c.argument('shipment_method_id', help='', arg_group='Customer')
        c.argument('tax_area_display_name', type=str, help='', arg_group='Customer')
        c.argument('tax_area_id', help='', arg_group='Customer')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='', arg_group='Customer')
        c.argument('tax_registration_number', type=str, help='', arg_group='Customer')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Customer')
        c.argument('website', type=str, help='', arg_group='Customer')
        c.argument('currency', action=AddCurrency, nargs='+', help='currency', arg_group='Customer')
        c.argument('payment_method', action=AddPaymentMethod, nargs='+', help='paymentMethod', arg_group='Customer')
        c.argument('payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm', arg_group='Customer')
        c.argument('picture', action=AddFinancialsCompaniesPicture, nargs='+', help='', arg_group='Customer')
        c.argument('shipment_method', action=AddShipmentMethod, nargs='+', help='shipmentMethod',
                   arg_group='Customer')

    with self.argument_context('financials financial-company create-customer-payment-journal') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('balancing_account_id', help='')
        c.argument('balancing_account_number', type=str, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')
        c.argument('customer_payments', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('financials financial-company create-dimension') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('dimension_values', action=AddFinancialsCompaniesDimensionValues, nargs='+', help='')

    with self.argument_context('financials financial-company create-dimension-value') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company create-employee') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('birth_date', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('employment_date', help='')
        c.argument('given_name', type=str, help='')
        c.argument('job_title', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('middle_name', type=str, help='')
        c.argument('mobile_phone', type=str, help='')
        c.argument('number', type=str, help='')
        c.argument('personal_email', type=str, help='')
        c.argument('phone_number', type=str, help='')
        c.argument('statistics_group_code', type=str, help='')
        c.argument('status', type=str, help='')
        c.argument('surname', type=str, help='')
        c.argument('termination_date', help='')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateEmployeePicture, nargs='+', help='')

    with self.argument_context('financials financial-company create-general-ledger-entry') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('account_number', type=str, help='')
        c.argument('credit_amount', type=float, help='')
        c.argument('debit_amount', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('document_number', type=str, help='')
        c.argument('document_type', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('posting_date', help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')

    with self.argument_context('financials financial-company create-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('base_unit_of_measure_id', help='')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('display_name', type=str, help='')
        c.argument('gtin', type=str, help='')
        c.argument('inventory', type=float, help='')
        c.argument('item_category_code', type=str, help='')
        c.argument('item_category_id', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('tax_group_code', type=str, help='')
        c.argument('tax_group_id', help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('unit_price', type=float, help='')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='')

    with self.argument_context('financials financial-company create-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company create-journal') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('balancing_account_id', help='')
        c.argument('balancing_account_number', type=str, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')
        c.argument('journal_lines', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('financials financial-company create-journal-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('account_number', type=str, help='')
        c.argument('amount', type=float, help='')
        c.argument('comment', type=str, help='')
        c.argument('description', type=str, help='')
        c.argument('document_number', type=str, help='')
        c.argument('external_document_number', type=str, help='')
        c.argument('journal_display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('line_number', type=int, help='')
        c.argument('posting_date', help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')

    with self.argument_context('financials financial-company create-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company create-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company create-purchase-invoice') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('buy_from_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('due_date', help='')
        c.argument('invoice_date', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('pay_to_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('pay_to_contact', type=str, help='')
        c.argument('pay_to_name', type=str, help='')
        c.argument('pay_to_vendor_id', help='')
        c.argument('pay_to_vendor_number', type=str, help='')
        c.argument('prices_include_tax', arg_type=get_three_state_flag(), help='')
        c.argument('ship_to_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('ship_to_contact', type=str, help='')
        c.argument('ship_to_name', type=str, help='')
        c.argument('status', type=str, help='')
        c.argument('total_amount_excluding_tax', type=float, help='')
        c.argument('total_amount_including_tax', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('vendor_id', help='')
        c.argument('vendor_invoice_number', type=str, help='')
        c.argument('vendor_name', type=str, help='')
        c.argument('vendor_number', type=str, help='')
        c.argument('currency', action=AddCurrency, nargs='+', help='currency')
        c.argument('purchase_invoice_lines', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Vendor')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType', arg_group='Vendor')
        c.argument('balance', type=float, help='', arg_group='Vendor')
        c.argument('blocked', type=str, help='', arg_group='Vendor')
        c.argument('microsoft_graph_vendor_currency_code', type=str, help='', arg_group='Vendor')
        c.argument('microsoft_graph_vendor_currency_id', help='', arg_group='Vendor')
        c.argument('display_name', type=str, help='', arg_group='Vendor')
        c.argument('email', type=str, help='', arg_group='Vendor')
        c.argument('microsoft_graph_vendor_last_modified_date_time_last_modified_date_time', help='',
                   arg_group='Vendor')
        c.argument('microsoft_graph_vendor_number', type=str, help='', arg_group='Vendor')
        c.argument('payment_method_id', help='', arg_group='Vendor')
        c.argument('payment_terms_id', help='', arg_group='Vendor')
        c.argument('phone_number', type=str, help='', arg_group='Vendor')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='', arg_group='Vendor')
        c.argument('tax_registration_number', type=str, help='', arg_group='Vendor')
        c.argument('website', type=str, help='', arg_group='Vendor')
        c.argument('microsoft_graph_currency', action=AddCurrency, nargs='+', help='currency', arg_group='Vendor')
        c.argument('payment_method', action=AddPaymentMethod, nargs='+', help='paymentMethod', arg_group='Vendor')
        c.argument('payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm', arg_group='Vendor')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreatePurchaseInvoicePicture, nargs='+', help='',
                   arg_group='Vendor')

    with self.argument_context('financials financial-company create-purchase-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('expected_receipt_date', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Item')
        c.argument('base_unit_of_measure_id', help='', arg_group='Item')
        c.argument('blocked', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('display_name', type=str, help='', arg_group='Item')
        c.argument('gtin', type=str, help='', arg_group='Item')
        c.argument('inventory', type=float, help='', arg_group='Item')
        c.argument('item_category_code', type=str, help='', arg_group='Item')
        c.argument('item_category_id', help='', arg_group='Item')
        c.argument('last_modified_date_time', help='', arg_group='Item')
        c.argument('number', type=str, help='', arg_group='Item')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('tax_group_code', type=str, help='', arg_group='Item')
        c.argument('tax_group_id', help='', arg_group='Item')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Item')
        c.argument('number_unit_cost', type=float, help='', arg_group='Item')
        c.argument('unit_price', type=float, help='', arg_group='Item')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory', arg_group='Item')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='',
                   arg_group='Item')

    with self.argument_context('financials financial-company create-sale-credit-memo') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('billing_postal_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('bill_to_customer_id', help='')
        c.argument('bill_to_customer_number', type=str, help='')
        c.argument('bill_to_name', type=str, help='')
        c.argument('credit_memo_date', help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('customer_id', help='')
        c.argument('customer_name', type=str, help='')
        c.argument('customer_number', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('due_date', help='')
        c.argument('email', type=str, help='')
        c.argument('external_document_number', type=str, help='')
        c.argument('invoice_id', help='')
        c.argument('invoice_number', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('prices_include_tax', arg_type=get_three_state_flag(), help='')
        c.argument('salesperson', type=str, help='')
        c.argument('selling_postal_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('status', type=str, help='')
        c.argument('total_amount_excluding_tax', type=float, help='')
        c.argument('total_amount_including_tax', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('currency', action=AddCurrency, nargs='+', help='currency')
        c.argument('payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm')
        c.argument('sales_credit_memo_lines', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Customer')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType', arg_group='Customer')
        c.argument('blocked', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_currency_code', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_currency_id', help='', arg_group='Customer')
        c.argument('display_name', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_email', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_last_modified_date_time_last_modified_date_time', help='',
                   arg_group='Customer')
        c.argument('microsoft_graph_customer_number', type=str, help='', arg_group='Customer')
        c.argument('payment_method_id', help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_payment_terms_id_payment_terms_id', help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_phone_number', type=str, help='', arg_group='Customer')
        c.argument('shipment_method_id', help='', arg_group='Customer')
        c.argument('tax_area_display_name', type=str, help='', arg_group='Customer')
        c.argument('tax_area_id', help='', arg_group='Customer')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='', arg_group='Customer')
        c.argument('tax_registration_number', type=str, help='', arg_group='Customer')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Customer')
        c.argument('website', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_currency', action=AddCurrency, nargs='+', help='currency', arg_group='Customer')
        c.argument('payment_method', action=AddPaymentMethod, nargs='+', help='paymentMethod', arg_group='Customer')
        c.argument('microsoft_graph_payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm',
                   arg_group='Customer')
        c.argument('picture', action=AddFinancialsCompaniesPicture, nargs='+', help='', arg_group='Customer')
        c.argument('shipment_method', action=AddShipmentMethod, nargs='+', help='shipmentMethod',
                   arg_group='Customer')

    with self.argument_context('financials financial-company create-sale-credit-memo-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('shipment_date', help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Item')
        c.argument('base_unit_of_measure_id', help='', arg_group='Item')
        c.argument('blocked', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('display_name', type=str, help='', arg_group='Item')
        c.argument('gtin', type=str, help='', arg_group='Item')
        c.argument('inventory', type=float, help='', arg_group='Item')
        c.argument('item_category_code', type=str, help='', arg_group='Item')
        c.argument('item_category_id', help='', arg_group='Item')
        c.argument('last_modified_date_time', help='', arg_group='Item')
        c.argument('number', type=str, help='', arg_group='Item')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('tax_group_code', type=str, help='', arg_group='Item')
        c.argument('tax_group_id', help='', arg_group='Item')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Item')
        c.argument('unit_cost', type=float, help='', arg_group='Item')
        c.argument('number_unit_price', type=float, help='', arg_group='Item')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory', arg_group='Item')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='',
                   arg_group='Item')

    with self.argument_context('financials financial-company create-sale-invoice') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('billing_postal_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('bill_to_customer_id', help='')
        c.argument('bill_to_customer_number', type=str, help='')
        c.argument('bill_to_name', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('customer_id', help='')
        c.argument('customer_name', type=str, help='')
        c.argument('customer_number', type=str, help='')
        c.argument('customer_purchase_order_reference', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('due_date', help='')
        c.argument('email', type=str, help='')
        c.argument('external_document_number', type=str, help='')
        c.argument('invoice_date', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('order_id', help='')
        c.argument('order_number', type=str, help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('prices_include_tax', arg_type=get_three_state_flag(), help='')
        c.argument('salesperson', type=str, help='')
        c.argument('selling_postal_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('shipment_method_id', help='')
        c.argument('shipping_postal_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('ship_to_contact', type=str, help='')
        c.argument('ship_to_name', type=str, help='')
        c.argument('status', type=str, help='')
        c.argument('total_amount_excluding_tax', type=float, help='')
        c.argument('total_amount_including_tax', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('currency', action=AddCurrency, nargs='+', help='currency')
        c.argument('payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm')
        c.argument('sales_invoice_lines', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('shipment_method', action=AddShipmentMethod, nargs='+', help='shipmentMethod')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Customer')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType', arg_group='Customer')
        c.argument('blocked', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_currency_code', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_currency_id', help='', arg_group='Customer')
        c.argument('display_name', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_email', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_last_modified_date_time_last_modified_date_time', help='',
                   arg_group='Customer')
        c.argument('microsoft_graph_customer_number', type=str, help='', arg_group='Customer')
        c.argument('payment_method_id', help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_payment_terms_id_payment_terms_id', help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_phone_number', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_shipment_method_id_shipment_method_id', help='', arg_group='Customer')
        c.argument('tax_area_display_name', type=str, help='', arg_group='Customer')
        c.argument('tax_area_id', help='', arg_group='Customer')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='', arg_group='Customer')
        c.argument('tax_registration_number', type=str, help='', arg_group='Customer')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Customer')
        c.argument('website', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_currency', action=AddCurrency, nargs='+', help='currency', arg_group='Customer')
        c.argument('payment_method', action=AddPaymentMethod, nargs='+', help='paymentMethod', arg_group='Customer')
        c.argument('microsoft_graph_payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm',
                   arg_group='Customer')
        c.argument('picture', action=AddFinancialsCompaniesPicture, nargs='+', help='', arg_group='Customer')
        c.argument('microsoft_graph_shipment_method', action=AddShipmentMethod, nargs='+', help='shipmentMethod',
                   arg_group='Customer')

    with self.argument_context('financials financial-company create-sale-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('shipment_date', help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Item')
        c.argument('base_unit_of_measure_id', help='', arg_group='Item')
        c.argument('blocked', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('display_name', type=str, help='', arg_group='Item')
        c.argument('gtin', type=str, help='', arg_group='Item')
        c.argument('inventory', type=float, help='', arg_group='Item')
        c.argument('item_category_code', type=str, help='', arg_group='Item')
        c.argument('item_category_id', help='', arg_group='Item')
        c.argument('last_modified_date_time', help='', arg_group='Item')
        c.argument('number', type=str, help='', arg_group='Item')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('tax_group_code', type=str, help='', arg_group='Item')
        c.argument('tax_group_id', help='', arg_group='Item')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Item')
        c.argument('unit_cost', type=float, help='', arg_group='Item')
        c.argument('number_unit_price', type=float, help='', arg_group='Item')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory', arg_group='Item')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='',
                   arg_group='Item')

    with self.argument_context('financials financial-company create-sale-order') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('billing_postal_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('bill_to_customer_id', help='')
        c.argument('bill_to_customer_number', type=str, help='')
        c.argument('bill_to_name', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('customer_id', help='')
        c.argument('customer_name', type=str, help='')
        c.argument('customer_number', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('email', type=str, help='')
        c.argument('external_document_number', type=str, help='')
        c.argument('fully_shipped', arg_type=get_three_state_flag(), help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('order_date', help='')
        c.argument('partial_shipping', arg_type=get_three_state_flag(), help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('prices_include_tax', arg_type=get_three_state_flag(), help='')
        c.argument('requested_delivery_date', help='')
        c.argument('salesperson', type=str, help='')
        c.argument('selling_postal_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('shipping_postal_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('ship_to_contact', type=str, help='')
        c.argument('ship_to_name', type=str, help='')
        c.argument('status', type=str, help='')
        c.argument('total_amount_excluding_tax', type=float, help='')
        c.argument('total_amount_including_tax', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('currency', action=AddCurrency, nargs='+', help='currency')
        c.argument('payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm')
        c.argument('sales_order_lines', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Customer')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType', arg_group='Customer')
        c.argument('blocked', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_currency_code', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_currency_id', help='', arg_group='Customer')
        c.argument('display_name', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_email', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_last_modified_date_time_last_modified_date_time', help='',
                   arg_group='Customer')
        c.argument('microsoft_graph_customer_number', type=str, help='', arg_group='Customer')
        c.argument('payment_method_id', help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_payment_terms_id_payment_terms_id', help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_phone_number', type=str, help='', arg_group='Customer')
        c.argument('shipment_method_id', help='', arg_group='Customer')
        c.argument('tax_area_display_name', type=str, help='', arg_group='Customer')
        c.argument('tax_area_id', help='', arg_group='Customer')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='', arg_group='Customer')
        c.argument('tax_registration_number', type=str, help='', arg_group='Customer')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Customer')
        c.argument('website', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_currency', action=AddCurrency, nargs='+', help='currency', arg_group='Customer')
        c.argument('payment_method', action=AddPaymentMethod, nargs='+', help='paymentMethod', arg_group='Customer')
        c.argument('microsoft_graph_payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm',
                   arg_group='Customer')
        c.argument('picture', action=AddFinancialsCompaniesPicture, nargs='+', help='', arg_group='Customer')
        c.argument('shipment_method', action=AddShipmentMethod, nargs='+', help='shipmentMethod',
                   arg_group='Customer')

    with self.argument_context('financials financial-company create-sale-order-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('invoiced_quantity', type=float, help='')
        c.argument('invoice_quantity', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('shipment_date', help='')
        c.argument('shipped_quantity', type=float, help='')
        c.argument('ship_quantity', type=float, help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Item')
        c.argument('base_unit_of_measure_id', help='', arg_group='Item')
        c.argument('blocked', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('display_name', type=str, help='', arg_group='Item')
        c.argument('gtin', type=str, help='', arg_group='Item')
        c.argument('inventory', type=float, help='', arg_group='Item')
        c.argument('item_category_code', type=str, help='', arg_group='Item')
        c.argument('item_category_id', help='', arg_group='Item')
        c.argument('last_modified_date_time', help='', arg_group='Item')
        c.argument('number', type=str, help='', arg_group='Item')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('tax_group_code', type=str, help='', arg_group='Item')
        c.argument('tax_group_id', help='', arg_group='Item')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Item')
        c.argument('unit_cost', type=float, help='', arg_group='Item')
        c.argument('number_unit_price', type=float, help='', arg_group='Item')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory', arg_group='Item')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='',
                   arg_group='Item')

    with self.argument_context('financials financial-company create-sale-quote') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('accepted_date', help='')
        c.argument('billing_postal_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('bill_to_customer_id', help='')
        c.argument('bill_to_customer_number', type=str, help='')
        c.argument('bill_to_name', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('customer_id', help='')
        c.argument('customer_name', type=str, help='')
        c.argument('customer_number', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('document_date', help='')
        c.argument('due_date', help='')
        c.argument('email', type=str, help='')
        c.argument('external_document_number', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('salesperson', type=str, help='')
        c.argument('selling_postal_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('sent_date', help='')
        c.argument('shipment_method_id', help='')
        c.argument('shipping_postal_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('ship_to_contact', type=str, help='')
        c.argument('ship_to_name', type=str, help='')
        c.argument('status', type=str, help='')
        c.argument('total_amount_excluding_tax', type=float, help='')
        c.argument('total_amount_including_tax', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('valid_until_date', help='')
        c.argument('currency', action=AddCurrency, nargs='+', help='currency')
        c.argument('payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm')
        c.argument('sales_quote_lines', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('shipment_method', action=AddShipmentMethod, nargs='+', help='shipmentMethod')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Customer')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType', arg_group='Customer')
        c.argument('blocked', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_currency_code', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_currency_id', help='', arg_group='Customer')
        c.argument('display_name', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_email', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_last_modified_date_time_last_modified_date_time', help='',
                   arg_group='Customer')
        c.argument('microsoft_graph_customer_number', type=str, help='', arg_group='Customer')
        c.argument('payment_method_id', help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_payment_terms_id_payment_terms_id', help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_phone_number', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_shipment_method_id_shipment_method_id', help='', arg_group='Customer')
        c.argument('tax_area_display_name', type=str, help='', arg_group='Customer')
        c.argument('tax_area_id', help='', arg_group='Customer')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='', arg_group='Customer')
        c.argument('tax_registration_number', type=str, help='', arg_group='Customer')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Customer')
        c.argument('website', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_currency', action=AddCurrency, nargs='+', help='currency', arg_group='Customer')
        c.argument('payment_method', action=AddPaymentMethod, nargs='+', help='paymentMethod', arg_group='Customer')
        c.argument('microsoft_graph_payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm',
                   arg_group='Customer')
        c.argument('picture', action=AddFinancialsCompaniesPicture, nargs='+', help='', arg_group='Customer')
        c.argument('microsoft_graph_shipment_method', action=AddShipmentMethod, nargs='+', help='shipmentMethod',
                   arg_group='Customer')

    with self.argument_context('financials financial-company create-sale-quote-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Item')
        c.argument('base_unit_of_measure_id', help='', arg_group='Item')
        c.argument('blocked', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('display_name', type=str, help='', arg_group='Item')
        c.argument('gtin', type=str, help='', arg_group='Item')
        c.argument('inventory', type=float, help='', arg_group='Item')
        c.argument('item_category_code', type=str, help='', arg_group='Item')
        c.argument('item_category_id', help='', arg_group='Item')
        c.argument('last_modified_date_time', help='', arg_group='Item')
        c.argument('number', type=str, help='', arg_group='Item')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('tax_group_code', type=str, help='', arg_group='Item')
        c.argument('tax_group_id', help='', arg_group='Item')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Item')
        c.argument('unit_cost', type=float, help='', arg_group='Item')
        c.argument('number_unit_price', type=float, help='', arg_group='Item')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory', arg_group='Item')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='',
                   arg_group='Item')

    with self.argument_context('financials financial-company create-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company create-tax-area') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('tax_type', type=str, help='')

    with self.argument_context('financials financial-company create-tax-group') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('tax_type', type=str, help='')

    with self.argument_context('financials financial-company create-unit-of-measure') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('international_standard_code', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company create-vendor') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('balance', type=float, help='')
        c.argument('blocked', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_method_id', help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('website', type=str, help='')
        c.argument('currency', action=AddCurrency, nargs='+', help='currency')
        c.argument('payment_method', action=AddPaymentMethod, nargs='+', help='paymentMethod')
        c.argument('payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreatePurchaseInvoicePicture, nargs='+', help='')

    with self.argument_context('financials financial-company delete-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('account_id', type=str, help='key: id of account')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-aged-account-payable') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('aged_accounts_payable_id', type=str, help='key: id of agedAccountsPayable')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-aged-account-receivable') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('aged_accounts_receivable_id', type=str, help='key: id of agedAccountsReceivable')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-company-information') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('company_information_id', type=str, help='key: id of companyInformation')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-country-region') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('country_region_id', type=str, help='key: id of countryRegion')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('currency_id', type=str, help='key: id of currency')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-customer-payment') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-customer-payment-journal') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-dimension') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('dimension_id', type=str, help='key: id of dimension')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-dimension-value') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('dimension_value_id', type=str, help='key: id of dimensionValue')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-employee') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('employee_id', type=str, help='key: id of employee')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-general-ledger-entry') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('general_ledger_entry_id', type=str, help='key: id of generalLedgerEntry')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_id', type=str, help='key: id of item')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_category_id', type=str, help='key: id of itemCategory')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-journal') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-journal-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_line_id', type=str, help='key: id of journalLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('payment_method_id', type=str, help='key: id of paymentMethod')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('payment_term_id', type=str, help='key: id of paymentTerm')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-purchase-invoice') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-purchase-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-sale-credit-memo') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-sale-credit-memo-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-sale-invoice') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-sale-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-sale-order') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-sale-order-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-sale-quote') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-sale-quote-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('shipment_method_id', type=str, help='key: id of shipmentMethod')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-tax-area') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('tax_area_id', type=str, help='key: id of taxArea')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-tax-group') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('tax_group_id', type=str, help='key: id of taxGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-unit-of-measure') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('unit_of_measure_id', type=str, help='key: id of unitOfMeasure')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company delete-vendor') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company list-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-aged-account-payable') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-aged-account-receivable') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-company-information') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-country-region') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-customer-payment') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-customer-payment-journal') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-dimension') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-dimension-value') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-employee') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-general-ledger-entry') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-journal') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-journal-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-purchase-invoice') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-purchase-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-sale-credit-memo') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-sale-credit-memo-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-sale-invoice') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-sale-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-sale-order') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-sale-order-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-sale-quote') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-sale-quote-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-tax-area') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-tax-group') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-unit-of-measure') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company list-vendor') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company set-company-information-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('company_information_id', type=str, help='key: id of companyInformation')
        c.argument('data', help='New media content.')

    with self.argument_context('financials financial-company set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials financial-company show-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('account_id', type=str, help='key: id of account')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-aged-account-payable') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('aged_accounts_payable_id', type=str, help='key: id of agedAccountsPayable')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-aged-account-receivable') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('aged_accounts_receivable_id', type=str, help='key: id of agedAccountsReceivable')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-company-information') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('company_information_id', type=str, help='key: id of companyInformation')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-company-information-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('company_information_id', type=str, help='key: id of companyInformation')

    with self.argument_context('financials financial-company show-country-region') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('country_region_id', type=str, help='key: id of countryRegion')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('currency_id', type=str, help='key: id of currency')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-customer-payment') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-customer-payment-journal') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-dimension') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('dimension_id', type=str, help='key: id of dimension')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-dimension-value') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('dimension_value_id', type=str, help='key: id of dimensionValue')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-employee') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('employee_id', type=str, help='key: id of employee')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-general-ledger-entry') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('general_ledger_entry_id', type=str, help='key: id of generalLedgerEntry')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_id', type=str, help='key: id of item')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_category_id', type=str, help='key: id of itemCategory')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-journal') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-journal-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_line_id', type=str, help='key: id of journalLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('payment_method_id', type=str, help='key: id of paymentMethod')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('payment_term_id', type=str, help='key: id of paymentTerm')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials financial-company show-purchase-invoice') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-purchase-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-sale-credit-memo') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-sale-credit-memo-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-sale-invoice') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-sale-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-sale-order') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-sale-order-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-sale-quote') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-sale-quote-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('shipment_method_id', type=str, help='key: id of shipmentMethod')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-tax-area') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('tax_area_id', type=str, help='key: id of taxArea')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-tax-group') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('tax_group_id', type=str, help='key: id of taxGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-unit-of-measure') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('unit_of_measure_id', type=str, help='key: id of unitOfMeasure')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company show-vendor') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('account_id', type=str, help='key: id of account')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials financial-company update-aged-account-payable') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('aged_accounts_payable_id', type=str, help='key: id of agedAccountsPayable')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('aged_as_of_date', help='')
        c.argument('balance_due', type=float, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('current_amount', type=float, help='')
        c.argument('name', type=str, help='')
        c.argument('period1_amount', type=float, help='')
        c.argument('period2_amount', type=float, help='')
        c.argument('period3_amount', type=float, help='')
        c.argument('period_length_filter', type=str, help='')
        c.argument('vendor_number', type=str, help='')

    with self.argument_context('financials financial-company update-aged-account-receivable') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('aged_accounts_receivable_id', type=str, help='key: id of agedAccountsReceivable')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('aged_as_of_date', help='')
        c.argument('balance_due', type=float, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('current_amount', type=float, help='')
        c.argument('customer_number', type=str, help='')
        c.argument('name', type=str, help='')
        c.argument('period1_amount', type=float, help='')
        c.argument('period2_amount', type=float, help='')
        c.argument('period3_amount', type=float, help='')
        c.argument('period_length_filter', type=str, help='')

    with self.argument_context('financials financial-company update-company-information') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('company_information_id', type=str, help='key: id of companyInformation')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('currency_code', type=str, help='')
        c.argument('current_fiscal_year_start_date', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('fax_number', type=str, help='')
        c.argument('industry', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('picture', help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('website', type=str, help='')

    with self.argument_context('financials financial-company update-country-region') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('country_region_id', type=str, help='key: id of countryRegion')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address_format', type=str, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('currency_id', type=str, help='key: id of currency')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials financial-company update-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('blocked', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_method_id', help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('shipment_method_id', help='')
        c.argument('tax_area_display_name', type=str, help='')
        c.argument('tax_area_id', help='')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('website', type=str, help='')
        c.argument('currency', action=AddCurrency, nargs='+', help='currency')
        c.argument('payment_method', action=AddPaymentMethod, nargs='+', help='paymentMethod')
        c.argument('payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm')
        c.argument('picture', action=AddFinancialsCompaniesPicture, nargs='+', help='')
        c.argument('shipment_method', action=AddShipmentMethod, nargs='+', help='shipmentMethod')

    with self.argument_context('financials financial-company update-customer-payment') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount', type=float, help='')
        c.argument('applies_to_invoice_id', help='')
        c.argument('applies_to_invoice_number', type=str, help='')
        c.argument('comment', type=str, help='')
        c.argument('contact_id', type=str, help='')
        c.argument('customer_id', help='')
        c.argument('customer_number', type=str, help='')
        c.argument('description', type=str, help='')
        c.argument('document_number', type=str, help='')
        c.argument('external_document_number', type=str, help='')
        c.argument('journal_display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('line_number', type=int, help='')
        c.argument('posting_date', help='')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Customer')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType', arg_group='Customer')
        c.argument('blocked', type=str, help='', arg_group='Customer')
        c.argument('currency_code', type=str, help='', arg_group='Customer')
        c.argument('currency_id', help='', arg_group='Customer')
        c.argument('display_name', type=str, help='', arg_group='Customer')
        c.argument('email', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_last_modified_date_time_last_modified_date_time', help='',
                   arg_group='Customer')
        c.argument('number', type=str, help='', arg_group='Customer')
        c.argument('payment_method_id', help='', arg_group='Customer')
        c.argument('payment_terms_id', help='', arg_group='Customer')
        c.argument('phone_number', type=str, help='', arg_group='Customer')
        c.argument('shipment_method_id', help='', arg_group='Customer')
        c.argument('tax_area_display_name', type=str, help='', arg_group='Customer')
        c.argument('tax_area_id', help='', arg_group='Customer')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='', arg_group='Customer')
        c.argument('tax_registration_number', type=str, help='', arg_group='Customer')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Customer')
        c.argument('website', type=str, help='', arg_group='Customer')
        c.argument('currency', action=AddCurrency, nargs='+', help='currency', arg_group='Customer')
        c.argument('payment_method', action=AddPaymentMethod, nargs='+', help='paymentMethod', arg_group='Customer')
        c.argument('payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm', arg_group='Customer')
        c.argument('picture', action=AddFinancialsCompaniesPicture, nargs='+', help='', arg_group='Customer')
        c.argument('shipment_method', action=AddShipmentMethod, nargs='+', help='shipmentMethod',
                   arg_group='Customer')

    with self.argument_context('financials financial-company update-customer-payment-journal') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('balancing_account_id', help='')
        c.argument('balancing_account_number', type=str, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')
        c.argument('customer_payments', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('financials financial-company update-dimension') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('dimension_id', type=str, help='key: id of dimension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('dimension_values', action=AddFinancialsCompaniesDimensionValues, nargs='+', help='')

    with self.argument_context('financials financial-company update-dimension-value') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('dimension_value_id', type=str, help='key: id of dimensionValue')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company update-employee') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('employee_id', type=str, help='key: id of employee')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('birth_date', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('employment_date', help='')
        c.argument('given_name', type=str, help='')
        c.argument('job_title', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('middle_name', type=str, help='')
        c.argument('mobile_phone', type=str, help='')
        c.argument('number', type=str, help='')
        c.argument('personal_email', type=str, help='')
        c.argument('phone_number', type=str, help='')
        c.argument('statistics_group_code', type=str, help='')
        c.argument('status', type=str, help='')
        c.argument('surname', type=str, help='')
        c.argument('termination_date', help='')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateEmployeePicture, nargs='+', help='')

    with self.argument_context('financials financial-company update-general-ledger-entry') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('general_ledger_entry_id', type=str, help='key: id of generalLedgerEntry')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('account_number', type=str, help='')
        c.argument('credit_amount', type=float, help='')
        c.argument('debit_amount', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('document_number', type=str, help='')
        c.argument('document_type', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('posting_date', help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')

    with self.argument_context('financials financial-company update-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_id', type=str, help='key: id of item')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('base_unit_of_measure_id', help='')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('display_name', type=str, help='')
        c.argument('gtin', type=str, help='')
        c.argument('inventory', type=float, help='')
        c.argument('item_category_code', type=str, help='')
        c.argument('item_category_id', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('tax_group_code', type=str, help='')
        c.argument('tax_group_id', help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('unit_price', type=float, help='')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='')

    with self.argument_context('financials financial-company update-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_category_id', type=str, help='key: id of itemCategory')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company update-journal') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('balancing_account_id', help='')
        c.argument('balancing_account_number', type=str, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')
        c.argument('journal_lines', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('financials financial-company update-journal-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_line_id', type=str, help='key: id of journalLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('account_number', type=str, help='')
        c.argument('amount', type=float, help='')
        c.argument('comment', type=str, help='')
        c.argument('description', type=str, help='')
        c.argument('document_number', type=str, help='')
        c.argument('external_document_number', type=str, help='')
        c.argument('journal_display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('line_number', type=int, help='')
        c.argument('posting_date', help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')

    with self.argument_context('financials financial-company update-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('payment_method_id', type=str, help='key: id of paymentMethod')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('payment_term_id', type=str, help='key: id of paymentTerm')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company update-purchase-invoice') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('buy_from_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('due_date', help='')
        c.argument('invoice_date', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('pay_to_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('pay_to_contact', type=str, help='')
        c.argument('pay_to_name', type=str, help='')
        c.argument('pay_to_vendor_id', help='')
        c.argument('pay_to_vendor_number', type=str, help='')
        c.argument('prices_include_tax', arg_type=get_three_state_flag(), help='')
        c.argument('ship_to_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('ship_to_contact', type=str, help='')
        c.argument('ship_to_name', type=str, help='')
        c.argument('status', type=str, help='')
        c.argument('total_amount_excluding_tax', type=float, help='')
        c.argument('total_amount_including_tax', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('vendor_id', help='')
        c.argument('vendor_invoice_number', type=str, help='')
        c.argument('vendor_name', type=str, help='')
        c.argument('vendor_number', type=str, help='')
        c.argument('currency', action=AddCurrency, nargs='+', help='currency')
        c.argument('purchase_invoice_lines', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Vendor')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType', arg_group='Vendor')
        c.argument('balance', type=float, help='', arg_group='Vendor')
        c.argument('blocked', type=str, help='', arg_group='Vendor')
        c.argument('microsoft_graph_vendor_currency_code', type=str, help='', arg_group='Vendor')
        c.argument('microsoft_graph_vendor_currency_id', help='', arg_group='Vendor')
        c.argument('display_name', type=str, help='', arg_group='Vendor')
        c.argument('email', type=str, help='', arg_group='Vendor')
        c.argument('microsoft_graph_vendor_last_modified_date_time_last_modified_date_time', help='',
                   arg_group='Vendor')
        c.argument('microsoft_graph_vendor_number', type=str, help='', arg_group='Vendor')
        c.argument('payment_method_id', help='', arg_group='Vendor')
        c.argument('payment_terms_id', help='', arg_group='Vendor')
        c.argument('phone_number', type=str, help='', arg_group='Vendor')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='', arg_group='Vendor')
        c.argument('tax_registration_number', type=str, help='', arg_group='Vendor')
        c.argument('website', type=str, help='', arg_group='Vendor')
        c.argument('microsoft_graph_currency', action=AddCurrency, nargs='+', help='currency', arg_group='Vendor')
        c.argument('payment_method', action=AddPaymentMethod, nargs='+', help='paymentMethod', arg_group='Vendor')
        c.argument('payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm', arg_group='Vendor')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreatePurchaseInvoicePicture, nargs='+', help='',
                   arg_group='Vendor')

    with self.argument_context('financials financial-company update-purchase-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('expected_receipt_date', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Item')
        c.argument('base_unit_of_measure_id', help='', arg_group='Item')
        c.argument('blocked', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('display_name', type=str, help='', arg_group='Item')
        c.argument('gtin', type=str, help='', arg_group='Item')
        c.argument('inventory', type=float, help='', arg_group='Item')
        c.argument('item_category_code', type=str, help='', arg_group='Item')
        c.argument('item_category_id', help='', arg_group='Item')
        c.argument('last_modified_date_time', help='', arg_group='Item')
        c.argument('number', type=str, help='', arg_group='Item')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('tax_group_code', type=str, help='', arg_group='Item')
        c.argument('tax_group_id', help='', arg_group='Item')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Item')
        c.argument('number_unit_cost', type=float, help='', arg_group='Item')
        c.argument('unit_price', type=float, help='', arg_group='Item')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory', arg_group='Item')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='',
                   arg_group='Item')

    with self.argument_context('financials financial-company update-sale-credit-memo') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('billing_postal_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('bill_to_customer_id', help='')
        c.argument('bill_to_customer_number', type=str, help='')
        c.argument('bill_to_name', type=str, help='')
        c.argument('credit_memo_date', help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('customer_id', help='')
        c.argument('customer_name', type=str, help='')
        c.argument('customer_number', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('due_date', help='')
        c.argument('email', type=str, help='')
        c.argument('external_document_number', type=str, help='')
        c.argument('invoice_id', help='')
        c.argument('invoice_number', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('prices_include_tax', arg_type=get_three_state_flag(), help='')
        c.argument('salesperson', type=str, help='')
        c.argument('selling_postal_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('status', type=str, help='')
        c.argument('total_amount_excluding_tax', type=float, help='')
        c.argument('total_amount_including_tax', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('currency', action=AddCurrency, nargs='+', help='currency')
        c.argument('payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm')
        c.argument('sales_credit_memo_lines', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Customer')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType', arg_group='Customer')
        c.argument('blocked', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_currency_code', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_currency_id', help='', arg_group='Customer')
        c.argument('display_name', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_email', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_last_modified_date_time_last_modified_date_time', help='',
                   arg_group='Customer')
        c.argument('microsoft_graph_customer_number', type=str, help='', arg_group='Customer')
        c.argument('payment_method_id', help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_payment_terms_id_payment_terms_id', help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_phone_number', type=str, help='', arg_group='Customer')
        c.argument('shipment_method_id', help='', arg_group='Customer')
        c.argument('tax_area_display_name', type=str, help='', arg_group='Customer')
        c.argument('tax_area_id', help='', arg_group='Customer')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='', arg_group='Customer')
        c.argument('tax_registration_number', type=str, help='', arg_group='Customer')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Customer')
        c.argument('website', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_currency', action=AddCurrency, nargs='+', help='currency', arg_group='Customer')
        c.argument('payment_method', action=AddPaymentMethod, nargs='+', help='paymentMethod', arg_group='Customer')
        c.argument('microsoft_graph_payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm',
                   arg_group='Customer')
        c.argument('picture', action=AddFinancialsCompaniesPicture, nargs='+', help='', arg_group='Customer')
        c.argument('shipment_method', action=AddShipmentMethod, nargs='+', help='shipmentMethod',
                   arg_group='Customer')

    with self.argument_context('financials financial-company update-sale-credit-memo-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('shipment_date', help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Item')
        c.argument('base_unit_of_measure_id', help='', arg_group='Item')
        c.argument('blocked', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('display_name', type=str, help='', arg_group='Item')
        c.argument('gtin', type=str, help='', arg_group='Item')
        c.argument('inventory', type=float, help='', arg_group='Item')
        c.argument('item_category_code', type=str, help='', arg_group='Item')
        c.argument('item_category_id', help='', arg_group='Item')
        c.argument('last_modified_date_time', help='', arg_group='Item')
        c.argument('number', type=str, help='', arg_group='Item')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('tax_group_code', type=str, help='', arg_group='Item')
        c.argument('tax_group_id', help='', arg_group='Item')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Item')
        c.argument('unit_cost', type=float, help='', arg_group='Item')
        c.argument('number_unit_price', type=float, help='', arg_group='Item')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory', arg_group='Item')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='',
                   arg_group='Item')

    with self.argument_context('financials financial-company update-sale-invoice') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('billing_postal_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('bill_to_customer_id', help='')
        c.argument('bill_to_customer_number', type=str, help='')
        c.argument('bill_to_name', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('customer_id', help='')
        c.argument('customer_name', type=str, help='')
        c.argument('customer_number', type=str, help='')
        c.argument('customer_purchase_order_reference', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('due_date', help='')
        c.argument('email', type=str, help='')
        c.argument('external_document_number', type=str, help='')
        c.argument('invoice_date', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('order_id', help='')
        c.argument('order_number', type=str, help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('prices_include_tax', arg_type=get_three_state_flag(), help='')
        c.argument('salesperson', type=str, help='')
        c.argument('selling_postal_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('shipment_method_id', help='')
        c.argument('shipping_postal_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('ship_to_contact', type=str, help='')
        c.argument('ship_to_name', type=str, help='')
        c.argument('status', type=str, help='')
        c.argument('total_amount_excluding_tax', type=float, help='')
        c.argument('total_amount_including_tax', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('currency', action=AddCurrency, nargs='+', help='currency')
        c.argument('payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm')
        c.argument('sales_invoice_lines', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('shipment_method', action=AddShipmentMethod, nargs='+', help='shipmentMethod')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Customer')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType', arg_group='Customer')
        c.argument('blocked', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_currency_code', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_currency_id', help='', arg_group='Customer')
        c.argument('display_name', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_email', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_last_modified_date_time_last_modified_date_time', help='',
                   arg_group='Customer')
        c.argument('microsoft_graph_customer_number', type=str, help='', arg_group='Customer')
        c.argument('payment_method_id', help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_payment_terms_id_payment_terms_id', help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_phone_number', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_shipment_method_id_shipment_method_id', help='', arg_group='Customer')
        c.argument('tax_area_display_name', type=str, help='', arg_group='Customer')
        c.argument('tax_area_id', help='', arg_group='Customer')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='', arg_group='Customer')
        c.argument('tax_registration_number', type=str, help='', arg_group='Customer')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Customer')
        c.argument('website', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_currency', action=AddCurrency, nargs='+', help='currency', arg_group='Customer')
        c.argument('payment_method', action=AddPaymentMethod, nargs='+', help='paymentMethod', arg_group='Customer')
        c.argument('microsoft_graph_payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm',
                   arg_group='Customer')
        c.argument('picture', action=AddFinancialsCompaniesPicture, nargs='+', help='', arg_group='Customer')
        c.argument('microsoft_graph_shipment_method', action=AddShipmentMethod, nargs='+', help='shipmentMethod',
                   arg_group='Customer')

    with self.argument_context('financials financial-company update-sale-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('shipment_date', help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Item')
        c.argument('base_unit_of_measure_id', help='', arg_group='Item')
        c.argument('blocked', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('display_name', type=str, help='', arg_group='Item')
        c.argument('gtin', type=str, help='', arg_group='Item')
        c.argument('inventory', type=float, help='', arg_group='Item')
        c.argument('item_category_code', type=str, help='', arg_group='Item')
        c.argument('item_category_id', help='', arg_group='Item')
        c.argument('last_modified_date_time', help='', arg_group='Item')
        c.argument('number', type=str, help='', arg_group='Item')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('tax_group_code', type=str, help='', arg_group='Item')
        c.argument('tax_group_id', help='', arg_group='Item')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Item')
        c.argument('unit_cost', type=float, help='', arg_group='Item')
        c.argument('number_unit_price', type=float, help='', arg_group='Item')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory', arg_group='Item')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='',
                   arg_group='Item')

    with self.argument_context('financials financial-company update-sale-order') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('billing_postal_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('bill_to_customer_id', help='')
        c.argument('bill_to_customer_number', type=str, help='')
        c.argument('bill_to_name', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('customer_id', help='')
        c.argument('customer_name', type=str, help='')
        c.argument('customer_number', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('email', type=str, help='')
        c.argument('external_document_number', type=str, help='')
        c.argument('fully_shipped', arg_type=get_three_state_flag(), help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('order_date', help='')
        c.argument('partial_shipping', arg_type=get_three_state_flag(), help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('prices_include_tax', arg_type=get_three_state_flag(), help='')
        c.argument('requested_delivery_date', help='')
        c.argument('salesperson', type=str, help='')
        c.argument('selling_postal_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('shipping_postal_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('ship_to_contact', type=str, help='')
        c.argument('ship_to_name', type=str, help='')
        c.argument('status', type=str, help='')
        c.argument('total_amount_excluding_tax', type=float, help='')
        c.argument('total_amount_including_tax', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('currency', action=AddCurrency, nargs='+', help='currency')
        c.argument('payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm')
        c.argument('sales_order_lines', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Customer')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType', arg_group='Customer')
        c.argument('blocked', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_currency_code', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_currency_id', help='', arg_group='Customer')
        c.argument('display_name', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_email', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_last_modified_date_time_last_modified_date_time', help='',
                   arg_group='Customer')
        c.argument('microsoft_graph_customer_number', type=str, help='', arg_group='Customer')
        c.argument('payment_method_id', help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_payment_terms_id_payment_terms_id', help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_phone_number', type=str, help='', arg_group='Customer')
        c.argument('shipment_method_id', help='', arg_group='Customer')
        c.argument('tax_area_display_name', type=str, help='', arg_group='Customer')
        c.argument('tax_area_id', help='', arg_group='Customer')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='', arg_group='Customer')
        c.argument('tax_registration_number', type=str, help='', arg_group='Customer')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Customer')
        c.argument('website', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_currency', action=AddCurrency, nargs='+', help='currency', arg_group='Customer')
        c.argument('payment_method', action=AddPaymentMethod, nargs='+', help='paymentMethod', arg_group='Customer')
        c.argument('microsoft_graph_payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm',
                   arg_group='Customer')
        c.argument('picture', action=AddFinancialsCompaniesPicture, nargs='+', help='', arg_group='Customer')
        c.argument('shipment_method', action=AddShipmentMethod, nargs='+', help='shipmentMethod',
                   arg_group='Customer')

    with self.argument_context('financials financial-company update-sale-order-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('invoiced_quantity', type=float, help='')
        c.argument('invoice_quantity', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('shipment_date', help='')
        c.argument('shipped_quantity', type=float, help='')
        c.argument('ship_quantity', type=float, help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Item')
        c.argument('base_unit_of_measure_id', help='', arg_group='Item')
        c.argument('blocked', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('display_name', type=str, help='', arg_group='Item')
        c.argument('gtin', type=str, help='', arg_group='Item')
        c.argument('inventory', type=float, help='', arg_group='Item')
        c.argument('item_category_code', type=str, help='', arg_group='Item')
        c.argument('item_category_id', help='', arg_group='Item')
        c.argument('last_modified_date_time', help='', arg_group='Item')
        c.argument('number', type=str, help='', arg_group='Item')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('tax_group_code', type=str, help='', arg_group='Item')
        c.argument('tax_group_id', help='', arg_group='Item')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Item')
        c.argument('unit_cost', type=float, help='', arg_group='Item')
        c.argument('number_unit_price', type=float, help='', arg_group='Item')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory', arg_group='Item')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='',
                   arg_group='Item')

    with self.argument_context('financials financial-company update-sale-quote') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('accepted_date', help='')
        c.argument('billing_postal_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('bill_to_customer_id', help='')
        c.argument('bill_to_customer_number', type=str, help='')
        c.argument('bill_to_name', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('customer_id', help='')
        c.argument('customer_name', type=str, help='')
        c.argument('customer_number', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('document_date', help='')
        c.argument('due_date', help='')
        c.argument('email', type=str, help='')
        c.argument('external_document_number', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('salesperson', type=str, help='')
        c.argument('selling_postal_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('sent_date', help='')
        c.argument('shipment_method_id', help='')
        c.argument('shipping_postal_address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('ship_to_contact', type=str, help='')
        c.argument('ship_to_name', type=str, help='')
        c.argument('status', type=str, help='')
        c.argument('total_amount_excluding_tax', type=float, help='')
        c.argument('total_amount_including_tax', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('valid_until_date', help='')
        c.argument('currency', action=AddCurrency, nargs='+', help='currency')
        c.argument('payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm')
        c.argument('sales_quote_lines', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('shipment_method', action=AddShipmentMethod, nargs='+', help='shipmentMethod')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Customer')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType', arg_group='Customer')
        c.argument('blocked', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_currency_code', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_currency_id', help='', arg_group='Customer')
        c.argument('display_name', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_email', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_last_modified_date_time_last_modified_date_time', help='',
                   arg_group='Customer')
        c.argument('microsoft_graph_customer_number', type=str, help='', arg_group='Customer')
        c.argument('payment_method_id', help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_payment_terms_id_payment_terms_id', help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_phone_number', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_shipment_method_id_shipment_method_id', help='', arg_group='Customer')
        c.argument('tax_area_display_name', type=str, help='', arg_group='Customer')
        c.argument('tax_area_id', help='', arg_group='Customer')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='', arg_group='Customer')
        c.argument('tax_registration_number', type=str, help='', arg_group='Customer')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Customer')
        c.argument('website', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_currency', action=AddCurrency, nargs='+', help='currency', arg_group='Customer')
        c.argument('payment_method', action=AddPaymentMethod, nargs='+', help='paymentMethod', arg_group='Customer')
        c.argument('microsoft_graph_payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm',
                   arg_group='Customer')
        c.argument('picture', action=AddFinancialsCompaniesPicture, nargs='+', help='', arg_group='Customer')
        c.argument('microsoft_graph_shipment_method', action=AddShipmentMethod, nargs='+', help='shipmentMethod',
                   arg_group='Customer')

    with self.argument_context('financials financial-company update-sale-quote-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Item')
        c.argument('base_unit_of_measure_id', help='', arg_group='Item')
        c.argument('blocked', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('display_name', type=str, help='', arg_group='Item')
        c.argument('gtin', type=str, help='', arg_group='Item')
        c.argument('inventory', type=float, help='', arg_group='Item')
        c.argument('item_category_code', type=str, help='', arg_group='Item')
        c.argument('item_category_id', help='', arg_group='Item')
        c.argument('last_modified_date_time', help='', arg_group='Item')
        c.argument('number', type=str, help='', arg_group='Item')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('tax_group_code', type=str, help='', arg_group='Item')
        c.argument('tax_group_id', help='', arg_group='Item')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Item')
        c.argument('unit_cost', type=float, help='', arg_group='Item')
        c.argument('number_unit_price', type=float, help='', arg_group='Item')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory', arg_group='Item')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='',
                   arg_group='Item')

    with self.argument_context('financials financial-company update-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('shipment_method_id', type=str, help='key: id of shipmentMethod')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company update-tax-area') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('tax_area_id', type=str, help='key: id of taxArea')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('tax_type', type=str, help='')

    with self.argument_context('financials financial-company update-tax-group') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('tax_group_id', type=str, help='key: id of taxGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('tax_type', type=str, help='')

    with self.argument_context('financials financial-company update-unit-of-measure') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('unit_of_measure_id', type=str, help='key: id of unitOfMeasure')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('international_standard_code', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company update-vendor') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('balance', type=float, help='')
        c.argument('blocked', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_method_id', help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('website', type=str, help='')
        c.argument('currency', action=AddCurrency, nargs='+', help='currency')
        c.argument('payment_method', action=AddPaymentMethod, nargs='+', help='paymentMethod')
        c.argument('payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreatePurchaseInvoicePicture, nargs='+', help='')

    with self.argument_context('financials financial-company-customer-payment-journal create-customer-payment') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount', type=float, help='')
        c.argument('applies_to_invoice_id', help='')
        c.argument('applies_to_invoice_number', type=str, help='')
        c.argument('comment', type=str, help='')
        c.argument('contact_id', type=str, help='')
        c.argument('customer_id', help='')
        c.argument('customer_number', type=str, help='')
        c.argument('description', type=str, help='')
        c.argument('document_number', type=str, help='')
        c.argument('external_document_number', type=str, help='')
        c.argument('journal_display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('line_number', type=int, help='')
        c.argument('posting_date', help='')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Customer')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType', arg_group='Customer')
        c.argument('blocked', type=str, help='', arg_group='Customer')
        c.argument('currency_code', type=str, help='', arg_group='Customer')
        c.argument('currency_id', help='', arg_group='Customer')
        c.argument('display_name', type=str, help='', arg_group='Customer')
        c.argument('email', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_last_modified_date_time_last_modified_date_time', help='',
                   arg_group='Customer')
        c.argument('number', type=str, help='', arg_group='Customer')
        c.argument('payment_method_id', help='', arg_group='Customer')
        c.argument('payment_terms_id', help='', arg_group='Customer')
        c.argument('phone_number', type=str, help='', arg_group='Customer')
        c.argument('shipment_method_id', help='', arg_group='Customer')
        c.argument('tax_area_display_name', type=str, help='', arg_group='Customer')
        c.argument('tax_area_id', help='', arg_group='Customer')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='', arg_group='Customer')
        c.argument('tax_registration_number', type=str, help='', arg_group='Customer')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Customer')
        c.argument('website', type=str, help='', arg_group='Customer')
        c.argument('currency', action=AddCurrency, nargs='+', help='currency', arg_group='Customer')
        c.argument('payment_method', action=AddPaymentMethod, nargs='+', help='paymentMethod', arg_group='Customer')
        c.argument('payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm', arg_group='Customer')
        c.argument('picture', action=AddFinancialsCompaniesPicture, nargs='+', help='', arg_group='Customer')
        c.argument('shipment_method', action=AddShipmentMethod, nargs='+', help='shipmentMethod',
                   arg_group='Customer')

    with self.argument_context('financials financial-company-customer-payment-journal delete-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-customer-payment-journal delete-customer-payment') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-customer-payment-journal list-customer-payment') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-customer-payment-journal show-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-customer-payment-journal show-customer-payment') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-customer-payment-journal update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials financial-company-customer-payment-journal update-customer-payment') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount', type=float, help='')
        c.argument('applies_to_invoice_id', help='')
        c.argument('applies_to_invoice_number', type=str, help='')
        c.argument('comment', type=str, help='')
        c.argument('contact_id', type=str, help='')
        c.argument('customer_id', help='')
        c.argument('customer_number', type=str, help='')
        c.argument('description', type=str, help='')
        c.argument('document_number', type=str, help='')
        c.argument('external_document_number', type=str, help='')
        c.argument('journal_display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('line_number', type=int, help='')
        c.argument('posting_date', help='')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Customer')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType', arg_group='Customer')
        c.argument('blocked', type=str, help='', arg_group='Customer')
        c.argument('currency_code', type=str, help='', arg_group='Customer')
        c.argument('currency_id', help='', arg_group='Customer')
        c.argument('display_name', type=str, help='', arg_group='Customer')
        c.argument('email', type=str, help='', arg_group='Customer')
        c.argument('microsoft_graph_customer_last_modified_date_time_last_modified_date_time', help='',
                   arg_group='Customer')
        c.argument('number', type=str, help='', arg_group='Customer')
        c.argument('payment_method_id', help='', arg_group='Customer')
        c.argument('payment_terms_id', help='', arg_group='Customer')
        c.argument('phone_number', type=str, help='', arg_group='Customer')
        c.argument('shipment_method_id', help='', arg_group='Customer')
        c.argument('tax_area_display_name', type=str, help='', arg_group='Customer')
        c.argument('tax_area_id', help='', arg_group='Customer')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='', arg_group='Customer')
        c.argument('tax_registration_number', type=str, help='', arg_group='Customer')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Customer')
        c.argument('website', type=str, help='', arg_group='Customer')
        c.argument('currency', action=AddCurrency, nargs='+', help='currency', arg_group='Customer')
        c.argument('payment_method', action=AddPaymentMethod, nargs='+', help='paymentMethod', arg_group='Customer')
        c.argument('payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm', arg_group='Customer')
        c.argument('picture', action=AddFinancialsCompaniesPicture, nargs='+', help='', arg_group='Customer')
        c.argument('shipment_method', action=AddShipmentMethod, nargs='+', help='shipmentMethod',
                   arg_group='Customer')

    with self.argument_context('financials financial-company-customer-payment-journal-customer-payment delete-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-customer-payment-journal-customer-payment show-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-customer-payment-journal-customer-payment update-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('blocked', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_method_id', help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('shipment_method_id', help='')
        c.argument('tax_area_display_name', type=str, help='')
        c.argument('tax_area_id', help='')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('website', type=str, help='')
        c.argument('currency', action=AddCurrency, nargs='+', help='currency')
        c.argument('payment_method', action=AddPaymentMethod, nargs='+', help='paymentMethod')
        c.argument('payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm')
        c.argument('picture', action=AddFinancialsCompaniesPicture, nargs='+', help='')
        c.argument('shipment_method', action=AddShipmentMethod, nargs='+', help='shipmentMethod')

    with self.argument_context('financials financial-company-customer-payment-journal-customer-payment-customer create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-customer-payment-journal-customer-payment-customer delete-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-customer-payment-journal-customer-payment-customer delete-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-customer-payment-journal-customer-payment-customer delete-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-customer-payment-journal-customer-payment-customer delete-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-customer-payment-journal-customer-payment-customer delete-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-customer-payment-journal-customer-payment-customer list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-customer-payment-journal-customer-payment-customer set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials financial-company-customer-payment-journal-customer-payment-customer show-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-customer-payment-journal-customer-payment-customer show-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-customer-payment-journal-customer-payment-customer show-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-customer-payment-journal-customer-payment-customer show-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-customer-payment-journal-customer-payment-customer show-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials financial-company-customer-payment-journal-customer-payment-customer show-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-customer-payment-journal-customer-payment-customer update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials financial-company-customer-payment-journal-customer-payment-customer update-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-customer-payment-journal-customer-payment-customer update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-customer-payment-journal-customer-payment-customer update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-customer-payment-journal-customer-payment-customer update-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_journal_id', type=str, help='key: id of customerPaymentJournal')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-customer-payment delete-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-customer-payment show-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-customer-payment update-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('blocked', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_method_id', help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('shipment_method_id', help='')
        c.argument('tax_area_display_name', type=str, help='')
        c.argument('tax_area_id', help='')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('website', type=str, help='')
        c.argument('currency', action=AddCurrency, nargs='+', help='currency')
        c.argument('payment_method', action=AddPaymentMethod, nargs='+', help='paymentMethod')
        c.argument('payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm')
        c.argument('picture', action=AddFinancialsCompaniesPicture, nargs='+', help='')
        c.argument('shipment_method', action=AddShipmentMethod, nargs='+', help='shipmentMethod')

    with self.argument_context('financials financial-company-customer-payment-customer create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-customer-payment-customer delete-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-customer-payment-customer delete-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-customer-payment-customer delete-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-customer-payment-customer delete-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-customer-payment-customer delete-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-customer-payment-customer list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-customer-payment-customer set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials financial-company-customer-payment-customer show-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-customer-payment-customer show-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-customer-payment-customer show-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-customer-payment-customer show-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-customer-payment-customer show-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials financial-company-customer-payment-customer show-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-customer-payment-customer update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials financial-company-customer-payment-customer update-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-customer-payment-customer update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-customer-payment-customer update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-customer-payment-customer update-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_payment_id', type=str, help='key: id of customerPayment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-customer create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-customer delete-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-customer delete-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-customer delete-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-customer delete-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-customer delete-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-customer list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-customer set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials financial-company-customer show-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-customer show-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-customer show-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-customer show-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-customer show-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials financial-company-customer show-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-customer update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials financial-company-customer update-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-customer update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-customer update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-customer update-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('customer_id', type=str, help='key: id of customer')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-dimension create-dimension-value') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('dimension_id', type=str, help='key: id of dimension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-dimension delete-dimension-value') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('dimension_id', type=str, help='key: id of dimension')
        c.argument('dimension_value_id', type=str, help='key: id of dimensionValue')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-dimension list-dimension-value') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('dimension_id', type=str, help='key: id of dimension')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-dimension show-dimension-value') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('dimension_id', type=str, help='key: id of dimension')
        c.argument('dimension_value_id', type=str, help='key: id of dimensionValue')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-dimension update-dimension-value') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('dimension_id', type=str, help='key: id of dimension')
        c.argument('dimension_value_id', type=str, help='key: id of dimensionValue')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-employee create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('employee_id', type=str, help='key: id of employee')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-employee delete-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('employee_id', type=str, help='key: id of employee')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-employee list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('employee_id', type=str, help='key: id of employee')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-employee set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('employee_id', type=str, help='key: id of employee')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials financial-company-employee show-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('employee_id', type=str, help='key: id of employee')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-employee show-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('employee_id', type=str, help='key: id of employee')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials financial-company-employee update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('employee_id', type=str, help='key: id of employee')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-general-ledger-entry delete-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('general_ledger_entry_id', type=str, help='key: id of generalLedgerEntry')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-general-ledger-entry show-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('general_ledger_entry_id', type=str, help='key: id of generalLedgerEntry')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-general-ledger-entry update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('general_ledger_entry_id', type=str, help='key: id of generalLedgerEntry')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials financial-company-item create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_id', type=str, help='key: id of item')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-item delete-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_id', type=str, help='key: id of item')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-item delete-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_id', type=str, help='key: id of item')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-item list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_id', type=str, help='key: id of item')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-item set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_id', type=str, help='key: id of item')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials financial-company-item show-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_id', type=str, help='key: id of item')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-item show-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_id', type=str, help='key: id of item')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-item show-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_id', type=str, help='key: id of item')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials financial-company-item update-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_id', type=str, help='key: id of item')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-item update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('item_id', type=str, help='key: id of item')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-journal-line delete-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_line_id', type=str, help='key: id of journalLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-journal-line show-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_line_id', type=str, help='key: id of journalLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-journal-line update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_line_id', type=str, help='key: id of journalLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials financial-company-journal create-journal-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('account_number', type=str, help='')
        c.argument('amount', type=float, help='')
        c.argument('comment', type=str, help='')
        c.argument('description', type=str, help='')
        c.argument('document_number', type=str, help='')
        c.argument('external_document_number', type=str, help='')
        c.argument('journal_display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('line_number', type=int, help='')
        c.argument('posting_date', help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')

    with self.argument_context('financials financial-company-journal delete-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-journal delete-journal-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('journal_line_id', type=str, help='key: id of journalLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-journal list-journal-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-journal post') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')

    with self.argument_context('financials financial-company-journal show-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-journal show-journal-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('journal_line_id', type=str, help='key: id of journalLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-journal update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials financial-company-journal update-journal-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('journal_line_id', type=str, help='key: id of journalLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('account_number', type=str, help='')
        c.argument('amount', type=float, help='')
        c.argument('comment', type=str, help='')
        c.argument('description', type=str, help='')
        c.argument('document_number', type=str, help='')
        c.argument('external_document_number', type=str, help='')
        c.argument('journal_display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('line_number', type=int, help='')
        c.argument('posting_date', help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')

    with self.argument_context('financials financial-company-journal-journal-line delete-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('journal_line_id', type=str, help='key: id of journalLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-journal-journal-line show-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('journal_line_id', type=str, help='key: id of journalLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-journal-journal-line update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('journal_id', type=str, help='key: id of journal')
        c.argument('journal_line_id', type=str, help='key: id of journalLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials financial-company-purchase-invoice-line delete-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-purchase-invoice-line delete-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-purchase-invoice-line show-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-purchase-invoice-line show-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-purchase-invoice-line update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials financial-company-purchase-invoice-line update-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('base_unit_of_measure_id', help='')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('display_name', type=str, help='')
        c.argument('gtin', type=str, help='')
        c.argument('inventory', type=float, help='')
        c.argument('item_category_code', type=str, help='')
        c.argument('item_category_id', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('tax_group_code', type=str, help='')
        c.argument('tax_group_id', help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('unit_price', type=float, help='')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='')

    with self.argument_context('financials financial-company-purchase-invoice-line-item create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-purchase-invoice-line-item delete-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-purchase-invoice-line-item delete-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-purchase-invoice-line-item list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-purchase-invoice-line-item set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials financial-company-purchase-invoice-line-item show-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-purchase-invoice-line-item show-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-purchase-invoice-line-item show-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials financial-company-purchase-invoice-line-item update-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-purchase-invoice-line-item update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-purchase-invoice create-purchase-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('expected_receipt_date', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Item')
        c.argument('base_unit_of_measure_id', help='', arg_group='Item')
        c.argument('blocked', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('display_name', type=str, help='', arg_group='Item')
        c.argument('gtin', type=str, help='', arg_group='Item')
        c.argument('inventory', type=float, help='', arg_group='Item')
        c.argument('item_category_code', type=str, help='', arg_group='Item')
        c.argument('item_category_id', help='', arg_group='Item')
        c.argument('last_modified_date_time', help='', arg_group='Item')
        c.argument('number', type=str, help='', arg_group='Item')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('tax_group_code', type=str, help='', arg_group='Item')
        c.argument('tax_group_id', help='', arg_group='Item')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Item')
        c.argument('number_unit_cost', type=float, help='', arg_group='Item')
        c.argument('unit_price', type=float, help='', arg_group='Item')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory', arg_group='Item')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='',
                   arg_group='Item')

    with self.argument_context('financials financial-company-purchase-invoice delete-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-purchase-invoice delete-purchase-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-purchase-invoice delete-vendor') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-purchase-invoice list-purchase-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-purchase-invoice post') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')

    with self.argument_context('financials financial-company-purchase-invoice show-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-purchase-invoice show-purchase-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-purchase-invoice show-vendor') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-purchase-invoice update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials financial-company-purchase-invoice update-purchase-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('expected_receipt_date', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Item')
        c.argument('base_unit_of_measure_id', help='', arg_group='Item')
        c.argument('blocked', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('display_name', type=str, help='', arg_group='Item')
        c.argument('gtin', type=str, help='', arg_group='Item')
        c.argument('inventory', type=float, help='', arg_group='Item')
        c.argument('item_category_code', type=str, help='', arg_group='Item')
        c.argument('item_category_id', help='', arg_group='Item')
        c.argument('last_modified_date_time', help='', arg_group='Item')
        c.argument('number', type=str, help='', arg_group='Item')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('tax_group_code', type=str, help='', arg_group='Item')
        c.argument('tax_group_id', help='', arg_group='Item')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Item')
        c.argument('number_unit_cost', type=float, help='', arg_group='Item')
        c.argument('unit_price', type=float, help='', arg_group='Item')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory', arg_group='Item')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='',
                   arg_group='Item')

    with self.argument_context('financials financial-company-purchase-invoice update-vendor') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('balance', type=float, help='')
        c.argument('blocked', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_method_id', help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('website', type=str, help='')
        c.argument('currency', action=AddCurrency, nargs='+', help='currency')
        c.argument('payment_method', action=AddPaymentMethod, nargs='+', help='paymentMethod')
        c.argument('payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreatePurchaseInvoicePicture, nargs='+', help='')

    with self.argument_context('financials financial-company-purchase-invoice-purchase-invoice-line delete-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-purchase-invoice-purchase-invoice-line delete-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-purchase-invoice-purchase-invoice-line show-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-purchase-invoice-purchase-invoice-line show-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-purchase-invoice-purchase-invoice-line update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials financial-company-purchase-invoice-purchase-invoice-line update-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('base_unit_of_measure_id', help='')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('display_name', type=str, help='')
        c.argument('gtin', type=str, help='')
        c.argument('inventory', type=float, help='')
        c.argument('item_category_code', type=str, help='')
        c.argument('item_category_id', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('tax_group_code', type=str, help='')
        c.argument('tax_group_id', help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('unit_price', type=float, help='')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='')

    with self.argument_context('financials financial-company-purchase-invoice-purchase-invoice-line-item create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-purchase-invoice-purchase-invoice-line-item delete-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-purchase-invoice-purchase-invoice-line-item delete-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-purchase-invoice-purchase-invoice-line-item list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-purchase-invoice-purchase-invoice-line-item set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials financial-company-purchase-invoice-purchase-invoice-line-item show-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-purchase-invoice-purchase-invoice-line-item show-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-purchase-invoice-purchase-invoice-line-item show-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials financial-company-purchase-invoice-purchase-invoice-line-item update-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-purchase-invoice-purchase-invoice-line-item update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('purchase_invoice_line_id', type=str, help='key: id of purchaseInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-purchase-invoice-vendor create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-purchase-invoice-vendor delete-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-purchase-invoice-vendor delete-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-purchase-invoice-vendor delete-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-purchase-invoice-vendor delete-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-purchase-invoice-vendor list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-purchase-invoice-vendor set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials financial-company-purchase-invoice-vendor show-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-purchase-invoice-vendor show-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-purchase-invoice-vendor show-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-purchase-invoice-vendor show-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-purchase-invoice-vendor show-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials financial-company-purchase-invoice-vendor update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials financial-company-purchase-invoice-vendor update-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-purchase-invoice-vendor update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-purchase-invoice-vendor update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('purchase_invoice_id', type=str, help='key: id of purchaseInvoice')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-sale-credit-memo-line delete-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-credit-memo-line delete-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-credit-memo-line show-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-credit-memo-line show-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-credit-memo-line update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials financial-company-sale-credit-memo-line update-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('base_unit_of_measure_id', help='')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('display_name', type=str, help='')
        c.argument('gtin', type=str, help='')
        c.argument('inventory', type=float, help='')
        c.argument('item_category_code', type=str, help='')
        c.argument('item_category_id', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('tax_group_code', type=str, help='')
        c.argument('tax_group_id', help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('unit_price', type=float, help='')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='')

    with self.argument_context('financials financial-company-sale-credit-memo-line-item create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-sale-credit-memo-line-item delete-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-credit-memo-line-item delete-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-credit-memo-line-item list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-credit-memo-line-item set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials financial-company-sale-credit-memo-line-item show-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-credit-memo-line-item show-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-credit-memo-line-item show-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials financial-company-sale-credit-memo-line-item update-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-credit-memo-line-item update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-sale-credit-memo create-sale-credit-memo-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('shipment_date', help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Item')
        c.argument('base_unit_of_measure_id', help='', arg_group='Item')
        c.argument('blocked', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('display_name', type=str, help='', arg_group='Item')
        c.argument('gtin', type=str, help='', arg_group='Item')
        c.argument('inventory', type=float, help='', arg_group='Item')
        c.argument('item_category_code', type=str, help='', arg_group='Item')
        c.argument('item_category_id', help='', arg_group='Item')
        c.argument('last_modified_date_time', help='', arg_group='Item')
        c.argument('number', type=str, help='', arg_group='Item')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('tax_group_code', type=str, help='', arg_group='Item')
        c.argument('tax_group_id', help='', arg_group='Item')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Item')
        c.argument('unit_cost', type=float, help='', arg_group='Item')
        c.argument('number_unit_price', type=float, help='', arg_group='Item')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory', arg_group='Item')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='',
                   arg_group='Item')

    with self.argument_context('financials financial-company-sale-credit-memo delete-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-credit-memo delete-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-credit-memo delete-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-credit-memo delete-sale-credit-memo-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-credit-memo list-sale-credit-memo-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-credit-memo show-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-credit-memo show-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-credit-memo show-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-credit-memo show-sale-credit-memo-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-credit-memo update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials financial-company-sale-credit-memo update-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('blocked', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_method_id', help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('shipment_method_id', help='')
        c.argument('tax_area_display_name', type=str, help='')
        c.argument('tax_area_id', help='')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('website', type=str, help='')
        c.argument('currency', action=AddCurrency, nargs='+', help='currency')
        c.argument('payment_method', action=AddPaymentMethod, nargs='+', help='paymentMethod')
        c.argument('payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm')
        c.argument('picture', action=AddFinancialsCompaniesPicture, nargs='+', help='')
        c.argument('shipment_method', action=AddShipmentMethod, nargs='+', help='shipmentMethod')

    with self.argument_context('financials financial-company-sale-credit-memo update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-credit-memo update-sale-credit-memo-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('shipment_date', help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Item')
        c.argument('base_unit_of_measure_id', help='', arg_group='Item')
        c.argument('blocked', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('display_name', type=str, help='', arg_group='Item')
        c.argument('gtin', type=str, help='', arg_group='Item')
        c.argument('inventory', type=float, help='', arg_group='Item')
        c.argument('item_category_code', type=str, help='', arg_group='Item')
        c.argument('item_category_id', help='', arg_group='Item')
        c.argument('last_modified_date_time', help='', arg_group='Item')
        c.argument('number', type=str, help='', arg_group='Item')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('tax_group_code', type=str, help='', arg_group='Item')
        c.argument('tax_group_id', help='', arg_group='Item')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Item')
        c.argument('unit_cost', type=float, help='', arg_group='Item')
        c.argument('number_unit_price', type=float, help='', arg_group='Item')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory', arg_group='Item')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='',
                   arg_group='Item')

    with self.argument_context('financials financial-company-sale-credit-memo-customer create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-sale-credit-memo-customer delete-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-credit-memo-customer delete-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-credit-memo-customer delete-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-credit-memo-customer delete-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-credit-memo-customer delete-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-credit-memo-customer list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-credit-memo-customer set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials financial-company-sale-credit-memo-customer show-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-credit-memo-customer show-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-credit-memo-customer show-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-credit-memo-customer show-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-credit-memo-customer show-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials financial-company-sale-credit-memo-customer show-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-credit-memo-customer update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials financial-company-sale-credit-memo-customer update-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-credit-memo-customer update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-credit-memo-customer update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-sale-credit-memo-customer update-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-credit-memo-sale-credit-memo-line delete-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-credit-memo-sale-credit-memo-line delete-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-credit-memo-sale-credit-memo-line show-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-credit-memo-sale-credit-memo-line show-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-credit-memo-sale-credit-memo-line update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials financial-company-sale-credit-memo-sale-credit-memo-line update-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('base_unit_of_measure_id', help='')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('display_name', type=str, help='')
        c.argument('gtin', type=str, help='')
        c.argument('inventory', type=float, help='')
        c.argument('item_category_code', type=str, help='')
        c.argument('item_category_id', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('tax_group_code', type=str, help='')
        c.argument('tax_group_id', help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('unit_price', type=float, help='')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='')

    with self.argument_context('financials financial-company-sale-credit-memo-sale-credit-memo-line-item create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-sale-credit-memo-sale-credit-memo-line-item delete-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-credit-memo-sale-credit-memo-line-item delete-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-credit-memo-sale-credit-memo-line-item list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-credit-memo-sale-credit-memo-line-item set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials financial-company-sale-credit-memo-sale-credit-memo-line-item show-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-credit-memo-sale-credit-memo-line-item show-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-credit-memo-sale-credit-memo-line-item show-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials financial-company-sale-credit-memo-sale-credit-memo-line-item update-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-credit-memo-sale-credit-memo-line-item update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_credit_memo_id', type=str, help='key: id of salesCreditMemo')
        c.argument('sales_credit_memo_line_id', type=str, help='key: id of salesCreditMemoLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-sale-invoice-line delete-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-invoice-line delete-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-invoice-line show-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-invoice-line show-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-invoice-line update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials financial-company-sale-invoice-line update-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('base_unit_of_measure_id', help='')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('display_name', type=str, help='')
        c.argument('gtin', type=str, help='')
        c.argument('inventory', type=float, help='')
        c.argument('item_category_code', type=str, help='')
        c.argument('item_category_id', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('tax_group_code', type=str, help='')
        c.argument('tax_group_id', help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('unit_price', type=float, help='')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='')

    with self.argument_context('financials financial-company-sale-invoice-line-item create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-sale-invoice-line-item delete-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-invoice-line-item delete-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-invoice-line-item list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-invoice-line-item set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials financial-company-sale-invoice-line-item show-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-invoice-line-item show-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-invoice-line-item show-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials financial-company-sale-invoice-line-item update-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-invoice-line-item update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-sale-invoice cancel') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')

    with self.argument_context('financials financial-company-sale-invoice cancel-and-send') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')

    with self.argument_context('financials financial-company-sale-invoice create-sale-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('shipment_date', help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Item')
        c.argument('base_unit_of_measure_id', help='', arg_group='Item')
        c.argument('blocked', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('display_name', type=str, help='', arg_group='Item')
        c.argument('gtin', type=str, help='', arg_group='Item')
        c.argument('inventory', type=float, help='', arg_group='Item')
        c.argument('item_category_code', type=str, help='', arg_group='Item')
        c.argument('item_category_id', help='', arg_group='Item')
        c.argument('last_modified_date_time', help='', arg_group='Item')
        c.argument('number', type=str, help='', arg_group='Item')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('tax_group_code', type=str, help='', arg_group='Item')
        c.argument('tax_group_id', help='', arg_group='Item')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Item')
        c.argument('unit_cost', type=float, help='', arg_group='Item')
        c.argument('number_unit_price', type=float, help='', arg_group='Item')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory', arg_group='Item')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='',
                   arg_group='Item')

    with self.argument_context('financials financial-company-sale-invoice delete-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-invoice delete-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-invoice delete-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-invoice delete-sale-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-invoice delete-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-invoice list-sale-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-invoice post') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')

    with self.argument_context('financials financial-company-sale-invoice post-and-send') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')

    with self.argument_context('financials financial-company-sale-invoice send') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')

    with self.argument_context('financials financial-company-sale-invoice show-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-invoice show-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-invoice show-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-invoice show-sale-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-invoice show-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-invoice update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials financial-company-sale-invoice update-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('blocked', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_method_id', help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('shipment_method_id', help='')
        c.argument('tax_area_display_name', type=str, help='')
        c.argument('tax_area_id', help='')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('website', type=str, help='')
        c.argument('currency', action=AddCurrency, nargs='+', help='currency')
        c.argument('payment_method', action=AddPaymentMethod, nargs='+', help='paymentMethod')
        c.argument('payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm')
        c.argument('picture', action=AddFinancialsCompaniesPicture, nargs='+', help='')
        c.argument('shipment_method', action=AddShipmentMethod, nargs='+', help='shipmentMethod')

    with self.argument_context('financials financial-company-sale-invoice update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-invoice update-sale-invoice-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('shipment_date', help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Item')
        c.argument('base_unit_of_measure_id', help='', arg_group='Item')
        c.argument('blocked', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('display_name', type=str, help='', arg_group='Item')
        c.argument('gtin', type=str, help='', arg_group='Item')
        c.argument('inventory', type=float, help='', arg_group='Item')
        c.argument('item_category_code', type=str, help='', arg_group='Item')
        c.argument('item_category_id', help='', arg_group='Item')
        c.argument('last_modified_date_time', help='', arg_group='Item')
        c.argument('number', type=str, help='', arg_group='Item')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('tax_group_code', type=str, help='', arg_group='Item')
        c.argument('tax_group_id', help='', arg_group='Item')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Item')
        c.argument('unit_cost', type=float, help='', arg_group='Item')
        c.argument('number_unit_price', type=float, help='', arg_group='Item')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory', arg_group='Item')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='',
                   arg_group='Item')

    with self.argument_context('financials financial-company-sale-invoice update-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-invoice-customer create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-sale-invoice-customer delete-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-invoice-customer delete-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-invoice-customer delete-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-invoice-customer delete-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-invoice-customer delete-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-invoice-customer list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-invoice-customer set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials financial-company-sale-invoice-customer show-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-invoice-customer show-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-invoice-customer show-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-invoice-customer show-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-invoice-customer show-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials financial-company-sale-invoice-customer show-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-invoice-customer update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials financial-company-sale-invoice-customer update-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-invoice-customer update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-invoice-customer update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-sale-invoice-customer update-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-invoice-sale-invoice-line delete-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-invoice-sale-invoice-line delete-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-invoice-sale-invoice-line show-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-invoice-sale-invoice-line show-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-invoice-sale-invoice-line update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials financial-company-sale-invoice-sale-invoice-line update-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('base_unit_of_measure_id', help='')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('display_name', type=str, help='')
        c.argument('gtin', type=str, help='')
        c.argument('inventory', type=float, help='')
        c.argument('item_category_code', type=str, help='')
        c.argument('item_category_id', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('tax_group_code', type=str, help='')
        c.argument('tax_group_id', help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('unit_price', type=float, help='')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='')

    with self.argument_context('financials financial-company-sale-invoice-sale-invoice-line-item create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-sale-invoice-sale-invoice-line-item delete-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-invoice-sale-invoice-line-item delete-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-invoice-sale-invoice-line-item list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-invoice-sale-invoice-line-item set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials financial-company-sale-invoice-sale-invoice-line-item show-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-invoice-sale-invoice-line-item show-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-invoice-sale-invoice-line-item show-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials financial-company-sale-invoice-sale-invoice-line-item update-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-invoice-sale-invoice-line-item update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_invoice_id', type=str, help='key: id of salesInvoice')
        c.argument('sales_invoice_line_id', type=str, help='key: id of salesInvoiceLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-sale-order-line delete-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-order-line delete-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-order-line show-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-order-line show-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-order-line update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials financial-company-sale-order-line update-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('base_unit_of_measure_id', help='')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('display_name', type=str, help='')
        c.argument('gtin', type=str, help='')
        c.argument('inventory', type=float, help='')
        c.argument('item_category_code', type=str, help='')
        c.argument('item_category_id', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('tax_group_code', type=str, help='')
        c.argument('tax_group_id', help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('unit_price', type=float, help='')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='')

    with self.argument_context('financials financial-company-sale-order-line-item create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-sale-order-line-item delete-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-order-line-item delete-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-order-line-item list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-order-line-item set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials financial-company-sale-order-line-item show-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-order-line-item show-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-order-line-item show-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials financial-company-sale-order-line-item update-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-order-line-item update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-sale-order create-sale-order-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('invoiced_quantity', type=float, help='')
        c.argument('invoice_quantity', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('shipment_date', help='')
        c.argument('shipped_quantity', type=float, help='')
        c.argument('ship_quantity', type=float, help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Item')
        c.argument('base_unit_of_measure_id', help='', arg_group='Item')
        c.argument('blocked', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('display_name', type=str, help='', arg_group='Item')
        c.argument('gtin', type=str, help='', arg_group='Item')
        c.argument('inventory', type=float, help='', arg_group='Item')
        c.argument('item_category_code', type=str, help='', arg_group='Item')
        c.argument('item_category_id', help='', arg_group='Item')
        c.argument('last_modified_date_time', help='', arg_group='Item')
        c.argument('number', type=str, help='', arg_group='Item')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('tax_group_code', type=str, help='', arg_group='Item')
        c.argument('tax_group_id', help='', arg_group='Item')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Item')
        c.argument('unit_cost', type=float, help='', arg_group='Item')
        c.argument('number_unit_price', type=float, help='', arg_group='Item')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory', arg_group='Item')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='',
                   arg_group='Item')

    with self.argument_context('financials financial-company-sale-order delete-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-order delete-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-order delete-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-order delete-sale-order-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-order list-sale-order-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-order show-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-order show-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-order show-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-order show-sale-order-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-order update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials financial-company-sale-order update-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('blocked', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_method_id', help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('shipment_method_id', help='')
        c.argument('tax_area_display_name', type=str, help='')
        c.argument('tax_area_id', help='')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('website', type=str, help='')
        c.argument('currency', action=AddCurrency, nargs='+', help='currency')
        c.argument('payment_method', action=AddPaymentMethod, nargs='+', help='paymentMethod')
        c.argument('payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm')
        c.argument('picture', action=AddFinancialsCompaniesPicture, nargs='+', help='')
        c.argument('shipment_method', action=AddShipmentMethod, nargs='+', help='shipmentMethod')

    with self.argument_context('financials financial-company-sale-order update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-order update-sale-order-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('invoice_discount_allocation', type=float, help='')
        c.argument('invoiced_quantity', type=float, help='')
        c.argument('invoice_quantity', type=float, help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('shipment_date', help='')
        c.argument('shipped_quantity', type=float, help='')
        c.argument('ship_quantity', type=float, help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Item')
        c.argument('base_unit_of_measure_id', help='', arg_group='Item')
        c.argument('blocked', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('display_name', type=str, help='', arg_group='Item')
        c.argument('gtin', type=str, help='', arg_group='Item')
        c.argument('inventory', type=float, help='', arg_group='Item')
        c.argument('item_category_code', type=str, help='', arg_group='Item')
        c.argument('item_category_id', help='', arg_group='Item')
        c.argument('last_modified_date_time', help='', arg_group='Item')
        c.argument('number', type=str, help='', arg_group='Item')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('tax_group_code', type=str, help='', arg_group='Item')
        c.argument('tax_group_id', help='', arg_group='Item')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Item')
        c.argument('unit_cost', type=float, help='', arg_group='Item')
        c.argument('number_unit_price', type=float, help='', arg_group='Item')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory', arg_group='Item')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='',
                   arg_group='Item')

    with self.argument_context('financials financial-company-sale-order-customer create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-sale-order-customer delete-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-order-customer delete-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-order-customer delete-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-order-customer delete-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-order-customer delete-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-order-customer list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-order-customer set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials financial-company-sale-order-customer show-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-order-customer show-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-order-customer show-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-order-customer show-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-order-customer show-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials financial-company-sale-order-customer show-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-order-customer update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials financial-company-sale-order-customer update-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-order-customer update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-order-customer update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-sale-order-customer update-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-order-sale-order-line delete-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-order-sale-order-line delete-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-order-sale-order-line show-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-order-sale-order-line show-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-order-sale-order-line update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials financial-company-sale-order-sale-order-line update-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('base_unit_of_measure_id', help='')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('display_name', type=str, help='')
        c.argument('gtin', type=str, help='')
        c.argument('inventory', type=float, help='')
        c.argument('item_category_code', type=str, help='')
        c.argument('item_category_id', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('tax_group_code', type=str, help='')
        c.argument('tax_group_id', help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('unit_price', type=float, help='')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='')

    with self.argument_context('financials financial-company-sale-order-sale-order-line-item create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-sale-order-sale-order-line-item delete-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-order-sale-order-line-item delete-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-order-sale-order-line-item list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-order-sale-order-line-item set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials financial-company-sale-order-sale-order-line-item show-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-order-sale-order-line-item show-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-order-sale-order-line-item show-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials financial-company-sale-order-sale-order-line-item update-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-order-sale-order-line-item update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_order_id', type=str, help='key: id of salesOrder')
        c.argument('sales_order_line_id', type=str, help='key: id of salesOrderLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-sale-quote-line delete-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-quote-line delete-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-quote-line show-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-quote-line show-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-quote-line update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials financial-company-sale-quote-line update-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('base_unit_of_measure_id', help='')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('display_name', type=str, help='')
        c.argument('gtin', type=str, help='')
        c.argument('inventory', type=float, help='')
        c.argument('item_category_code', type=str, help='')
        c.argument('item_category_id', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('tax_group_code', type=str, help='')
        c.argument('tax_group_id', help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('unit_price', type=float, help='')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='')

    with self.argument_context('financials financial-company-sale-quote-line-item create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-sale-quote-line-item delete-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-quote-line-item delete-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-quote-line-item list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-quote-line-item set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials financial-company-sale-quote-line-item show-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-quote-line-item show-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-quote-line-item show-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials financial-company-sale-quote-line-item update-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-quote-line-item update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-sale-quote create-sale-quote-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Item')
        c.argument('base_unit_of_measure_id', help='', arg_group='Item')
        c.argument('blocked', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('display_name', type=str, help='', arg_group='Item')
        c.argument('gtin', type=str, help='', arg_group='Item')
        c.argument('inventory', type=float, help='', arg_group='Item')
        c.argument('item_category_code', type=str, help='', arg_group='Item')
        c.argument('item_category_id', help='', arg_group='Item')
        c.argument('last_modified_date_time', help='', arg_group='Item')
        c.argument('number', type=str, help='', arg_group='Item')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('tax_group_code', type=str, help='', arg_group='Item')
        c.argument('tax_group_id', help='', arg_group='Item')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Item')
        c.argument('unit_cost', type=float, help='', arg_group='Item')
        c.argument('number_unit_price', type=float, help='', arg_group='Item')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory', arg_group='Item')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='',
                   arg_group='Item')

    with self.argument_context('financials financial-company-sale-quote delete-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-quote delete-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-quote delete-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-quote delete-sale-quote-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-quote delete-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-quote list-sale-quote-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-quote make-invoice') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')

    with self.argument_context('financials financial-company-sale-quote send') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')

    with self.argument_context('financials financial-company-sale-quote show-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-quote show-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-quote show-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-quote show-sale-quote-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-quote show-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-quote update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials financial-company-sale-quote update-customer') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='+', help='postalAddressType')
        c.argument('blocked', type=str, help='')
        c.argument('currency_code', type=str, help='')
        c.argument('currency_id', help='')
        c.argument('display_name', type=str, help='')
        c.argument('email', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('payment_method_id', help='')
        c.argument('payment_terms_id', help='')
        c.argument('phone_number', type=str, help='')
        c.argument('shipment_method_id', help='')
        c.argument('tax_area_display_name', type=str, help='')
        c.argument('tax_area_id', help='')
        c.argument('tax_liable', arg_type=get_three_state_flag(), help='')
        c.argument('tax_registration_number', type=str, help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('website', type=str, help='')
        c.argument('currency', action=AddCurrency, nargs='+', help='currency')
        c.argument('payment_method', action=AddPaymentMethod, nargs='+', help='paymentMethod')
        c.argument('payment_term', action=AddPaymentTerm, nargs='+', help='paymentTerm')
        c.argument('picture', action=AddFinancialsCompaniesPicture, nargs='+', help='')
        c.argument('shipment_method', action=AddShipmentMethod, nargs='+', help='shipmentMethod')

    with self.argument_context('financials financial-company-sale-quote update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-quote update-sale-quote-line') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_id', help='')
        c.argument('amount_excluding_tax', type=float, help='')
        c.argument('amount_including_tax', type=float, help='')
        c.argument('description', type=str, help='')
        c.argument('discount_amount', type=float, help='')
        c.argument('discount_applied_before_tax', arg_type=get_three_state_flag(), help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('document_id', help='')
        c.argument('item_id', help='')
        c.argument('line_type', type=str, help='')
        c.argument('net_amount', type=float, help='')
        c.argument('net_amount_including_tax', type=float, help='')
        c.argument('net_tax_amount', type=float, help='')
        c.argument('quantity', type=float, help='')
        c.argument('sequence', type=int, help='')
        c.argument('tax_code', type=str, help='')
        c.argument('tax_percent', type=float, help='')
        c.argument('total_tax_amount', type=float, help='')
        c.argument('unit_of_measure_id', help='')
        c.argument('unit_price', type=float, help='')
        c.argument('account', action=AddAccount, nargs='+', help='account')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Item')
        c.argument('base_unit_of_measure_id', help='', arg_group='Item')
        c.argument('blocked', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('display_name', type=str, help='', arg_group='Item')
        c.argument('gtin', type=str, help='', arg_group='Item')
        c.argument('inventory', type=float, help='', arg_group='Item')
        c.argument('item_category_code', type=str, help='', arg_group='Item')
        c.argument('item_category_id', help='', arg_group='Item')
        c.argument('last_modified_date_time', help='', arg_group='Item')
        c.argument('number', type=str, help='', arg_group='Item')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='', arg_group='Item')
        c.argument('tax_group_code', type=str, help='', arg_group='Item')
        c.argument('tax_group_id', help='', arg_group='Item')
        c.argument('type_', options_list=['--type'], type=str, help='', arg_group='Item')
        c.argument('unit_cost', type=float, help='', arg_group='Item')
        c.argument('number_unit_price', type=float, help='', arg_group='Item')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory', arg_group='Item')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='',
                   arg_group='Item')

    with self.argument_context('financials financial-company-sale-quote update-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-quote-customer create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-sale-quote-customer delete-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-quote-customer delete-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-quote-customer delete-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-quote-customer delete-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-quote-customer delete-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-quote-customer list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-quote-customer set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials financial-company-sale-quote-customer show-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-quote-customer show-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-quote-customer show-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-quote-customer show-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-quote-customer show-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials financial-company-sale-quote-customer show-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-quote-customer update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials financial-company-sale-quote-customer update-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-quote-customer update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-quote-customer update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-sale-quote-customer update-shipment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-quote-sale-quote-line delete-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-quote-sale-quote-line delete-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-quote-sale-quote-line show-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-quote-sale-quote-line show-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-quote-sale-quote-line update-account') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('category', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('sub_category', type=str, help='')

    with self.argument_context('financials financial-company-sale-quote-sale-quote-line update-item') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('base_unit_of_measure_id', help='')
        c.argument('blocked', arg_type=get_three_state_flag(), help='')
        c.argument('display_name', type=str, help='')
        c.argument('gtin', type=str, help='')
        c.argument('inventory', type=float, help='')
        c.argument('item_category_code', type=str, help='')
        c.argument('item_category_id', help='')
        c.argument('last_modified_date_time', help='')
        c.argument('number', type=str, help='')
        c.argument('price_includes_tax', arg_type=get_three_state_flag(), help='')
        c.argument('tax_group_code', type=str, help='')
        c.argument('tax_group_id', help='')
        c.argument('type_', options_list=['--type'], type=str, help='')
        c.argument('unit_cost', type=float, help='')
        c.argument('unit_price', type=float, help='')
        c.argument('item_category', action=AddItemCategory, nargs='+', help='itemCategory')
        c.argument('picture', action=AddFinancialsFinancialCompanyCreateSaleCreditMemoLinePicture, nargs='+', help='')

    with self.argument_context('financials financial-company-sale-quote-sale-quote-line-item create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-sale-quote-sale-quote-line-item delete-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-quote-sale-quote-line-item delete-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-sale-quote-sale-quote-line-item list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-quote-sale-quote-line-item set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials financial-company-sale-quote-sale-quote-line-item show-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-quote-sale-quote-line-item show-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-sale-quote-sale-quote-line-item show-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials financial-company-sale-quote-sale-quote-line-item update-item-category') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-sale-quote-sale-quote-line-item update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('sales_quote_id', type=str, help='key: id of salesQuote')
        c.argument('sales_quote_line_id', type=str, help='key: id of salesQuoteLine')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-vendor create-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')

    with self.argument_context('financials financial-company-vendor delete-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-vendor delete-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-vendor delete-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-vendor delete-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('financials financial-company-vendor list-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-vendor set-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('data', help='New media content.')

    with self.argument_context('financials financial-company-vendor show-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-vendor show-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-vendor show-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-vendor show-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('financials financial-company-vendor show-picture-content') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('picture_id', type=str, help='key: id of picture')

    with self.argument_context('financials financial-company-vendor update-currency') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('amount_decimal_places', type=str, help='')
        c.argument('amount_rounding_precision', type=float, help='')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')
        c.argument('symbol', type=str, help='')

    with self.argument_context('financials financial-company-vendor update-payment-method') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('code', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-vendor update-payment-term') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('calculate_discount_on_credit_memos', arg_type=get_three_state_flag(), help='')
        c.argument('code', type=str, help='')
        c.argument('discount_date_calculation', type=str, help='')
        c.argument('discount_percent', type=float, help='')
        c.argument('display_name', type=str, help='')
        c.argument('due_date_calculation', type=str, help='')
        c.argument('last_modified_date_time', help='')

    with self.argument_context('financials financial-company-vendor update-picture') as c:
        c.argument('company_id', type=str, help='key: id of company')
        c.argument('vendor_id', type=str, help='key: id of vendor')
        c.argument('picture_id', type=str, help='key: id of picture')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content', help='')
        c.argument('content_type', type=str, help='')
        c.argument('height', type=int, help='')
        c.argument('width', type=int, help='')
