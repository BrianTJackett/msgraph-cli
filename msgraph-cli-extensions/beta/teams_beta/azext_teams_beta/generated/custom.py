# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines


def teams_app_catalog_create_team_app(client,
                                      id_=None,
                                      display_name=None,
                                      distribution_method=None,
                                      external_id=None,
                                      app_definitions=None):
    body = {}
    body['id'] = id_
    body['display_name'] = display_name
    body['distribution_method'] = distribution_method
    body['external_id'] = external_id
    body['app_definitions'] = app_definitions
    return client.create_teams_apps(body=body)


def teams_app_catalog_delete_team_app(client,
                                      teams_app_id,
                                      if_match=None):
    return client.delete_teams_apps(teams_app_id=teams_app_id,
                                    if_match=if_match)


def teams_app_catalog_list_team_app(client,
                                    orderby=None,
                                    select=None,
                                    expand=None):
    return client.list_teams_apps(orderby=orderby,
                                  select=select,
                                  expand=expand)


def teams_app_catalog_show_team_app(client,
                                    teams_app_id,
                                    select=None,
                                    expand=None):
    return client.get_teams_apps(teams_app_id=teams_app_id,
                                 select=select,
                                 expand=expand)


def teams_app_catalog_update_team_app(client,
                                      teams_app_id,
                                      id_=None,
                                      display_name=None,
                                      distribution_method=None,
                                      external_id=None,
                                      app_definitions=None):
    body = {}
    body['id'] = id_
    body['display_name'] = display_name
    body['distribution_method'] = distribution_method
    body['external_id'] = external_id
    body['app_definitions'] = app_definitions
    return client.update_teams_apps(teams_app_id=teams_app_id,
                                    body=body)


def teams_app_catalog_team_app_create_app_definition(client,
                                                     teams_app_id,
                                                     id_=None,
                                                     azure_ad_app_id=None,
                                                     description=None,
                                                     display_name=None,
                                                     last_modified_date_time=None,
                                                     publishing_state=None,
                                                     shortdescription=None,
                                                     microsoft_graph_teams_app_definition_teams_app_id_teams_app_id=None,
                                                     version=None,
                                                     application=None,
                                                     device=None,
                                                     user=None):
    body = {}
    body['id'] = id_
    body['azure_ad_app_id'] = azure_ad_app_id
    body['description'] = description
    body['display_name'] = display_name
    body['last_modified_date_time'] = last_modified_date_time
    body['publishing_state'] = publishing_state
    body['shortdescription'] = shortdescription
    body['teams_app_id'] = microsoft_graph_teams_app_definition_teams_app_id_teams_app_id
    body['version'] = version
    body['created_by'] = {}
    body['created_by']['application'] = application
    body['created_by']['device'] = device
    body['created_by']['user'] = user
    return client.create_app_definitions(teams_app_id=teams_app_id,
                                         body=body)


def teams_app_catalog_team_app_delete_app_definition(client,
                                                     teams_app_id,
                                                     teams_app_definition_id,
                                                     if_match=None):
    return client.delete_app_definitions(teams_app_id=teams_app_id,
                                         teams_app_definition_id=teams_app_definition_id,
                                         if_match=if_match)


def teams_app_catalog_team_app_list_app_definition(client,
                                                   teams_app_id,
                                                   orderby=None,
                                                   select=None,
                                                   expand=None):
    return client.list_app_definitions(teams_app_id=teams_app_id,
                                       orderby=orderby,
                                       select=select,
                                       expand=expand)


def teams_app_catalog_team_app_show_app_definition(client,
                                                   teams_app_id,
                                                   teams_app_definition_id,
                                                   select=None,
                                                   expand=None):
    return client.get_app_definitions(teams_app_id=teams_app_id,
                                      teams_app_definition_id=teams_app_definition_id,
                                      select=select,
                                      expand=expand)


def teams_app_catalog_team_app_update_app_definition(client,
                                                     teams_app_id,
                                                     teams_app_definition_id,
                                                     id_=None,
                                                     azure_ad_app_id=None,
                                                     description=None,
                                                     display_name=None,
                                                     last_modified_date_time=None,
                                                     publishing_state=None,
                                                     shortdescription=None,
                                                     microsoft_graph_teams_app_definition_teams_app_id_teams_app_id=None,
                                                     version=None,
                                                     application=None,
                                                     device=None,
                                                     user=None):
    body = {}
    body['id'] = id_
    body['azure_ad_app_id'] = azure_ad_app_id
    body['description'] = description
    body['display_name'] = display_name
    body['last_modified_date_time'] = last_modified_date_time
    body['publishing_state'] = publishing_state
    body['shortdescription'] = shortdescription
    body['teams_app_id'] = microsoft_graph_teams_app_definition_teams_app_id_teams_app_id
    body['version'] = version
    body['created_by'] = {}
    body['created_by']['application'] = application
    body['created_by']['device'] = device
    body['created_by']['user'] = user
    return client.update_app_definitions(teams_app_id=teams_app_id,
                                         teams_app_definition_id=teams_app_definition_id,
                                         body=body)


def teams_chat_chat_create_chat(client,
                                id_=None,
                                created_date_time=None,
                                last_updated_date_time=None,
                                topic=None,
                                installed_apps=None,
                                members=None,
                                messages=None,
                                tabs=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_updated_date_time'] = last_updated_date_time
    body['topic'] = topic
    body['installed_apps'] = installed_apps
    body['members'] = members
    body['messages'] = messages
    body['tabs'] = tabs
    return client.create_chat(body=body)


def teams_chat_chat_delete_chat(client,
                                chat_id,
                                if_match=None):
    return client.delete_chat(chat_id=chat_id,
                              if_match=if_match)


def teams_chat_chat_list_chat(client,
                              orderby=None,
                              select=None,
                              expand=None):
    return client.list_chat(orderby=orderby,
                            select=select,
                            expand=expand)


def teams_chat_chat_show_chat(client,
                              chat_id,
                              select=None,
                              expand=None):
    return client.get_chat(chat_id=chat_id,
                           select=select,
                           expand=expand)


def teams_chat_chat_update_chat(client,
                                chat_id,
                                id_=None,
                                created_date_time=None,
                                last_updated_date_time=None,
                                topic=None,
                                installed_apps=None,
                                members=None,
                                messages=None,
                                tabs=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_updated_date_time'] = last_updated_date_time
    body['topic'] = topic
    body['installed_apps'] = installed_apps
    body['members'] = members
    body['messages'] = messages
    body['tabs'] = tabs
    return client.update_chat(chat_id=chat_id,
                              body=body)


def teams_chat_all_message(client):
    return client.all_messages()


def teams_chat_create_installed_app(client,
                                    chat_id,
                                    id_=None,
                                    microsoft_graph_entity_id=None,
                                    azure_ad_app_id=None,
                                    description=None,
                                    display_name=None,
                                    last_modified_date_time=None,
                                    publishing_state=None,
                                    shortdescription=None,
                                    teams_app_id=None,
                                    version=None,
                                    application=None,
                                    device=None,
                                    user=None,
                                    id1=None,
                                    microsoft_graph_teams_app_display_name=None,
                                    distribution_method=None,
                                    external_id=None,
                                    app_definitions=None):
    body = {}
    body['id'] = id_
    body['teams_app_definition'] = {}
    body['teams_app_definition']['id'] = microsoft_graph_entity_id
    body['teams_app_definition']['azure_ad_app_id'] = azure_ad_app_id
    body['teams_app_definition']['description'] = description
    body['teams_app_definition']['display_name'] = display_name
    body['teams_app_definition']['last_modified_date_time'] = last_modified_date_time
    body['teams_app_definition']['publishing_state'] = publishing_state
    body['teams_app_definition']['shortdescription'] = shortdescription
    body['teams_app_definition']['teams_app_id'] = teams_app_id
    body['teams_app_definition']['version'] = version
    body['teams_app_definition']['created_by'] = {}
    body['teams_app_definition']['created_by']['application'] = application
    body['teams_app_definition']['created_by']['device'] = device
    body['teams_app_definition']['created_by']['user'] = user
    body['teams_app'] = {}
    body['teams_app']['id'] = id1
    body['teams_app']['display_name'] = microsoft_graph_teams_app_display_name
    body['teams_app']['distribution_method'] = distribution_method
    body['teams_app']['external_id'] = external_id
    body['teams_app']['app_definitions'] = app_definitions
    return client.create_installed_apps(chat_id=chat_id,
                                        body=body)


def teams_chat_create_member(client,
                             chat_id,
                             id_=None,
                             display_name=None,
                             roles=None):
    body = {}
    body['id'] = id_
    body['display_name'] = display_name
    body['roles'] = roles
    return client.create_members(chat_id=chat_id,
                                 body=body)


def teams_chat_create_message(client,
                              chat_id,
                              body,
                              id_=None,
                              attachments=None,
                              channel_identity=None,
                              microsoft_graph_chat_message_chat_id=None,
                              created_date_time=None,
                              deleted_date_time=None,
                              etag=None,
                              importance=None,
                              last_edited_date_time=None,
                              last_modified_date_time=None,
                              locale=None,
                              mentions=None,
                              message_type=None,
                              reactions=None,
                              reply_to_id=None,
                              subject=None,
                              summary=None,
                              web_url=None,
                              hosted_contents=None,
                              replies=None,
                              dlp_action=None,
                              justification_text=None,
                              policy_tip=None,
                              user_action=None,
                              verdict_details=None,
                              application=None,
                              device=None,
                              user=None):
    body = {}
    body['id'] = id_
    body['attachments'] = attachments
    body['body'] = body
    body['channel_identity'] = channel_identity
    body['chat_id'] = microsoft_graph_chat_message_chat_id
    body['created_date_time'] = created_date_time
    body['deleted_date_time'] = deleted_date_time
    body['etag'] = etag
    body['importance'] = importance
    body['last_edited_date_time'] = last_edited_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['locale'] = locale
    body['mentions'] = mentions
    body['message_type'] = message_type
    body['reactions'] = reactions
    body['reply_to_id'] = reply_to_id
    body['subject'] = subject
    body['summary'] = summary
    body['web_url'] = web_url
    body['hosted_contents'] = hosted_contents
    body['replies'] = replies
    body['policy_violation'] = {}
    body['policy_violation']['dlp_action'] = dlp_action
    body['policy_violation']['justification_text'] = justification_text
    body['policy_violation']['policy_tip'] = policy_tip
    body['policy_violation']['user_action'] = user_action
    body['policy_violation']['verdict_details'] = verdict_details
    body['from_property'] = {}
    body['from_property']['application'] = application
    body['from_property']['device'] = device
    body['from_property']['user'] = user
    return client.create_messages(chat_id=chat_id,
                                  body=body)


def teams_chat_create_tab(client,
                          chat_id,
                          id_=None,
                          configuration=None,
                          display_name=None,
                          message_id=None,
                          sort_order_index=None,
                          teams_app_id=None,
                          web_url=None,
                          microsoft_graph_entity_id=None,
                          microsoft_graph_teams_app_display_name=None,
                          distribution_method=None,
                          external_id=None,
                          app_definitions=None):
    body = {}
    body['id'] = id_
    body['configuration'] = configuration
    body['display_name'] = display_name
    body['message_id'] = message_id
    body['sort_order_index'] = sort_order_index
    body['teams_app_id'] = teams_app_id
    body['web_url'] = web_url
    body['teams_app'] = {}
    body['teams_app']['id'] = microsoft_graph_entity_id
    body['teams_app']['display_name'] = microsoft_graph_teams_app_display_name
    body['teams_app']['distribution_method'] = distribution_method
    body['teams_app']['external_id'] = external_id
    body['teams_app']['app_definitions'] = app_definitions
    return client.create_tabs(chat_id=chat_id,
                              body=body)


def teams_chat_delete_installed_app(client,
                                    chat_id,
                                    teams_app_installation_id,
                                    if_match=None):
    return client.delete_installed_apps(chat_id=chat_id,
                                        teams_app_installation_id=teams_app_installation_id,
                                        if_match=if_match)


def teams_chat_delete_member(client,
                             chat_id,
                             conversation_member_id,
                             if_match=None):
    return client.delete_members(chat_id=chat_id,
                                 conversation_member_id=conversation_member_id,
                                 if_match=if_match)


def teams_chat_delete_message(client,
                              chat_id,
                              chat_message_id,
                              if_match=None):
    return client.delete_messages(chat_id=chat_id,
                                  chat_message_id=chat_message_id,
                                  if_match=if_match)


def teams_chat_delete_tab(client,
                          chat_id,
                          teams_tab_id,
                          if_match=None):
    return client.delete_tabs(chat_id=chat_id,
                              teams_tab_id=teams_tab_id,
                              if_match=if_match)


def teams_chat_list_installed_app(client,
                                  chat_id,
                                  orderby=None,
                                  select=None,
                                  expand=None):
    return client.list_installed_apps(chat_id=chat_id,
                                      orderby=orderby,
                                      select=select,
                                      expand=expand)


def teams_chat_list_member(client,
                           chat_id,
                           orderby=None,
                           select=None,
                           expand=None):
    return client.list_members(chat_id=chat_id,
                               orderby=orderby,
                               select=select,
                               expand=expand)


def teams_chat_list_message(client,
                            chat_id,
                            orderby=None,
                            select=None,
                            expand=None):
    return client.list_messages(chat_id=chat_id,
                                orderby=orderby,
                                select=select,
                                expand=expand)


def teams_chat_list_tab(client,
                        chat_id,
                        orderby=None,
                        select=None,
                        expand=None):
    return client.list_tabs(chat_id=chat_id,
                            orderby=orderby,
                            select=select,
                            expand=expand)


def teams_chat_send_activity_notification(client,
                                          chat_id,
                                          topic=None,
                                          activity_type=None,
                                          chain_id=None,
                                          preview_text=None,
                                          template_parameters=None,
                                          recipient=None):
    body = {}
    body['topic'] = topic
    body['activity_type'] = activity_type
    body['chain_id'] = chain_id
    body['preview_text'] = preview_text
    body['template_parameters'] = template_parameters
    body['recipient'] = recipient
    return client.send_activity_notification(chat_id=chat_id,
                                             body=body)


def teams_chat_show_all_message(client):
    return client.get_all_messages()


def teams_chat_show_installed_app(client,
                                  chat_id,
                                  teams_app_installation_id,
                                  select=None,
                                  expand=None):
    return client.get_installed_apps(chat_id=chat_id,
                                     teams_app_installation_id=teams_app_installation_id,
                                     select=select,
                                     expand=expand)


def teams_chat_show_member(client,
                           chat_id,
                           conversation_member_id,
                           select=None,
                           expand=None):
    return client.get_members(chat_id=chat_id,
                              conversation_member_id=conversation_member_id,
                              select=select,
                              expand=expand)


def teams_chat_show_message(client,
                            chat_id,
                            chat_message_id,
                            select=None,
                            expand=None):
    return client.get_messages(chat_id=chat_id,
                               chat_message_id=chat_message_id,
                               select=select,
                               expand=expand)


def teams_chat_show_tab(client,
                        chat_id,
                        teams_tab_id,
                        select=None,
                        expand=None):
    return client.get_tabs(chat_id=chat_id,
                           teams_tab_id=teams_tab_id,
                           select=select,
                           expand=expand)


def teams_chat_update_installed_app(client,
                                    chat_id,
                                    teams_app_installation_id,
                                    id_=None,
                                    microsoft_graph_entity_id=None,
                                    azure_ad_app_id=None,
                                    description=None,
                                    display_name=None,
                                    last_modified_date_time=None,
                                    publishing_state=None,
                                    shortdescription=None,
                                    teams_app_id=None,
                                    version=None,
                                    application=None,
                                    device=None,
                                    user=None,
                                    id1=None,
                                    microsoft_graph_teams_app_display_name=None,
                                    distribution_method=None,
                                    external_id=None,
                                    app_definitions=None):
    body = {}
    body['id'] = id_
    body['teams_app_definition'] = {}
    body['teams_app_definition']['id'] = microsoft_graph_entity_id
    body['teams_app_definition']['azure_ad_app_id'] = azure_ad_app_id
    body['teams_app_definition']['description'] = description
    body['teams_app_definition']['display_name'] = display_name
    body['teams_app_definition']['last_modified_date_time'] = last_modified_date_time
    body['teams_app_definition']['publishing_state'] = publishing_state
    body['teams_app_definition']['shortdescription'] = shortdescription
    body['teams_app_definition']['teams_app_id'] = teams_app_id
    body['teams_app_definition']['version'] = version
    body['teams_app_definition']['created_by'] = {}
    body['teams_app_definition']['created_by']['application'] = application
    body['teams_app_definition']['created_by']['device'] = device
    body['teams_app_definition']['created_by']['user'] = user
    body['teams_app'] = {}
    body['teams_app']['id'] = id1
    body['teams_app']['display_name'] = microsoft_graph_teams_app_display_name
    body['teams_app']['distribution_method'] = distribution_method
    body['teams_app']['external_id'] = external_id
    body['teams_app']['app_definitions'] = app_definitions
    return client.update_installed_apps(chat_id=chat_id,
                                        teams_app_installation_id=teams_app_installation_id,
                                        body=body)


def teams_chat_update_member(client,
                             chat_id,
                             conversation_member_id,
                             id_=None,
                             display_name=None,
                             roles=None):
    body = {}
    body['id'] = id_
    body['display_name'] = display_name
    body['roles'] = roles
    return client.update_members(chat_id=chat_id,
                                 conversation_member_id=conversation_member_id,
                                 body=body)


def teams_chat_update_message(client,
                              chat_id,
                              chat_message_id,
                              body,
                              id_=None,
                              attachments=None,
                              channel_identity=None,
                              microsoft_graph_chat_message_chat_id=None,
                              created_date_time=None,
                              deleted_date_time=None,
                              etag=None,
                              importance=None,
                              last_edited_date_time=None,
                              last_modified_date_time=None,
                              locale=None,
                              mentions=None,
                              message_type=None,
                              reactions=None,
                              reply_to_id=None,
                              subject=None,
                              summary=None,
                              web_url=None,
                              hosted_contents=None,
                              replies=None,
                              dlp_action=None,
                              justification_text=None,
                              policy_tip=None,
                              user_action=None,
                              verdict_details=None,
                              application=None,
                              device=None,
                              user=None):
    body = {}
    body['id'] = id_
    body['attachments'] = attachments
    body['body'] = body
    body['channel_identity'] = channel_identity
    body['chat_id'] = microsoft_graph_chat_message_chat_id
    body['created_date_time'] = created_date_time
    body['deleted_date_time'] = deleted_date_time
    body['etag'] = etag
    body['importance'] = importance
    body['last_edited_date_time'] = last_edited_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['locale'] = locale
    body['mentions'] = mentions
    body['message_type'] = message_type
    body['reactions'] = reactions
    body['reply_to_id'] = reply_to_id
    body['subject'] = subject
    body['summary'] = summary
    body['web_url'] = web_url
    body['hosted_contents'] = hosted_contents
    body['replies'] = replies
    body['policy_violation'] = {}
    body['policy_violation']['dlp_action'] = dlp_action
    body['policy_violation']['justification_text'] = justification_text
    body['policy_violation']['policy_tip'] = policy_tip
    body['policy_violation']['user_action'] = user_action
    body['policy_violation']['verdict_details'] = verdict_details
    body['from_property'] = {}
    body['from_property']['application'] = application
    body['from_property']['device'] = device
    body['from_property']['user'] = user
    return client.update_messages(chat_id=chat_id,
                                  chat_message_id=chat_message_id,
                                  body=body)


def teams_chat_update_tab(client,
                          chat_id,
                          teams_tab_id,
                          id_=None,
                          configuration=None,
                          display_name=None,
                          message_id=None,
                          sort_order_index=None,
                          teams_app_id=None,
                          web_url=None,
                          microsoft_graph_entity_id=None,
                          microsoft_graph_teams_app_display_name=None,
                          distribution_method=None,
                          external_id=None,
                          app_definitions=None):
    body = {}
    body['id'] = id_
    body['configuration'] = configuration
    body['display_name'] = display_name
    body['message_id'] = message_id
    body['sort_order_index'] = sort_order_index
    body['teams_app_id'] = teams_app_id
    body['web_url'] = web_url
    body['teams_app'] = {}
    body['teams_app']['id'] = microsoft_graph_entity_id
    body['teams_app']['display_name'] = microsoft_graph_teams_app_display_name
    body['teams_app']['distribution_method'] = distribution_method
    body['teams_app']['external_id'] = external_id
    body['teams_app']['app_definitions'] = app_definitions
    return client.update_tabs(chat_id=chat_id,
                              teams_tab_id=teams_tab_id,
                              body=body)


def teams_chat_installed_app_delete_ref_team_app(client,
                                                 chat_id,
                                                 teams_app_installation_id,
                                                 if_match=None):
    return client.delete_ref_teams_app(chat_id=chat_id,
                                       teams_app_installation_id=teams_app_installation_id,
                                       if_match=if_match)


def teams_chat_installed_app_delete_ref_team_app_definition(client,
                                                            chat_id,
                                                            teams_app_installation_id,
                                                            if_match=None):
    return client.delete_ref_teams_app_definition(chat_id=chat_id,
                                                  teams_app_installation_id=teams_app_installation_id,
                                                  if_match=if_match)


def teams_chat_installed_app_set_ref_team_app(client,
                                              chat_id,
                                              teams_app_installation_id,
                                              body):
    return client.set_ref_teams_app(chat_id=chat_id,
                                    teams_app_installation_id=teams_app_installation_id,
                                    body=body)


def teams_chat_installed_app_set_ref_team_app_definition(client,
                                                         chat_id,
                                                         teams_app_installation_id,
                                                         body):
    return client.set_ref_teams_app_definition(chat_id=chat_id,
                                               teams_app_installation_id=teams_app_installation_id,
                                               body=body)


def teams_chat_installed_app_show_ref_team_app(client,
                                               chat_id,
                                               teams_app_installation_id):
    return client.get_ref_teams_app(chat_id=chat_id,
                                    teams_app_installation_id=teams_app_installation_id)


def teams_chat_installed_app_show_ref_team_app_definition(client,
                                                          chat_id,
                                                          teams_app_installation_id):
    return client.get_ref_teams_app_definition(chat_id=chat_id,
                                               teams_app_installation_id=teams_app_installation_id)


def teams_chat_installed_app_show_team_app(client,
                                           chat_id,
                                           teams_app_installation_id,
                                           select=None,
                                           expand=None):
    return client.get_teams_app(chat_id=chat_id,
                                teams_app_installation_id=teams_app_installation_id,
                                select=select,
                                expand=expand)


def teams_chat_installed_app_show_team_app_definition(client,
                                                      chat_id,
                                                      teams_app_installation_id,
                                                      select=None,
                                                      expand=None):
    return client.get_teams_app_definition(chat_id=chat_id,
                                           teams_app_installation_id=teams_app_installation_id,
                                           select=select,
                                           expand=expand)


def teams_chat_installed_app_upgrade(client,
                                     chat_id,
                                     teams_app_installation_id):
    return client.upgrade(chat_id=chat_id,
                          teams_app_installation_id=teams_app_installation_id)


def teams_chat_member_add(client,
                          chat_id,
                          values=None):
    body = {}
    body['values'] = values
    return client.add(chat_id=chat_id,
                      body=body)


def teams_chat_message_create_hosted_content(client,
                                             chat_id,
                                             chat_message_id,
                                             content_type,
                                             id_=None,
                                             content_bytes=None):
    body = {}
    body['id'] = id_
    body['content_bytes'] = content_bytes
    body['content_type'] = content_type
    return client.create_hosted_contents(chat_id=chat_id,
                                         chat_message_id=chat_message_id,
                                         body=body)


def teams_chat_message_create_reply(client,
                                    chat_id,
                                    chat_message_id,
                                    body,
                                    id_=None,
                                    attachments=None,
                                    channel_identity=None,
                                    microsoft_graph_chat_message_chat_id=None,
                                    created_date_time=None,
                                    deleted_date_time=None,
                                    etag=None,
                                    importance=None,
                                    last_edited_date_time=None,
                                    last_modified_date_time=None,
                                    locale=None,
                                    mentions=None,
                                    message_type=None,
                                    reactions=None,
                                    reply_to_id=None,
                                    subject=None,
                                    summary=None,
                                    web_url=None,
                                    hosted_contents=None,
                                    replies=None,
                                    dlp_action=None,
                                    justification_text=None,
                                    policy_tip=None,
                                    user_action=None,
                                    verdict_details=None,
                                    application=None,
                                    device=None,
                                    user=None):
    body = {}
    body['id'] = id_
    body['attachments'] = attachments
    body['body'] = body
    body['channel_identity'] = channel_identity
    body['chat_id'] = microsoft_graph_chat_message_chat_id
    body['created_date_time'] = created_date_time
    body['deleted_date_time'] = deleted_date_time
    body['etag'] = etag
    body['importance'] = importance
    body['last_edited_date_time'] = last_edited_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['locale'] = locale
    body['mentions'] = mentions
    body['message_type'] = message_type
    body['reactions'] = reactions
    body['reply_to_id'] = reply_to_id
    body['subject'] = subject
    body['summary'] = summary
    body['web_url'] = web_url
    body['hosted_contents'] = hosted_contents
    body['replies'] = replies
    body['policy_violation'] = {}
    body['policy_violation']['dlp_action'] = dlp_action
    body['policy_violation']['justification_text'] = justification_text
    body['policy_violation']['policy_tip'] = policy_tip
    body['policy_violation']['user_action'] = user_action
    body['policy_violation']['verdict_details'] = verdict_details
    body['from_property'] = {}
    body['from_property']['application'] = application
    body['from_property']['device'] = device
    body['from_property']['user'] = user
    return client.create_replies(chat_id=chat_id,
                                 chat_message_id=chat_message_id,
                                 body=body)


def teams_chat_message_delete_hosted_content(client,
                                             chat_id,
                                             chat_message_id,
                                             chat_message_hosted_content_id,
                                             if_match=None):
    return client.delete_hosted_contents(chat_id=chat_id,
                                         chat_message_id=chat_message_id,
                                         chat_message_hosted_content_id=chat_message_hosted_content_id,
                                         if_match=if_match)


def teams_chat_message_delete_reply(client,
                                    chat_id,
                                    chat_message_id,
                                    chat_message_id1,
                                    if_match=None):
    return client.delete_replies(chat_id=chat_id,
                                 chat_message_id=chat_message_id,
                                 chat_message_id1=chat_message_id1,
                                 if_match=if_match)


def teams_chat_message_delta(client,
                             chat_id):
    return client.delta(chat_id=chat_id)


def teams_chat_message_list_hosted_content(client,
                                           chat_id,
                                           chat_message_id,
                                           orderby=None,
                                           select=None,
                                           expand=None):
    return client.list_hosted_contents(chat_id=chat_id,
                                       chat_message_id=chat_message_id,
                                       orderby=orderby,
                                       select=select,
                                       expand=expand)


def teams_chat_message_list_reply(client,
                                  chat_id,
                                  chat_message_id,
                                  orderby=None,
                                  select=None,
                                  expand=None):
    return client.list_replies(chat_id=chat_id,
                               chat_message_id=chat_message_id,
                               orderby=orderby,
                               select=select,
                               expand=expand)


def teams_chat_message_set_hosted_content_content(client,
                                                  chat_id,
                                                  chat_message_id,
                                                  chat_message_hosted_content_id,
                                                  data):
    return client.set_hosted_contents_content(chat_id=chat_id,
                                              chat_message_id=chat_message_id,
                                              chat_message_hosted_content_id=chat_message_hosted_content_id,
                                              data=data)


def teams_chat_message_show_hosted_content(client,
                                           chat_id,
                                           chat_message_id,
                                           chat_message_hosted_content_id,
                                           select=None,
                                           expand=None):
    return client.get_hosted_contents(chat_id=chat_id,
                                      chat_message_id=chat_message_id,
                                      chat_message_hosted_content_id=chat_message_hosted_content_id,
                                      select=select,
                                      expand=expand)


def teams_chat_message_show_hosted_content_content(client,
                                                   chat_id,
                                                   chat_message_id,
                                                   chat_message_hosted_content_id):
    return client.get_hosted_contents_content(chat_id=chat_id,
                                              chat_message_id=chat_message_id,
                                              chat_message_hosted_content_id=chat_message_hosted_content_id)


def teams_chat_message_show_reply(client,
                                  chat_id,
                                  chat_message_id,
                                  chat_message_id1,
                                  select=None,
                                  expand=None):
    return client.get_replies(chat_id=chat_id,
                              chat_message_id=chat_message_id,
                              chat_message_id1=chat_message_id1,
                              select=select,
                              expand=expand)


def teams_chat_message_update_hosted_content(client,
                                             chat_id,
                                             chat_message_id,
                                             chat_message_hosted_content_id,
                                             content_type,
                                             id_=None,
                                             content_bytes=None):
    body = {}
    body['id'] = id_
    body['content_bytes'] = content_bytes
    body['content_type'] = content_type
    return client.update_hosted_contents(chat_id=chat_id,
                                         chat_message_id=chat_message_id,
                                         chat_message_hosted_content_id=chat_message_hosted_content_id,
                                         body=body)


def teams_chat_message_update_reply(client,
                                    chat_id,
                                    chat_message_id,
                                    chat_message_id1,
                                    body,
                                    id_=None,
                                    attachments=None,
                                    channel_identity=None,
                                    microsoft_graph_chat_message_chat_id=None,
                                    created_date_time=None,
                                    deleted_date_time=None,
                                    etag=None,
                                    importance=None,
                                    last_edited_date_time=None,
                                    last_modified_date_time=None,
                                    locale=None,
                                    mentions=None,
                                    message_type=None,
                                    reactions=None,
                                    reply_to_id=None,
                                    subject=None,
                                    summary=None,
                                    web_url=None,
                                    hosted_contents=None,
                                    replies=None,
                                    dlp_action=None,
                                    justification_text=None,
                                    policy_tip=None,
                                    user_action=None,
                                    verdict_details=None,
                                    application=None,
                                    device=None,
                                    user=None):
    body = {}
    body['id'] = id_
    body['attachments'] = attachments
    body['body'] = body
    body['channel_identity'] = channel_identity
    body['chat_id'] = microsoft_graph_chat_message_chat_id
    body['created_date_time'] = created_date_time
    body['deleted_date_time'] = deleted_date_time
    body['etag'] = etag
    body['importance'] = importance
    body['last_edited_date_time'] = last_edited_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['locale'] = locale
    body['mentions'] = mentions
    body['message_type'] = message_type
    body['reactions'] = reactions
    body['reply_to_id'] = reply_to_id
    body['subject'] = subject
    body['summary'] = summary
    body['web_url'] = web_url
    body['hosted_contents'] = hosted_contents
    body['replies'] = replies
    body['policy_violation'] = {}
    body['policy_violation']['dlp_action'] = dlp_action
    body['policy_violation']['justification_text'] = justification_text
    body['policy_violation']['policy_tip'] = policy_tip
    body['policy_violation']['user_action'] = user_action
    body['policy_violation']['verdict_details'] = verdict_details
    body['from_property'] = {}
    body['from_property']['application'] = application
    body['from_property']['device'] = device
    body['from_property']['user'] = user
    return client.update_replies(chat_id=chat_id,
                                 chat_message_id=chat_message_id,
                                 chat_message_id1=chat_message_id1,
                                 body=body)


def teams_chat_message_reply_delta(client,
                                   chat_id,
                                   chat_message_id):
    return client.delta(chat_id=chat_id,
                        chat_message_id=chat_message_id)


def teams_chat_tab_delete_ref_team_app(client,
                                       chat_id,
                                       teams_tab_id,
                                       if_match=None):
    return client.delete_ref_teams_app(chat_id=chat_id,
                                       teams_tab_id=teams_tab_id,
                                       if_match=if_match)


def teams_chat_tab_set_ref_team_app(client,
                                    chat_id,
                                    teams_tab_id,
                                    body):
    return client.set_ref_teams_app(chat_id=chat_id,
                                    teams_tab_id=teams_tab_id,
                                    body=body)


def teams_chat_tab_show_ref_team_app(client,
                                     chat_id,
                                     teams_tab_id):
    return client.get_ref_teams_app(chat_id=chat_id,
                                    teams_tab_id=teams_tab_id)


def teams_chat_tab_show_team_app(client,
                                 chat_id,
                                 teams_tab_id,
                                 select=None,
                                 expand=None):
    return client.get_teams_app(chat_id=chat_id,
                                teams_tab_id=teams_tab_id,
                                select=select,
                                expand=expand)


def teams_group_delete_team(client,
                            group_id,
                            if_match=None):
    return client.delete_team(group_id=group_id,
                              if_match=if_match)


def teams_group_show_team(client,
                          group_id,
                          select=None,
                          expand=None):
    return client.get_team(group_id=group_id,
                           select=select,
                           expand=expand)


def teams_group_update_team(client,
                            group_id,
                            id_=None,
                            classification=None,
                            created_date_time=None,
                            description=None,
                            display_name=None,
                            fun_settings=None,
                            guest_settings=None,
                            internal_id=None,
                            is_archived=None,
                            is_membership_limited_to_owners=None,
                            member_settings=None,
                            messaging_settings=None,
                            specialization=None,
                            visibility=None,
                            web_url=None,
                            channels=None,
                            group=None,
                            installed_apps=None,
                            members=None,
                            operations=None,
                            owners=None,
                            photo=None,
                            primary_channel=None,
                            microsoft_graph_entity_id=None,
                            id1=None,
                            enabled=None,
                            offer_shift_requests_enabled=None,
                            open_shifts_enabled=None,
                            provision_status=None,
                            provision_status_code=None,
                            swap_shifts_requests_enabled=None,
                            time_clock_enabled=None,
                            time_off_requests_enabled=None,
                            time_zone=None,
                            workforce_integration_ids=None,
                            offer_shift_requests=None,
                            open_shift_change_requests=None,
                            open_shifts=None,
                            scheduling_groups=None,
                            shifts=None,
                            swap_shifts_change_requests=None,
                            time_cards=None,
                            time_off_reasons=None,
                            time_off_requests=None,
                            times_off=None,
                            approved_location=None,
                            show_in_teams_search_and_suggestions=None):
    body = {}
    body['id'] = id_
    body['classification'] = classification
    body['created_date_time'] = created_date_time
    body['description'] = description
    body['display_name'] = display_name
    body['fun_settings'] = fun_settings
    body['guest_settings'] = guest_settings
    body['internal_id'] = internal_id
    body['is_archived'] = is_archived
    body['is_membership_limited_to_owners'] = is_membership_limited_to_owners
    body['member_settings'] = member_settings
    body['messaging_settings'] = messaging_settings
    body['specialization'] = specialization
    body['visibility'] = visibility
    body['web_url'] = web_url
    body['channels'] = channels
    body['group'] = group
    body['installed_apps'] = installed_apps
    body['members'] = members
    body['operations'] = operations
    body['owners'] = owners
    body['photo'] = photo
    body['primary_channel'] = primary_channel
    body['template'] = {}
    body['template']['id'] = microsoft_graph_entity_id
    body['schedule'] = {}
    body['schedule']['id'] = id1
    body['schedule']['enabled'] = enabled
    body['schedule']['offer_shift_requests_enabled'] = offer_shift_requests_enabled
    body['schedule']['open_shifts_enabled'] = open_shifts_enabled
    body['schedule']['provision_status'] = provision_status
    body['schedule']['provision_status_code'] = provision_status_code
    body['schedule']['swap_shifts_requests_enabled'] = swap_shifts_requests_enabled
    body['schedule']['time_clock_enabled'] = time_clock_enabled
    body['schedule']['time_off_requests_enabled'] = time_off_requests_enabled
    body['schedule']['time_zone'] = time_zone
    body['schedule']['workforce_integration_ids'] = workforce_integration_ids
    body['schedule']['offer_shift_requests'] = offer_shift_requests
    body['schedule']['open_shift_change_requests'] = open_shift_change_requests
    body['schedule']['open_shifts'] = open_shifts
    body['schedule']['scheduling_groups'] = scheduling_groups
    body['schedule']['shifts'] = shifts
    body['schedule']['swap_shifts_change_requests'] = swap_shifts_change_requests
    body['schedule']['time_cards'] = time_cards
    body['schedule']['time_off_reasons'] = time_off_reasons
    body['schedule']['time_off_requests'] = time_off_requests
    body['schedule']['times_off'] = times_off
    body['schedule']['time_clock_settings'] = {}
    body['schedule']['time_clock_settings']['approved_location'] = approved_location
    body['discovery_settings'] = {}
    body['discovery_settings']['show_in_teams_search_and_suggestions'] = show_in_teams_search_and_suggestions
    return client.update_team(group_id=group_id,
                              body=body)


def teams_team_list(client,
                    orderby=None,
                    select=None,
                    expand=None):
    return client.list_team(orderby=orderby,
                            select=select,
                            expand=expand)


def teams_team_create(client,
                      id_=None,
                      classification=None,
                      created_date_time=None,
                      description=None,
                      display_name=None,
                      fun_settings=None,
                      guest_settings=None,
                      internal_id=None,
                      is_archived=None,
                      is_membership_limited_to_owners=None,
                      member_settings=None,
                      messaging_settings=None,
                      specialization=None,
                      visibility=None,
                      web_url=None,
                      channels=None,
                      group=None,
                      installed_apps=None,
                      members=None,
                      operations=None,
                      owners=None,
                      photo=None,
                      primary_channel=None,
                      microsoft_graph_entity_id=None,
                      id1=None,
                      enabled=None,
                      offer_shift_requests_enabled=None,
                      open_shifts_enabled=None,
                      provision_status=None,
                      provision_status_code=None,
                      swap_shifts_requests_enabled=None,
                      time_clock_enabled=None,
                      time_off_requests_enabled=None,
                      time_zone=None,
                      workforce_integration_ids=None,
                      offer_shift_requests=None,
                      open_shift_change_requests=None,
                      open_shifts=None,
                      scheduling_groups=None,
                      shifts=None,
                      swap_shifts_change_requests=None,
                      time_cards=None,
                      time_off_reasons=None,
                      time_off_requests=None,
                      times_off=None,
                      approved_location=None,
                      show_in_teams_search_and_suggestions=None):
    body = {}
    body['id'] = id_
    body['classification'] = classification
    body['created_date_time'] = created_date_time
    body['description'] = description
    body['display_name'] = display_name
    body['fun_settings'] = fun_settings
    body['guest_settings'] = guest_settings
    body['internal_id'] = internal_id
    body['is_archived'] = is_archived
    body['is_membership_limited_to_owners'] = is_membership_limited_to_owners
    body['member_settings'] = member_settings
    body['messaging_settings'] = messaging_settings
    body['specialization'] = specialization
    body['visibility'] = visibility
    body['web_url'] = web_url
    body['channels'] = channels
    body['group'] = group
    body['installed_apps'] = installed_apps
    body['members'] = members
    body['operations'] = operations
    body['owners'] = owners
    body['photo'] = photo
    body['primary_channel'] = primary_channel
    body['template'] = {}
    body['template']['id'] = microsoft_graph_entity_id
    body['schedule'] = {}
    body['schedule']['id'] = id1
    body['schedule']['enabled'] = enabled
    body['schedule']['offer_shift_requests_enabled'] = offer_shift_requests_enabled
    body['schedule']['open_shifts_enabled'] = open_shifts_enabled
    body['schedule']['provision_status'] = provision_status
    body['schedule']['provision_status_code'] = provision_status_code
    body['schedule']['swap_shifts_requests_enabled'] = swap_shifts_requests_enabled
    body['schedule']['time_clock_enabled'] = time_clock_enabled
    body['schedule']['time_off_requests_enabled'] = time_off_requests_enabled
    body['schedule']['time_zone'] = time_zone
    body['schedule']['workforce_integration_ids'] = workforce_integration_ids
    body['schedule']['offer_shift_requests'] = offer_shift_requests
    body['schedule']['open_shift_change_requests'] = open_shift_change_requests
    body['schedule']['open_shifts'] = open_shifts
    body['schedule']['scheduling_groups'] = scheduling_groups
    body['schedule']['shifts'] = shifts
    body['schedule']['swap_shifts_change_requests'] = swap_shifts_change_requests
    body['schedule']['time_cards'] = time_cards
    body['schedule']['time_off_reasons'] = time_off_reasons
    body['schedule']['time_off_requests'] = time_off_requests
    body['schedule']['times_off'] = times_off
    body['schedule']['time_clock_settings'] = {}
    body['schedule']['time_clock_settings']['approved_location'] = approved_location
    body['discovery_settings'] = {}
    body['discovery_settings']['show_in_teams_search_and_suggestions'] = show_in_teams_search_and_suggestions
    return client.create_team(body=body)


def teams_team_update(client,
                      team_id,
                      id_=None,
                      classification=None,
                      created_date_time=None,
                      description=None,
                      display_name=None,
                      fun_settings=None,
                      guest_settings=None,
                      internal_id=None,
                      is_archived=None,
                      is_membership_limited_to_owners=None,
                      member_settings=None,
                      messaging_settings=None,
                      specialization=None,
                      visibility=None,
                      web_url=None,
                      channels=None,
                      group=None,
                      installed_apps=None,
                      members=None,
                      operations=None,
                      owners=None,
                      photo=None,
                      primary_channel=None,
                      microsoft_graph_entity_id=None,
                      id1=None,
                      enabled=None,
                      offer_shift_requests_enabled=None,
                      open_shifts_enabled=None,
                      provision_status=None,
                      provision_status_code=None,
                      swap_shifts_requests_enabled=None,
                      time_clock_enabled=None,
                      time_off_requests_enabled=None,
                      time_zone=None,
                      workforce_integration_ids=None,
                      offer_shift_requests=None,
                      open_shift_change_requests=None,
                      open_shifts=None,
                      scheduling_groups=None,
                      shifts=None,
                      swap_shifts_change_requests=None,
                      time_cards=None,
                      time_off_reasons=None,
                      time_off_requests=None,
                      times_off=None,
                      approved_location=None,
                      show_in_teams_search_and_suggestions=None):
    body = {}
    body['id'] = id_
    body['classification'] = classification
    body['created_date_time'] = created_date_time
    body['description'] = description
    body['display_name'] = display_name
    body['fun_settings'] = fun_settings
    body['guest_settings'] = guest_settings
    body['internal_id'] = internal_id
    body['is_archived'] = is_archived
    body['is_membership_limited_to_owners'] = is_membership_limited_to_owners
    body['member_settings'] = member_settings
    body['messaging_settings'] = messaging_settings
    body['specialization'] = specialization
    body['visibility'] = visibility
    body['web_url'] = web_url
    body['channels'] = channels
    body['group'] = group
    body['installed_apps'] = installed_apps
    body['members'] = members
    body['operations'] = operations
    body['owners'] = owners
    body['photo'] = photo
    body['primary_channel'] = primary_channel
    body['template'] = {}
    body['template']['id'] = microsoft_graph_entity_id
    body['schedule'] = {}
    body['schedule']['id'] = id1
    body['schedule']['enabled'] = enabled
    body['schedule']['offer_shift_requests_enabled'] = offer_shift_requests_enabled
    body['schedule']['open_shifts_enabled'] = open_shifts_enabled
    body['schedule']['provision_status'] = provision_status
    body['schedule']['provision_status_code'] = provision_status_code
    body['schedule']['swap_shifts_requests_enabled'] = swap_shifts_requests_enabled
    body['schedule']['time_clock_enabled'] = time_clock_enabled
    body['schedule']['time_off_requests_enabled'] = time_off_requests_enabled
    body['schedule']['time_zone'] = time_zone
    body['schedule']['workforce_integration_ids'] = workforce_integration_ids
    body['schedule']['offer_shift_requests'] = offer_shift_requests
    body['schedule']['open_shift_change_requests'] = open_shift_change_requests
    body['schedule']['open_shifts'] = open_shifts
    body['schedule']['scheduling_groups'] = scheduling_groups
    body['schedule']['shifts'] = shifts
    body['schedule']['swap_shifts_change_requests'] = swap_shifts_change_requests
    body['schedule']['time_cards'] = time_cards
    body['schedule']['time_off_reasons'] = time_off_reasons
    body['schedule']['time_off_requests'] = time_off_requests
    body['schedule']['times_off'] = times_off
    body['schedule']['time_clock_settings'] = {}
    body['schedule']['time_clock_settings']['approved_location'] = approved_location
    body['discovery_settings'] = {}
    body['discovery_settings']['show_in_teams_search_and_suggestions'] = show_in_teams_search_and_suggestions
    return client.update_team(team_id=team_id,
                              body=body)


def teams_team_delete_team(client,
                           team_id,
                           if_match=None):
    return client.delete_team(team_id=team_id,
                              if_match=if_match)


def teams_team_show_team(client,
                         team_id,
                         select=None,
                         expand=None):
    return client.get_team(team_id=team_id,
                           select=select,
                           expand=expand)


def teams_team_all_message(client):
    return client.all_messages()


def teams_team_archive(client,
                       team_id,
                       should_set_spo_site_read_only_for_members=None):
    if should_set_spo_site_read_only_for_members is None:
        should_set_spo_site_read_only_for_members = False
    body = {}
    body['should_set_spo_site_read_only_for_members'] = False if should_set_spo_site_read_only_for_members is None else should_set_spo_site_read_only_for_members
    return client.archive(team_id=team_id,
                          body=body)


def teams_team_clone(client,
                     team_id,
                     display_name=None,
                     description=None,
                     mail_nickname=None,
                     classification=None,
                     visibility=None,
                     parts_to_clone=None):
    body = {}
    body['display_name'] = display_name
    body['description'] = description
    body['mail_nickname'] = mail_nickname
    body['classification'] = classification
    body['visibility'] = visibility
    body['parts_to_clone'] = parts_to_clone
    return client.clone(team_id=team_id,
                        body=body)


def teams_team_complete_migration(client,
                                  team_id):
    return client.complete_migration(team_id=team_id)


def teams_team_create_channel(client,
                              team_id,
                              id_=None,
                              created_date_time=None,
                              description=None,
                              display_name=None,
                              email=None,
                              is_favorite_by_default=None,
                              membership_type=None,
                              moderation_settings=None,
                              web_url=None,
                              files_folder=None,
                              members=None,
                              messages=None,
                              tabs=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['description'] = description
    body['display_name'] = display_name
    body['email'] = email
    body['is_favorite_by_default'] = is_favorite_by_default
    body['membership_type'] = membership_type
    body['moderation_settings'] = moderation_settings
    body['web_url'] = web_url
    body['files_folder'] = files_folder
    body['members'] = members
    body['messages'] = messages
    body['tabs'] = tabs
    return client.create_channels(team_id=team_id,
                                  body=body)


def teams_team_create_installed_app(client,
                                    team_id,
                                    id_=None,
                                    microsoft_graph_entity_id=None,
                                    azure_ad_app_id=None,
                                    description=None,
                                    display_name=None,
                                    last_modified_date_time=None,
                                    publishing_state=None,
                                    shortdescription=None,
                                    teams_app_id=None,
                                    version=None,
                                    application=None,
                                    device=None,
                                    user=None,
                                    id1=None,
                                    microsoft_graph_teams_app_display_name=None,
                                    distribution_method=None,
                                    external_id=None,
                                    app_definitions=None):
    body = {}
    body['id'] = id_
    body['teams_app_definition'] = {}
    body['teams_app_definition']['id'] = microsoft_graph_entity_id
    body['teams_app_definition']['azure_ad_app_id'] = azure_ad_app_id
    body['teams_app_definition']['description'] = description
    body['teams_app_definition']['display_name'] = display_name
    body['teams_app_definition']['last_modified_date_time'] = last_modified_date_time
    body['teams_app_definition']['publishing_state'] = publishing_state
    body['teams_app_definition']['shortdescription'] = shortdescription
    body['teams_app_definition']['teams_app_id'] = teams_app_id
    body['teams_app_definition']['version'] = version
    body['teams_app_definition']['created_by'] = {}
    body['teams_app_definition']['created_by']['application'] = application
    body['teams_app_definition']['created_by']['device'] = device
    body['teams_app_definition']['created_by']['user'] = user
    body['teams_app'] = {}
    body['teams_app']['id'] = id1
    body['teams_app']['display_name'] = microsoft_graph_teams_app_display_name
    body['teams_app']['distribution_method'] = distribution_method
    body['teams_app']['external_id'] = external_id
    body['teams_app']['app_definitions'] = app_definitions
    return client.create_installed_apps(team_id=team_id,
                                        body=body)


def teams_team_create_member(client,
                             team_id,
                             id_=None,
                             display_name=None,
                             roles=None):
    body = {}
    body['id'] = id_
    body['display_name'] = display_name
    body['roles'] = roles
    return client.create_members(team_id=team_id,
                                 body=body)


def teams_team_create_operation(client,
                                team_id,
                                id_=None,
                                attempts_count=None,
                                created_date_time=None,
                                error=None,
                                last_action_date_time=None,
                                operation_type=None,
                                status=None,
                                target_resource_id=None,
                                target_resource_location=None):
    body = {}
    body['id'] = id_
    body['attempts_count'] = attempts_count
    body['created_date_time'] = created_date_time
    body['error'] = error
    body['last_action_date_time'] = last_action_date_time
    body['operation_type'] = operation_type
    body['status'] = status
    body['target_resource_id'] = target_resource_id
    body['target_resource_location'] = target_resource_location
    return client.create_operations(team_id=team_id,
                                    body=body)


def teams_team_create_ref_owner(client,
                                team_id,
                                body):
    return client.create_ref_owners(team_id=team_id,
                                    body=body)


def teams_team_delete_channel(client,
                              team_id,
                              channel_id,
                              if_match=None):
    return client.delete_channels(team_id=team_id,
                                  channel_id=channel_id,
                                  if_match=if_match)


def teams_team_delete_installed_app(client,
                                    team_id,
                                    teams_app_installation_id,
                                    if_match=None):
    return client.delete_installed_apps(team_id=team_id,
                                        teams_app_installation_id=teams_app_installation_id,
                                        if_match=if_match)


def teams_team_delete_member(client,
                             team_id,
                             conversation_member_id,
                             if_match=None):
    return client.delete_members(team_id=team_id,
                                 conversation_member_id=conversation_member_id,
                                 if_match=if_match)


def teams_team_delete_operation(client,
                                team_id,
                                teams_async_operation_id,
                                if_match=None):
    return client.delete_operations(team_id=team_id,
                                    teams_async_operation_id=teams_async_operation_id,
                                    if_match=if_match)


def teams_team_delete_photo(client,
                            team_id,
                            if_match=None):
    return client.delete_photo(team_id=team_id,
                               if_match=if_match)


def teams_team_delete_primary_channel(client,
                                      team_id,
                                      if_match=None):
    return client.delete_primary_channel(team_id=team_id,
                                         if_match=if_match)


def teams_team_delete_ref_group(client,
                                team_id,
                                if_match=None):
    return client.delete_ref_group(team_id=team_id,
                                   if_match=if_match)


def teams_team_delete_ref_template(client,
                                   team_id,
                                   if_match=None):
    return client.delete_ref_template(team_id=team_id,
                                      if_match=if_match)


def teams_team_delete_schedule(client,
                               team_id,
                               if_match=None):
    return client.delete_schedule(team_id=team_id,
                                  if_match=if_match)


def teams_team_list_channel(client,
                            team_id,
                            orderby=None,
                            select=None,
                            expand=None):
    return client.list_channels(team_id=team_id,
                                orderby=orderby,
                                select=select,
                                expand=expand)


def teams_team_list_installed_app(client,
                                  team_id,
                                  orderby=None,
                                  select=None,
                                  expand=None):
    return client.list_installed_apps(team_id=team_id,
                                      orderby=orderby,
                                      select=select,
                                      expand=expand)


def teams_team_list_member(client,
                           team_id,
                           orderby=None,
                           select=None,
                           expand=None):
    return client.list_members(team_id=team_id,
                               orderby=orderby,
                               select=select,
                               expand=expand)


def teams_team_list_operation(client,
                              team_id,
                              orderby=None,
                              select=None,
                              expand=None):
    return client.list_operations(team_id=team_id,
                                  orderby=orderby,
                                  select=select,
                                  expand=expand)


def teams_team_list_owner(client,
                          team_id,
                          orderby=None,
                          select=None,
                          expand=None):
    return client.list_owners(team_id=team_id,
                              orderby=orderby,
                              select=select,
                              expand=expand)


def teams_team_list_ref_owner(client,
                              team_id,
                              orderby=None):
    return client.list_ref_owners(team_id=team_id,
                                  orderby=orderby)


def teams_team_send_activity_notification(client,
                                          team_id,
                                          topic=None,
                                          activity_type=None,
                                          chain_id=None,
                                          preview_text=None,
                                          template_parameters=None,
                                          recipient=None):
    body = {}
    body['topic'] = topic
    body['activity_type'] = activity_type
    body['chain_id'] = chain_id
    body['preview_text'] = preview_text
    body['template_parameters'] = template_parameters
    body['recipient'] = recipient
    return client.send_activity_notification(team_id=team_id,
                                             body=body)


def teams_team_set_photo_content(client,
                                 team_id,
                                 data):
    return client.set_photo_content(team_id=team_id,
                                    data=data)


def teams_team_set_ref_group(client,
                             team_id,
                             body):
    return client.set_ref_group(team_id=team_id,
                                body=body)


def teams_team_set_ref_template(client,
                                team_id,
                                body):
    return client.set_ref_template(team_id=team_id,
                                   body=body)


def teams_team_show_all_message(client):
    return client.get_all_messages()


def teams_team_show_channel(client,
                            team_id,
                            channel_id,
                            select=None,
                            expand=None):
    return client.get_channels(team_id=team_id,
                               channel_id=channel_id,
                               select=select,
                               expand=expand)


def teams_team_show_group(client,
                          team_id,
                          select=None,
                          expand=None):
    return client.get_group(team_id=team_id,
                            select=select,
                            expand=expand)


def teams_team_show_installed_app(client,
                                  team_id,
                                  teams_app_installation_id,
                                  select=None,
                                  expand=None):
    return client.get_installed_apps(team_id=team_id,
                                     teams_app_installation_id=teams_app_installation_id,
                                     select=select,
                                     expand=expand)


def teams_team_show_member(client,
                           team_id,
                           conversation_member_id,
                           select=None,
                           expand=None):
    return client.get_members(team_id=team_id,
                              conversation_member_id=conversation_member_id,
                              select=select,
                              expand=expand)


def teams_team_show_operation(client,
                              team_id,
                              teams_async_operation_id,
                              select=None,
                              expand=None):
    return client.get_operations(team_id=team_id,
                                 teams_async_operation_id=teams_async_operation_id,
                                 select=select,
                                 expand=expand)


def teams_team_show_photo(client,
                          team_id,
                          select=None,
                          expand=None):
    return client.get_photo(team_id=team_id,
                            select=select,
                            expand=expand)


def teams_team_show_photo_content(client,
                                  team_id):
    return client.get_photo_content(team_id=team_id)


def teams_team_show_primary_channel(client,
                                    team_id,
                                    select=None,
                                    expand=None):
    return client.get_primary_channel(team_id=team_id,
                                      select=select,
                                      expand=expand)


def teams_team_show_ref_group(client,
                              team_id):
    return client.get_ref_group(team_id=team_id)


def teams_team_show_ref_template(client,
                                 team_id):
    return client.get_ref_template(team_id=team_id)


def teams_team_show_schedule(client,
                             team_id,
                             select=None,
                             expand=None):
    return client.get_schedule(team_id=team_id,
                               select=select,
                               expand=expand)


def teams_team_show_template(client,
                             team_id,
                             select=None,
                             expand=None):
    return client.get_template(team_id=team_id,
                               select=select,
                               expand=expand)


def teams_team_unarchive(client,
                         team_id):
    return client.unarchive(team_id=team_id)


def teams_team_update_channel(client,
                              team_id,
                              channel_id,
                              id_=None,
                              created_date_time=None,
                              description=None,
                              display_name=None,
                              email=None,
                              is_favorite_by_default=None,
                              membership_type=None,
                              moderation_settings=None,
                              web_url=None,
                              files_folder=None,
                              members=None,
                              messages=None,
                              tabs=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['description'] = description
    body['display_name'] = display_name
    body['email'] = email
    body['is_favorite_by_default'] = is_favorite_by_default
    body['membership_type'] = membership_type
    body['moderation_settings'] = moderation_settings
    body['web_url'] = web_url
    body['files_folder'] = files_folder
    body['members'] = members
    body['messages'] = messages
    body['tabs'] = tabs
    return client.update_channels(team_id=team_id,
                                  channel_id=channel_id,
                                  body=body)


def teams_team_update_installed_app(client,
                                    team_id,
                                    teams_app_installation_id,
                                    id_=None,
                                    microsoft_graph_entity_id=None,
                                    azure_ad_app_id=None,
                                    description=None,
                                    display_name=None,
                                    last_modified_date_time=None,
                                    publishing_state=None,
                                    shortdescription=None,
                                    teams_app_id=None,
                                    version=None,
                                    application=None,
                                    device=None,
                                    user=None,
                                    id1=None,
                                    microsoft_graph_teams_app_display_name=None,
                                    distribution_method=None,
                                    external_id=None,
                                    app_definitions=None):
    body = {}
    body['id'] = id_
    body['teams_app_definition'] = {}
    body['teams_app_definition']['id'] = microsoft_graph_entity_id
    body['teams_app_definition']['azure_ad_app_id'] = azure_ad_app_id
    body['teams_app_definition']['description'] = description
    body['teams_app_definition']['display_name'] = display_name
    body['teams_app_definition']['last_modified_date_time'] = last_modified_date_time
    body['teams_app_definition']['publishing_state'] = publishing_state
    body['teams_app_definition']['shortdescription'] = shortdescription
    body['teams_app_definition']['teams_app_id'] = teams_app_id
    body['teams_app_definition']['version'] = version
    body['teams_app_definition']['created_by'] = {}
    body['teams_app_definition']['created_by']['application'] = application
    body['teams_app_definition']['created_by']['device'] = device
    body['teams_app_definition']['created_by']['user'] = user
    body['teams_app'] = {}
    body['teams_app']['id'] = id1
    body['teams_app']['display_name'] = microsoft_graph_teams_app_display_name
    body['teams_app']['distribution_method'] = distribution_method
    body['teams_app']['external_id'] = external_id
    body['teams_app']['app_definitions'] = app_definitions
    return client.update_installed_apps(team_id=team_id,
                                        teams_app_installation_id=teams_app_installation_id,
                                        body=body)


def teams_team_update_member(client,
                             team_id,
                             conversation_member_id,
                             id_=None,
                             display_name=None,
                             roles=None):
    body = {}
    body['id'] = id_
    body['display_name'] = display_name
    body['roles'] = roles
    return client.update_members(team_id=team_id,
                                 conversation_member_id=conversation_member_id,
                                 body=body)


def teams_team_update_operation(client,
                                team_id,
                                teams_async_operation_id,
                                id_=None,
                                attempts_count=None,
                                created_date_time=None,
                                error=None,
                                last_action_date_time=None,
                                operation_type=None,
                                status=None,
                                target_resource_id=None,
                                target_resource_location=None):
    body = {}
    body['id'] = id_
    body['attempts_count'] = attempts_count
    body['created_date_time'] = created_date_time
    body['error'] = error
    body['last_action_date_time'] = last_action_date_time
    body['operation_type'] = operation_type
    body['status'] = status
    body['target_resource_id'] = target_resource_id
    body['target_resource_location'] = target_resource_location
    return client.update_operations(team_id=team_id,
                                    teams_async_operation_id=teams_async_operation_id,
                                    body=body)


def teams_team_update_photo(client,
                            team_id,
                            id_=None,
                            height=None,
                            width=None):
    body = {}
    body['id'] = id_
    body['height'] = height
    body['width'] = width
    return client.update_photo(team_id=team_id,
                               body=body)


def teams_team_update_primary_channel(client,
                                      team_id,
                                      id_=None,
                                      created_date_time=None,
                                      description=None,
                                      display_name=None,
                                      email=None,
                                      is_favorite_by_default=None,
                                      membership_type=None,
                                      moderation_settings=None,
                                      web_url=None,
                                      files_folder=None,
                                      members=None,
                                      messages=None,
                                      tabs=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['description'] = description
    body['display_name'] = display_name
    body['email'] = email
    body['is_favorite_by_default'] = is_favorite_by_default
    body['membership_type'] = membership_type
    body['moderation_settings'] = moderation_settings
    body['web_url'] = web_url
    body['files_folder'] = files_folder
    body['members'] = members
    body['messages'] = messages
    body['tabs'] = tabs
    return client.update_primary_channel(team_id=team_id,
                                         body=body)


def teams_team_update_schedule(client,
                               team_id,
                               id_=None,
                               enabled=None,
                               offer_shift_requests_enabled=None,
                               open_shifts_enabled=None,
                               provision_status=None,
                               provision_status_code=None,
                               swap_shifts_requests_enabled=None,
                               time_clock_enabled=None,
                               time_off_requests_enabled=None,
                               time_zone=None,
                               workforce_integration_ids=None,
                               offer_shift_requests=None,
                               open_shift_change_requests=None,
                               open_shifts=None,
                               scheduling_groups=None,
                               shifts=None,
                               swap_shifts_change_requests=None,
                               time_cards=None,
                               time_off_reasons=None,
                               time_off_requests=None,
                               times_off=None,
                               approved_location=None):
    body = {}
    body['id'] = id_
    body['enabled'] = enabled
    body['offer_shift_requests_enabled'] = offer_shift_requests_enabled
    body['open_shifts_enabled'] = open_shifts_enabled
    body['provision_status'] = provision_status
    body['provision_status_code'] = provision_status_code
    body['swap_shifts_requests_enabled'] = swap_shifts_requests_enabled
    body['time_clock_enabled'] = time_clock_enabled
    body['time_off_requests_enabled'] = time_off_requests_enabled
    body['time_zone'] = time_zone
    body['workforce_integration_ids'] = workforce_integration_ids
    body['offer_shift_requests'] = offer_shift_requests
    body['open_shift_change_requests'] = open_shift_change_requests
    body['open_shifts'] = open_shifts
    body['scheduling_groups'] = scheduling_groups
    body['shifts'] = shifts
    body['swap_shifts_change_requests'] = swap_shifts_change_requests
    body['time_cards'] = time_cards
    body['time_off_reasons'] = time_off_reasons
    body['time_off_requests'] = time_off_requests
    body['times_off'] = times_off
    body['time_clock_settings'] = {}
    body['time_clock_settings']['approved_location'] = approved_location
    return client.update_schedule(team_id=team_id,
                                  body=body)


def teams_team_channel_all_message(client,
                                   team_id):
    return client.all_messages(team_id=team_id)


def teams_team_channel_complete_migration(client,
                                          team_id,
                                          channel_id):
    return client.complete_migration(team_id=team_id,
                                     channel_id=channel_id)


def teams_team_channel_create_member(client,
                                     team_id,
                                     channel_id,
                                     id_=None,
                                     display_name=None,
                                     roles=None):
    body = {}
    body['id'] = id_
    body['display_name'] = display_name
    body['roles'] = roles
    return client.create_members(team_id=team_id,
                                 channel_id=channel_id,
                                 body=body)


def teams_team_channel_create_message(client,
                                      team_id,
                                      channel_id,
                                      body,
                                      id_=None,
                                      attachments=None,
                                      channel_identity=None,
                                      chat_id=None,
                                      created_date_time=None,
                                      deleted_date_time=None,
                                      etag=None,
                                      importance=None,
                                      last_edited_date_time=None,
                                      last_modified_date_time=None,
                                      locale=None,
                                      mentions=None,
                                      message_type=None,
                                      reactions=None,
                                      reply_to_id=None,
                                      subject=None,
                                      summary=None,
                                      web_url=None,
                                      hosted_contents=None,
                                      replies=None,
                                      dlp_action=None,
                                      justification_text=None,
                                      policy_tip=None,
                                      user_action=None,
                                      verdict_details=None,
                                      application=None,
                                      device=None,
                                      user=None):
    body = {}
    body['id'] = id_
    body['attachments'] = attachments
    body['body'] = body
    body['channel_identity'] = channel_identity
    body['chat_id'] = chat_id
    body['created_date_time'] = created_date_time
    body['deleted_date_time'] = deleted_date_time
    body['etag'] = etag
    body['importance'] = importance
    body['last_edited_date_time'] = last_edited_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['locale'] = locale
    body['mentions'] = mentions
    body['message_type'] = message_type
    body['reactions'] = reactions
    body['reply_to_id'] = reply_to_id
    body['subject'] = subject
    body['summary'] = summary
    body['web_url'] = web_url
    body['hosted_contents'] = hosted_contents
    body['replies'] = replies
    body['policy_violation'] = {}
    body['policy_violation']['dlp_action'] = dlp_action
    body['policy_violation']['justification_text'] = justification_text
    body['policy_violation']['policy_tip'] = policy_tip
    body['policy_violation']['user_action'] = user_action
    body['policy_violation']['verdict_details'] = verdict_details
    body['from_property'] = {}
    body['from_property']['application'] = application
    body['from_property']['device'] = device
    body['from_property']['user'] = user
    return client.create_messages(team_id=team_id,
                                  channel_id=channel_id,
                                  body=body)


def teams_team_channel_create_tab(client,
                                  team_id,
                                  channel_id,
                                  id_=None,
                                  configuration=None,
                                  display_name=None,
                                  message_id=None,
                                  sort_order_index=None,
                                  teams_app_id=None,
                                  web_url=None,
                                  microsoft_graph_entity_id=None,
                                  microsoft_graph_teams_app_display_name=None,
                                  distribution_method=None,
                                  external_id=None,
                                  app_definitions=None):
    body = {}
    body['id'] = id_
    body['configuration'] = configuration
    body['display_name'] = display_name
    body['message_id'] = message_id
    body['sort_order_index'] = sort_order_index
    body['teams_app_id'] = teams_app_id
    body['web_url'] = web_url
    body['teams_app'] = {}
    body['teams_app']['id'] = microsoft_graph_entity_id
    body['teams_app']['display_name'] = microsoft_graph_teams_app_display_name
    body['teams_app']['distribution_method'] = distribution_method
    body['teams_app']['external_id'] = external_id
    body['teams_app']['app_definitions'] = app_definitions
    return client.create_tabs(team_id=team_id,
                              channel_id=channel_id,
                              body=body)


def teams_team_channel_delete_file_folder(client,
                                          team_id,
                                          channel_id,
                                          if_match=None):
    return client.delete_files_folder(team_id=team_id,
                                      channel_id=channel_id,
                                      if_match=if_match)


def teams_team_channel_delete_member(client,
                                     team_id,
                                     channel_id,
                                     conversation_member_id,
                                     if_match=None):
    return client.delete_members(team_id=team_id,
                                 channel_id=channel_id,
                                 conversation_member_id=conversation_member_id,
                                 if_match=if_match)


def teams_team_channel_delete_message(client,
                                      team_id,
                                      channel_id,
                                      chat_message_id,
                                      if_match=None):
    return client.delete_messages(team_id=team_id,
                                  channel_id=channel_id,
                                  chat_message_id=chat_message_id,
                                  if_match=if_match)


def teams_team_channel_delete_tab(client,
                                  team_id,
                                  channel_id,
                                  teams_tab_id,
                                  if_match=None):
    return client.delete_tabs(team_id=team_id,
                              channel_id=channel_id,
                              teams_tab_id=teams_tab_id,
                              if_match=if_match)


def teams_team_channel_list_member(client,
                                   team_id,
                                   channel_id,
                                   orderby=None,
                                   select=None,
                                   expand=None):
    return client.list_members(team_id=team_id,
                               channel_id=channel_id,
                               orderby=orderby,
                               select=select,
                               expand=expand)


def teams_team_channel_list_message(client,
                                    team_id,
                                    channel_id,
                                    orderby=None,
                                    select=None,
                                    expand=None):
    return client.list_messages(team_id=team_id,
                                channel_id=channel_id,
                                orderby=orderby,
                                select=select,
                                expand=expand)


def teams_team_channel_list_tab(client,
                                team_id,
                                channel_id,
                                orderby=None,
                                select=None,
                                expand=None):
    return client.list_tabs(team_id=team_id,
                            channel_id=channel_id,
                            orderby=orderby,
                            select=select,
                            expand=expand)


def teams_team_channel_set_file_folder_content(client,
                                               team_id,
                                               channel_id,
                                               data):
    return client.set_files_folder_content(team_id=team_id,
                                           channel_id=channel_id,
                                           data=data)


def teams_team_channel_show_file_folder(client,
                                        team_id,
                                        channel_id,
                                        select=None,
                                        expand=None):
    return client.get_files_folder(team_id=team_id,
                                   channel_id=channel_id,
                                   select=select,
                                   expand=expand)


def teams_team_channel_show_file_folder_content(client,
                                                team_id,
                                                channel_id):
    return client.get_files_folder_content(team_id=team_id,
                                           channel_id=channel_id)


def teams_team_channel_show_member(client,
                                   team_id,
                                   channel_id,
                                   conversation_member_id,
                                   select=None,
                                   expand=None):
    return client.get_members(team_id=team_id,
                              channel_id=channel_id,
                              conversation_member_id=conversation_member_id,
                              select=select,
                              expand=expand)


def teams_team_channel_show_message(client,
                                    team_id,
                                    channel_id,
                                    chat_message_id,
                                    select=None,
                                    expand=None):
    return client.get_messages(team_id=team_id,
                               channel_id=channel_id,
                               chat_message_id=chat_message_id,
                               select=select,
                               expand=expand)


def teams_team_channel_show_tab(client,
                                team_id,
                                channel_id,
                                teams_tab_id,
                                select=None,
                                expand=None):
    return client.get_tabs(team_id=team_id,
                           channel_id=channel_id,
                           teams_tab_id=teams_tab_id,
                           select=select,
                           expand=expand)


def teams_team_channel_update_file_folder(client,
                                          team_id,
                                          channel_id,
                                          id_=None,
                                          created_date_time=None,
                                          description=None,
                                          e_tag=None,
                                          last_modified_date_time=None,
                                          name=None,
                                          web_url=None,
                                          created_by_user=None,
                                          last_modified_by_user=None,
                                          drive_id=None,
                                          drive_type=None,
                                          microsoft_graph_item_reference_id=None,
                                          microsoft_graph_item_reference_name=None,
                                          path=None,
                                          share_id=None,
                                          sharepoint_ids=None,
                                          site_id=None,
                                          application=None,
                                          device=None,
                                          user=None,
                                          microsoft_graph_identity_application=None,
                                          microsoft_graph_identity_device=None,
                                          microsoft_graph_identity_user=None,
                                          audio=None,
                                          content=None,
                                          c_tag=None,
                                          file_system_info=None,
                                          image=None,
                                          location=None,
                                          photo=None,
                                          publication=None,
                                          root=None,
                                          microsoft_graph_sharepoint_ids=None,
                                          size=None,
                                          video=None,
                                          web_dav_url=None,
                                          activities=None,
                                          children=None,
                                          list_item=None,
                                          permissions=None,
                                          subscriptions=None,
                                          thumbnails=None,
                                          versions=None,
                                          microsoft_graph_entity_id=None,
                                          all_time=None,
                                          item_activity_stats=None,
                                          last_seven_days=None,
                                          id1=None,
                                          microsoft_graph_workbook_application=None,
                                          comments=None,
                                          functions=None,
                                          names=None,
                                          operations=None,
                                          tables=None,
                                          worksheets=None,
                                          microsoft_graph_special_folder_name=None,
                                          owner=None,
                                          scope=None,
                                          shared_by=None,
                                          shared_date_time=None,
                                          on_click_telemetry_url=None,
                                          created_by=None,
                                          microsoft_graph_remote_item_created_date_time_created_date_time=None,
                                          file=None,
                                          microsoft_graph_file_system_info_file_system_info=None,
                                          folder=None,
                                          microsoft_graph_remote_item_id=None,
                                          microsoft_graph_image=None,
                                          last_modified_by=None,
                                          microsoft_graph_remote_item_last_modified_date_time_last_modified_date_time=None,
                                          microsoft_graph_remote_item_name=None,
                                          package=None,
                                          parent_reference=None,
                                          shared=None,
                                          sharepoint_ids1=None,
                                          integer_size=None,
                                          special_folder=None,
                                          microsoft_graph_video=None,
                                          microsoft_graph_remote_item_web_dav_url_web_dav_url=None,
                                          microsoft_graph_remote_item_web_url=None,
                                          queued_date_time=None,
                                          type_=None,
                                          child_count=None,
                                          view=None,
                                          hashes=None,
                                          mime_type=None,
                                          processing_metadata=None,
                                          state=None,
                                          album=None,
                                          integer_child_count=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['description'] = description
    body['e_tag'] = e_tag
    body['last_modified_date_time'] = last_modified_date_time
    body['name'] = name
    body['web_url'] = web_url
    body['created_by_user'] = created_by_user
    body['last_modified_by_user'] = last_modified_by_user
    body['parent_reference'] = {}
    body['parent_reference']['drive_id'] = drive_id
    body['parent_reference']['drive_type'] = drive_type
    body['parent_reference']['id'] = microsoft_graph_item_reference_id
    body['parent_reference']['name'] = microsoft_graph_item_reference_name
    body['parent_reference']['path'] = path
    body['parent_reference']['share_id'] = share_id
    body['parent_reference']['sharepoint_ids'] = sharepoint_ids
    body['parent_reference']['site_id'] = site_id
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['audio'] = audio
    body['content'] = content
    body['c_tag'] = c_tag
    body['file_system_info'] = file_system_info
    body['image'] = image
    body['location'] = location
    body['photo'] = photo
    body['publication'] = publication
    body['root'] = root
    body['sharepoint_ids'] = microsoft_graph_sharepoint_ids
    body['size'] = size
    body['video'] = video
    body['web_dav_url'] = web_dav_url
    body['activities'] = activities
    body['children'] = children
    body['list_item'] = list_item
    body['permissions'] = permissions
    body['subscriptions'] = subscriptions
    body['thumbnails'] = thumbnails
    body['versions'] = versions
    body['analytics'] = {}
    body['analytics']['id'] = microsoft_graph_entity_id
    body['analytics']['all_time'] = all_time
    body['analytics']['item_activity_stats'] = item_activity_stats
    body['analytics']['last_seven_days'] = last_seven_days
    body['workbook'] = {}
    body['workbook']['id'] = id1
    body['workbook']['application'] = microsoft_graph_workbook_application
    body['workbook']['comments'] = comments
    body['workbook']['functions'] = functions
    body['workbook']['names'] = names
    body['workbook']['operations'] = operations
    body['workbook']['tables'] = tables
    body['workbook']['worksheets'] = worksheets
    body['special_folder'] = {}
    body['special_folder']['name'] = microsoft_graph_special_folder_name
    body['shared'] = {}
    body['shared']['owner'] = owner
    body['shared']['scope'] = scope
    body['shared']['shared_by'] = shared_by
    body['shared']['shared_date_time'] = shared_date_time
    body['search_result'] = {}
    body['search_result']['on_click_telemetry_url'] = on_click_telemetry_url
    body['remote_item'] = {}
    body['remote_item']['created_by'] = created_by
    body['remote_item']['created_date_time'] = microsoft_graph_remote_item_created_date_time_created_date_time
    body['remote_item']['file'] = file
    body['remote_item']['file_system_info'] = microsoft_graph_file_system_info_file_system_info
    body['remote_item']['folder'] = folder
    body['remote_item']['id'] = microsoft_graph_remote_item_id
    body['remote_item']['image'] = microsoft_graph_image
    body['remote_item']['last_modified_by'] = last_modified_by
    body['remote_item']['last_modified_date_time'] = microsoft_graph_remote_item_last_modified_date_time_last_modified_date_time
    body['remote_item']['name'] = microsoft_graph_remote_item_name
    body['remote_item']['package'] = package
    body['remote_item']['parent_reference'] = parent_reference
    body['remote_item']['shared'] = shared
    body['remote_item']['sharepoint_ids'] = sharepoint_ids1
    body['remote_item']['size'] = integer_size
    body['remote_item']['special_folder'] = special_folder
    body['remote_item']['video'] = microsoft_graph_video
    body['remote_item']['web_dav_url'] = microsoft_graph_remote_item_web_dav_url_web_dav_url
    body['remote_item']['web_url'] = microsoft_graph_remote_item_web_url
    body['pending_content_update'] = {}
    body['pending_content_update']['queued_date_time'] = queued_date_time
    body['package'] = {}
    body['package']['type'] = type_
    body['folder'] = {}
    body['folder']['child_count'] = child_count
    body['folder']['view'] = view
    body['file'] = {}
    body['file']['hashes'] = hashes
    body['file']['mime_type'] = mime_type
    body['file']['processing_metadata'] = processing_metadata
    body['deleted'] = {}
    body['deleted']['state'] = state
    body['bundle'] = {}
    body['bundle']['album'] = album
    body['bundle']['child_count'] = integer_child_count
    return client.update_files_folder(team_id=team_id,
                                      channel_id=channel_id,
                                      body=body)


def teams_team_channel_update_member(client,
                                     team_id,
                                     channel_id,
                                     conversation_member_id,
                                     id_=None,
                                     display_name=None,
                                     roles=None):
    body = {}
    body['id'] = id_
    body['display_name'] = display_name
    body['roles'] = roles
    return client.update_members(team_id=team_id,
                                 channel_id=channel_id,
                                 conversation_member_id=conversation_member_id,
                                 body=body)


def teams_team_channel_update_message(client,
                                      team_id,
                                      channel_id,
                                      chat_message_id,
                                      body,
                                      id_=None,
                                      attachments=None,
                                      channel_identity=None,
                                      chat_id=None,
                                      created_date_time=None,
                                      deleted_date_time=None,
                                      etag=None,
                                      importance=None,
                                      last_edited_date_time=None,
                                      last_modified_date_time=None,
                                      locale=None,
                                      mentions=None,
                                      message_type=None,
                                      reactions=None,
                                      reply_to_id=None,
                                      subject=None,
                                      summary=None,
                                      web_url=None,
                                      hosted_contents=None,
                                      replies=None,
                                      dlp_action=None,
                                      justification_text=None,
                                      policy_tip=None,
                                      user_action=None,
                                      verdict_details=None,
                                      application=None,
                                      device=None,
                                      user=None):
    body = {}
    body['id'] = id_
    body['attachments'] = attachments
    body['body'] = body
    body['channel_identity'] = channel_identity
    body['chat_id'] = chat_id
    body['created_date_time'] = created_date_time
    body['deleted_date_time'] = deleted_date_time
    body['etag'] = etag
    body['importance'] = importance
    body['last_edited_date_time'] = last_edited_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['locale'] = locale
    body['mentions'] = mentions
    body['message_type'] = message_type
    body['reactions'] = reactions
    body['reply_to_id'] = reply_to_id
    body['subject'] = subject
    body['summary'] = summary
    body['web_url'] = web_url
    body['hosted_contents'] = hosted_contents
    body['replies'] = replies
    body['policy_violation'] = {}
    body['policy_violation']['dlp_action'] = dlp_action
    body['policy_violation']['justification_text'] = justification_text
    body['policy_violation']['policy_tip'] = policy_tip
    body['policy_violation']['user_action'] = user_action
    body['policy_violation']['verdict_details'] = verdict_details
    body['from_property'] = {}
    body['from_property']['application'] = application
    body['from_property']['device'] = device
    body['from_property']['user'] = user
    return client.update_messages(team_id=team_id,
                                  channel_id=channel_id,
                                  chat_message_id=chat_message_id,
                                  body=body)


def teams_team_channel_update_tab(client,
                                  team_id,
                                  channel_id,
                                  teams_tab_id,
                                  id_=None,
                                  configuration=None,
                                  display_name=None,
                                  message_id=None,
                                  sort_order_index=None,
                                  teams_app_id=None,
                                  web_url=None,
                                  microsoft_graph_entity_id=None,
                                  microsoft_graph_teams_app_display_name=None,
                                  distribution_method=None,
                                  external_id=None,
                                  app_definitions=None):
    body = {}
    body['id'] = id_
    body['configuration'] = configuration
    body['display_name'] = display_name
    body['message_id'] = message_id
    body['sort_order_index'] = sort_order_index
    body['teams_app_id'] = teams_app_id
    body['web_url'] = web_url
    body['teams_app'] = {}
    body['teams_app']['id'] = microsoft_graph_entity_id
    body['teams_app']['display_name'] = microsoft_graph_teams_app_display_name
    body['teams_app']['distribution_method'] = distribution_method
    body['teams_app']['external_id'] = external_id
    body['teams_app']['app_definitions'] = app_definitions
    return client.update_tabs(team_id=team_id,
                              channel_id=channel_id,
                              teams_tab_id=teams_tab_id,
                              body=body)


def teams_team_channel_member_add(client,
                                  team_id,
                                  channel_id,
                                  values=None):
    body = {}
    body['values'] = values
    return client.add(team_id=team_id,
                      channel_id=channel_id,
                      body=body)


def teams_team_channel_message_create_hosted_content(client,
                                                     team_id,
                                                     channel_id,
                                                     chat_message_id,
                                                     content_type,
                                                     id_=None,
                                                     content_bytes=None):
    body = {}
    body['id'] = id_
    body['content_bytes'] = content_bytes
    body['content_type'] = content_type
    return client.create_hosted_contents(team_id=team_id,
                                         channel_id=channel_id,
                                         chat_message_id=chat_message_id,
                                         body=body)


def teams_team_channel_message_create_reply(client,
                                            team_id,
                                            channel_id,
                                            chat_message_id,
                                            body,
                                            id_=None,
                                            attachments=None,
                                            channel_identity=None,
                                            chat_id=None,
                                            created_date_time=None,
                                            deleted_date_time=None,
                                            etag=None,
                                            importance=None,
                                            last_edited_date_time=None,
                                            last_modified_date_time=None,
                                            locale=None,
                                            mentions=None,
                                            message_type=None,
                                            reactions=None,
                                            reply_to_id=None,
                                            subject=None,
                                            summary=None,
                                            web_url=None,
                                            hosted_contents=None,
                                            replies=None,
                                            dlp_action=None,
                                            justification_text=None,
                                            policy_tip=None,
                                            user_action=None,
                                            verdict_details=None,
                                            application=None,
                                            device=None,
                                            user=None):
    body = {}
    body['id'] = id_
    body['attachments'] = attachments
    body['body'] = body
    body['channel_identity'] = channel_identity
    body['chat_id'] = chat_id
    body['created_date_time'] = created_date_time
    body['deleted_date_time'] = deleted_date_time
    body['etag'] = etag
    body['importance'] = importance
    body['last_edited_date_time'] = last_edited_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['locale'] = locale
    body['mentions'] = mentions
    body['message_type'] = message_type
    body['reactions'] = reactions
    body['reply_to_id'] = reply_to_id
    body['subject'] = subject
    body['summary'] = summary
    body['web_url'] = web_url
    body['hosted_contents'] = hosted_contents
    body['replies'] = replies
    body['policy_violation'] = {}
    body['policy_violation']['dlp_action'] = dlp_action
    body['policy_violation']['justification_text'] = justification_text
    body['policy_violation']['policy_tip'] = policy_tip
    body['policy_violation']['user_action'] = user_action
    body['policy_violation']['verdict_details'] = verdict_details
    body['from_property'] = {}
    body['from_property']['application'] = application
    body['from_property']['device'] = device
    body['from_property']['user'] = user
    return client.create_replies(team_id=team_id,
                                 channel_id=channel_id,
                                 chat_message_id=chat_message_id,
                                 body=body)


def teams_team_channel_message_delete_hosted_content(client,
                                                     team_id,
                                                     channel_id,
                                                     chat_message_id,
                                                     chat_message_hosted_content_id,
                                                     if_match=None):
    return client.delete_hosted_contents(team_id=team_id,
                                         channel_id=channel_id,
                                         chat_message_id=chat_message_id,
                                         chat_message_hosted_content_id=chat_message_hosted_content_id,
                                         if_match=if_match)


def teams_team_channel_message_delete_reply(client,
                                            team_id,
                                            channel_id,
                                            chat_message_id,
                                            chat_message_id1,
                                            if_match=None):
    return client.delete_replies(team_id=team_id,
                                 channel_id=channel_id,
                                 chat_message_id=chat_message_id,
                                 chat_message_id1=chat_message_id1,
                                 if_match=if_match)


def teams_team_channel_message_delta(client,
                                     team_id,
                                     channel_id):
    return client.delta(team_id=team_id,
                        channel_id=channel_id)


def teams_team_channel_message_list_hosted_content(client,
                                                   team_id,
                                                   channel_id,
                                                   chat_message_id,
                                                   orderby=None,
                                                   select=None,
                                                   expand=None):
    return client.list_hosted_contents(team_id=team_id,
                                       channel_id=channel_id,
                                       chat_message_id=chat_message_id,
                                       orderby=orderby,
                                       select=select,
                                       expand=expand)


def teams_team_channel_message_list_reply(client,
                                          team_id,
                                          channel_id,
                                          chat_message_id,
                                          orderby=None,
                                          select=None,
                                          expand=None):
    return client.list_replies(team_id=team_id,
                               channel_id=channel_id,
                               chat_message_id=chat_message_id,
                               orderby=orderby,
                               select=select,
                               expand=expand)


def teams_team_channel_message_set_hosted_content_content(client,
                                                          team_id,
                                                          channel_id,
                                                          chat_message_id,
                                                          chat_message_hosted_content_id,
                                                          data):
    return client.set_hosted_contents_content(team_id=team_id,
                                              channel_id=channel_id,
                                              chat_message_id=chat_message_id,
                                              chat_message_hosted_content_id=chat_message_hosted_content_id,
                                              data=data)


def teams_team_channel_message_show_hosted_content(client,
                                                   team_id,
                                                   channel_id,
                                                   chat_message_id,
                                                   chat_message_hosted_content_id,
                                                   select=None,
                                                   expand=None):
    return client.get_hosted_contents(team_id=team_id,
                                      channel_id=channel_id,
                                      chat_message_id=chat_message_id,
                                      chat_message_hosted_content_id=chat_message_hosted_content_id,
                                      select=select,
                                      expand=expand)


def teams_team_channel_message_show_hosted_content_content(client,
                                                           team_id,
                                                           channel_id,
                                                           chat_message_id,
                                                           chat_message_hosted_content_id):
    return client.get_hosted_contents_content(team_id=team_id,
                                              channel_id=channel_id,
                                              chat_message_id=chat_message_id,
                                              chat_message_hosted_content_id=chat_message_hosted_content_id)


def teams_team_channel_message_show_reply(client,
                                          team_id,
                                          channel_id,
                                          chat_message_id,
                                          chat_message_id1,
                                          select=None,
                                          expand=None):
    return client.get_replies(team_id=team_id,
                              channel_id=channel_id,
                              chat_message_id=chat_message_id,
                              chat_message_id1=chat_message_id1,
                              select=select,
                              expand=expand)


def teams_team_channel_message_update_hosted_content(client,
                                                     team_id,
                                                     channel_id,
                                                     chat_message_id,
                                                     chat_message_hosted_content_id,
                                                     content_type,
                                                     id_=None,
                                                     content_bytes=None):
    body = {}
    body['id'] = id_
    body['content_bytes'] = content_bytes
    body['content_type'] = content_type
    return client.update_hosted_contents(team_id=team_id,
                                         channel_id=channel_id,
                                         chat_message_id=chat_message_id,
                                         chat_message_hosted_content_id=chat_message_hosted_content_id,
                                         body=body)


def teams_team_channel_message_update_reply(client,
                                            team_id,
                                            channel_id,
                                            chat_message_id,
                                            chat_message_id1,
                                            body,
                                            id_=None,
                                            attachments=None,
                                            channel_identity=None,
                                            chat_id=None,
                                            created_date_time=None,
                                            deleted_date_time=None,
                                            etag=None,
                                            importance=None,
                                            last_edited_date_time=None,
                                            last_modified_date_time=None,
                                            locale=None,
                                            mentions=None,
                                            message_type=None,
                                            reactions=None,
                                            reply_to_id=None,
                                            subject=None,
                                            summary=None,
                                            web_url=None,
                                            hosted_contents=None,
                                            replies=None,
                                            dlp_action=None,
                                            justification_text=None,
                                            policy_tip=None,
                                            user_action=None,
                                            verdict_details=None,
                                            application=None,
                                            device=None,
                                            user=None):
    body = {}
    body['id'] = id_
    body['attachments'] = attachments
    body['body'] = body
    body['channel_identity'] = channel_identity
    body['chat_id'] = chat_id
    body['created_date_time'] = created_date_time
    body['deleted_date_time'] = deleted_date_time
    body['etag'] = etag
    body['importance'] = importance
    body['last_edited_date_time'] = last_edited_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['locale'] = locale
    body['mentions'] = mentions
    body['message_type'] = message_type
    body['reactions'] = reactions
    body['reply_to_id'] = reply_to_id
    body['subject'] = subject
    body['summary'] = summary
    body['web_url'] = web_url
    body['hosted_contents'] = hosted_contents
    body['replies'] = replies
    body['policy_violation'] = {}
    body['policy_violation']['dlp_action'] = dlp_action
    body['policy_violation']['justification_text'] = justification_text
    body['policy_violation']['policy_tip'] = policy_tip
    body['policy_violation']['user_action'] = user_action
    body['policy_violation']['verdict_details'] = verdict_details
    body['from_property'] = {}
    body['from_property']['application'] = application
    body['from_property']['device'] = device
    body['from_property']['user'] = user
    return client.update_replies(team_id=team_id,
                                 channel_id=channel_id,
                                 chat_message_id=chat_message_id,
                                 chat_message_id1=chat_message_id1,
                                 body=body)


def teams_team_channel_message_reply_delta(client,
                                           team_id,
                                           channel_id,
                                           chat_message_id):
    return client.delta(team_id=team_id,
                        channel_id=channel_id,
                        chat_message_id=chat_message_id)


def teams_team_channel_tab_delete_ref_team_app(client,
                                               team_id,
                                               channel_id,
                                               teams_tab_id,
                                               if_match=None):
    return client.delete_ref_teams_app(team_id=team_id,
                                       channel_id=channel_id,
                                       teams_tab_id=teams_tab_id,
                                       if_match=if_match)


def teams_team_channel_tab_set_ref_team_app(client,
                                            team_id,
                                            channel_id,
                                            teams_tab_id,
                                            body):
    return client.set_ref_teams_app(team_id=team_id,
                                    channel_id=channel_id,
                                    teams_tab_id=teams_tab_id,
                                    body=body)


def teams_team_channel_tab_show_ref_team_app(client,
                                             team_id,
                                             channel_id,
                                             teams_tab_id):
    return client.get_ref_teams_app(team_id=team_id,
                                    channel_id=channel_id,
                                    teams_tab_id=teams_tab_id)


def teams_team_channel_tab_show_team_app(client,
                                         team_id,
                                         channel_id,
                                         teams_tab_id,
                                         select=None,
                                         expand=None):
    return client.get_teams_app(team_id=team_id,
                                channel_id=channel_id,
                                teams_tab_id=teams_tab_id,
                                select=select,
                                expand=expand)


def teams_team_installed_app_delete_ref_team_app(client,
                                                 team_id,
                                                 teams_app_installation_id,
                                                 if_match=None):
    return client.delete_ref_teams_app(team_id=team_id,
                                       teams_app_installation_id=teams_app_installation_id,
                                       if_match=if_match)


def teams_team_installed_app_delete_ref_team_app_definition(client,
                                                            team_id,
                                                            teams_app_installation_id,
                                                            if_match=None):
    return client.delete_ref_teams_app_definition(team_id=team_id,
                                                  teams_app_installation_id=teams_app_installation_id,
                                                  if_match=if_match)


def teams_team_installed_app_set_ref_team_app(client,
                                              team_id,
                                              teams_app_installation_id,
                                              body):
    return client.set_ref_teams_app(team_id=team_id,
                                    teams_app_installation_id=teams_app_installation_id,
                                    body=body)


def teams_team_installed_app_set_ref_team_app_definition(client,
                                                         team_id,
                                                         teams_app_installation_id,
                                                         body):
    return client.set_ref_teams_app_definition(team_id=team_id,
                                               teams_app_installation_id=teams_app_installation_id,
                                               body=body)


def teams_team_installed_app_show_ref_team_app(client,
                                               team_id,
                                               teams_app_installation_id):
    return client.get_ref_teams_app(team_id=team_id,
                                    teams_app_installation_id=teams_app_installation_id)


def teams_team_installed_app_show_ref_team_app_definition(client,
                                                          team_id,
                                                          teams_app_installation_id):
    return client.get_ref_teams_app_definition(team_id=team_id,
                                               teams_app_installation_id=teams_app_installation_id)


def teams_team_installed_app_show_team_app(client,
                                           team_id,
                                           teams_app_installation_id,
                                           select=None,
                                           expand=None):
    return client.get_teams_app(team_id=team_id,
                                teams_app_installation_id=teams_app_installation_id,
                                select=select,
                                expand=expand)


def teams_team_installed_app_show_team_app_definition(client,
                                                      team_id,
                                                      teams_app_installation_id,
                                                      select=None,
                                                      expand=None):
    return client.get_teams_app_definition(team_id=team_id,
                                           teams_app_installation_id=teams_app_installation_id,
                                           select=select,
                                           expand=expand)


def teams_team_installed_app_upgrade(client,
                                     team_id,
                                     teams_app_installation_id):
    return client.upgrade(team_id=team_id,
                          teams_app_installation_id=teams_app_installation_id)


def teams_team_member_add(client,
                          team_id,
                          values=None):
    body = {}
    body['values'] = values
    return client.add(team_id=team_id,
                      body=body)


def teams_team_primary_channel_complete_migration(client,
                                                  team_id):
    return client.complete_migration(team_id=team_id)


def teams_team_primary_channel_create_member(client,
                                             team_id,
                                             id_=None,
                                             display_name=None,
                                             roles=None):
    body = {}
    body['id'] = id_
    body['display_name'] = display_name
    body['roles'] = roles
    return client.create_members(team_id=team_id,
                                 body=body)


def teams_team_primary_channel_create_message(client,
                                              team_id,
                                              body,
                                              id_=None,
                                              attachments=None,
                                              channel_identity=None,
                                              chat_id=None,
                                              created_date_time=None,
                                              deleted_date_time=None,
                                              etag=None,
                                              importance=None,
                                              last_edited_date_time=None,
                                              last_modified_date_time=None,
                                              locale=None,
                                              mentions=None,
                                              message_type=None,
                                              reactions=None,
                                              reply_to_id=None,
                                              subject=None,
                                              summary=None,
                                              web_url=None,
                                              hosted_contents=None,
                                              replies=None,
                                              dlp_action=None,
                                              justification_text=None,
                                              policy_tip=None,
                                              user_action=None,
                                              verdict_details=None,
                                              application=None,
                                              device=None,
                                              user=None):
    body = {}
    body['id'] = id_
    body['attachments'] = attachments
    body['body'] = body
    body['channel_identity'] = channel_identity
    body['chat_id'] = chat_id
    body['created_date_time'] = created_date_time
    body['deleted_date_time'] = deleted_date_time
    body['etag'] = etag
    body['importance'] = importance
    body['last_edited_date_time'] = last_edited_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['locale'] = locale
    body['mentions'] = mentions
    body['message_type'] = message_type
    body['reactions'] = reactions
    body['reply_to_id'] = reply_to_id
    body['subject'] = subject
    body['summary'] = summary
    body['web_url'] = web_url
    body['hosted_contents'] = hosted_contents
    body['replies'] = replies
    body['policy_violation'] = {}
    body['policy_violation']['dlp_action'] = dlp_action
    body['policy_violation']['justification_text'] = justification_text
    body['policy_violation']['policy_tip'] = policy_tip
    body['policy_violation']['user_action'] = user_action
    body['policy_violation']['verdict_details'] = verdict_details
    body['from_property'] = {}
    body['from_property']['application'] = application
    body['from_property']['device'] = device
    body['from_property']['user'] = user
    return client.create_messages(team_id=team_id,
                                  body=body)


def teams_team_primary_channel_create_tab(client,
                                          team_id,
                                          id_=None,
                                          configuration=None,
                                          display_name=None,
                                          message_id=None,
                                          sort_order_index=None,
                                          teams_app_id=None,
                                          web_url=None,
                                          microsoft_graph_entity_id=None,
                                          microsoft_graph_teams_app_display_name=None,
                                          distribution_method=None,
                                          external_id=None,
                                          app_definitions=None):
    body = {}
    body['id'] = id_
    body['configuration'] = configuration
    body['display_name'] = display_name
    body['message_id'] = message_id
    body['sort_order_index'] = sort_order_index
    body['teams_app_id'] = teams_app_id
    body['web_url'] = web_url
    body['teams_app'] = {}
    body['teams_app']['id'] = microsoft_graph_entity_id
    body['teams_app']['display_name'] = microsoft_graph_teams_app_display_name
    body['teams_app']['distribution_method'] = distribution_method
    body['teams_app']['external_id'] = external_id
    body['teams_app']['app_definitions'] = app_definitions
    return client.create_tabs(team_id=team_id,
                              body=body)


def teams_team_primary_channel_delete_file_folder(client,
                                                  team_id,
                                                  if_match=None):
    return client.delete_files_folder(team_id=team_id,
                                      if_match=if_match)


def teams_team_primary_channel_delete_member(client,
                                             team_id,
                                             conversation_member_id,
                                             if_match=None):
    return client.delete_members(team_id=team_id,
                                 conversation_member_id=conversation_member_id,
                                 if_match=if_match)


def teams_team_primary_channel_delete_message(client,
                                              team_id,
                                              chat_message_id,
                                              if_match=None):
    return client.delete_messages(team_id=team_id,
                                  chat_message_id=chat_message_id,
                                  if_match=if_match)


def teams_team_primary_channel_delete_tab(client,
                                          team_id,
                                          teams_tab_id,
                                          if_match=None):
    return client.delete_tabs(team_id=team_id,
                              teams_tab_id=teams_tab_id,
                              if_match=if_match)


def teams_team_primary_channel_list_member(client,
                                           team_id,
                                           orderby=None,
                                           select=None,
                                           expand=None):
    return client.list_members(team_id=team_id,
                               orderby=orderby,
                               select=select,
                               expand=expand)


def teams_team_primary_channel_list_message(client,
                                            team_id,
                                            orderby=None,
                                            select=None,
                                            expand=None):
    return client.list_messages(team_id=team_id,
                                orderby=orderby,
                                select=select,
                                expand=expand)


def teams_team_primary_channel_list_tab(client,
                                        team_id,
                                        orderby=None,
                                        select=None,
                                        expand=None):
    return client.list_tabs(team_id=team_id,
                            orderby=orderby,
                            select=select,
                            expand=expand)


def teams_team_primary_channel_set_file_folder_content(client,
                                                       team_id,
                                                       data):
    return client.set_files_folder_content(team_id=team_id,
                                           data=data)


def teams_team_primary_channel_show_file_folder(client,
                                                team_id,
                                                select=None,
                                                expand=None):
    return client.get_files_folder(team_id=team_id,
                                   select=select,
                                   expand=expand)


def teams_team_primary_channel_show_file_folder_content(client,
                                                        team_id):
    return client.get_files_folder_content(team_id=team_id)


def teams_team_primary_channel_show_member(client,
                                           team_id,
                                           conversation_member_id,
                                           select=None,
                                           expand=None):
    return client.get_members(team_id=team_id,
                              conversation_member_id=conversation_member_id,
                              select=select,
                              expand=expand)


def teams_team_primary_channel_show_message(client,
                                            team_id,
                                            chat_message_id,
                                            select=None,
                                            expand=None):
    return client.get_messages(team_id=team_id,
                               chat_message_id=chat_message_id,
                               select=select,
                               expand=expand)


def teams_team_primary_channel_show_tab(client,
                                        team_id,
                                        teams_tab_id,
                                        select=None,
                                        expand=None):
    return client.get_tabs(team_id=team_id,
                           teams_tab_id=teams_tab_id,
                           select=select,
                           expand=expand)


def teams_team_primary_channel_update_file_folder(client,
                                                  team_id,
                                                  id_=None,
                                                  created_date_time=None,
                                                  description=None,
                                                  e_tag=None,
                                                  last_modified_date_time=None,
                                                  name=None,
                                                  web_url=None,
                                                  created_by_user=None,
                                                  last_modified_by_user=None,
                                                  drive_id=None,
                                                  drive_type=None,
                                                  microsoft_graph_item_reference_id=None,
                                                  microsoft_graph_item_reference_name=None,
                                                  path=None,
                                                  share_id=None,
                                                  sharepoint_ids=None,
                                                  site_id=None,
                                                  application=None,
                                                  device=None,
                                                  user=None,
                                                  microsoft_graph_identity_application=None,
                                                  microsoft_graph_identity_device=None,
                                                  microsoft_graph_identity_user=None,
                                                  audio=None,
                                                  content=None,
                                                  c_tag=None,
                                                  file_system_info=None,
                                                  image=None,
                                                  location=None,
                                                  photo=None,
                                                  publication=None,
                                                  root=None,
                                                  microsoft_graph_sharepoint_ids=None,
                                                  size=None,
                                                  video=None,
                                                  web_dav_url=None,
                                                  activities=None,
                                                  children=None,
                                                  list_item=None,
                                                  permissions=None,
                                                  subscriptions=None,
                                                  thumbnails=None,
                                                  versions=None,
                                                  microsoft_graph_entity_id=None,
                                                  all_time=None,
                                                  item_activity_stats=None,
                                                  last_seven_days=None,
                                                  id1=None,
                                                  microsoft_graph_workbook_application=None,
                                                  comments=None,
                                                  functions=None,
                                                  names=None,
                                                  operations=None,
                                                  tables=None,
                                                  worksheets=None,
                                                  microsoft_graph_special_folder_name=None,
                                                  owner=None,
                                                  scope=None,
                                                  shared_by=None,
                                                  shared_date_time=None,
                                                  on_click_telemetry_url=None,
                                                  created_by=None,
                                                  microsoft_graph_remote_item_created_date_time_created_date_time=None,
                                                  file=None,
                                                  microsoft_graph_file_system_info_file_system_info=None,
                                                  folder=None,
                                                  microsoft_graph_remote_item_id=None,
                                                  microsoft_graph_image=None,
                                                  last_modified_by=None,
                                                  microsoft_graph_remote_item_last_modified_date_time_last_modified_date_time=None,
                                                  microsoft_graph_remote_item_name=None,
                                                  package=None,
                                                  parent_reference=None,
                                                  shared=None,
                                                  sharepoint_ids1=None,
                                                  integer_size=None,
                                                  special_folder=None,
                                                  microsoft_graph_video=None,
                                                  microsoft_graph_remote_item_web_dav_url_web_dav_url=None,
                                                  microsoft_graph_remote_item_web_url=None,
                                                  queued_date_time=None,
                                                  type_=None,
                                                  child_count=None,
                                                  view=None,
                                                  hashes=None,
                                                  mime_type=None,
                                                  processing_metadata=None,
                                                  state=None,
                                                  album=None,
                                                  integer_child_count=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['description'] = description
    body['e_tag'] = e_tag
    body['last_modified_date_time'] = last_modified_date_time
    body['name'] = name
    body['web_url'] = web_url
    body['created_by_user'] = created_by_user
    body['last_modified_by_user'] = last_modified_by_user
    body['parent_reference'] = {}
    body['parent_reference']['drive_id'] = drive_id
    body['parent_reference']['drive_type'] = drive_type
    body['parent_reference']['id'] = microsoft_graph_item_reference_id
    body['parent_reference']['name'] = microsoft_graph_item_reference_name
    body['parent_reference']['path'] = path
    body['parent_reference']['share_id'] = share_id
    body['parent_reference']['sharepoint_ids'] = sharepoint_ids
    body['parent_reference']['site_id'] = site_id
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['audio'] = audio
    body['content'] = content
    body['c_tag'] = c_tag
    body['file_system_info'] = file_system_info
    body['image'] = image
    body['location'] = location
    body['photo'] = photo
    body['publication'] = publication
    body['root'] = root
    body['sharepoint_ids'] = microsoft_graph_sharepoint_ids
    body['size'] = size
    body['video'] = video
    body['web_dav_url'] = web_dav_url
    body['activities'] = activities
    body['children'] = children
    body['list_item'] = list_item
    body['permissions'] = permissions
    body['subscriptions'] = subscriptions
    body['thumbnails'] = thumbnails
    body['versions'] = versions
    body['analytics'] = {}
    body['analytics']['id'] = microsoft_graph_entity_id
    body['analytics']['all_time'] = all_time
    body['analytics']['item_activity_stats'] = item_activity_stats
    body['analytics']['last_seven_days'] = last_seven_days
    body['workbook'] = {}
    body['workbook']['id'] = id1
    body['workbook']['application'] = microsoft_graph_workbook_application
    body['workbook']['comments'] = comments
    body['workbook']['functions'] = functions
    body['workbook']['names'] = names
    body['workbook']['operations'] = operations
    body['workbook']['tables'] = tables
    body['workbook']['worksheets'] = worksheets
    body['special_folder'] = {}
    body['special_folder']['name'] = microsoft_graph_special_folder_name
    body['shared'] = {}
    body['shared']['owner'] = owner
    body['shared']['scope'] = scope
    body['shared']['shared_by'] = shared_by
    body['shared']['shared_date_time'] = shared_date_time
    body['search_result'] = {}
    body['search_result']['on_click_telemetry_url'] = on_click_telemetry_url
    body['remote_item'] = {}
    body['remote_item']['created_by'] = created_by
    body['remote_item']['created_date_time'] = microsoft_graph_remote_item_created_date_time_created_date_time
    body['remote_item']['file'] = file
    body['remote_item']['file_system_info'] = microsoft_graph_file_system_info_file_system_info
    body['remote_item']['folder'] = folder
    body['remote_item']['id'] = microsoft_graph_remote_item_id
    body['remote_item']['image'] = microsoft_graph_image
    body['remote_item']['last_modified_by'] = last_modified_by
    body['remote_item']['last_modified_date_time'] = microsoft_graph_remote_item_last_modified_date_time_last_modified_date_time
    body['remote_item']['name'] = microsoft_graph_remote_item_name
    body['remote_item']['package'] = package
    body['remote_item']['parent_reference'] = parent_reference
    body['remote_item']['shared'] = shared
    body['remote_item']['sharepoint_ids'] = sharepoint_ids1
    body['remote_item']['size'] = integer_size
    body['remote_item']['special_folder'] = special_folder
    body['remote_item']['video'] = microsoft_graph_video
    body['remote_item']['web_dav_url'] = microsoft_graph_remote_item_web_dav_url_web_dav_url
    body['remote_item']['web_url'] = microsoft_graph_remote_item_web_url
    body['pending_content_update'] = {}
    body['pending_content_update']['queued_date_time'] = queued_date_time
    body['package'] = {}
    body['package']['type'] = type_
    body['folder'] = {}
    body['folder']['child_count'] = child_count
    body['folder']['view'] = view
    body['file'] = {}
    body['file']['hashes'] = hashes
    body['file']['mime_type'] = mime_type
    body['file']['processing_metadata'] = processing_metadata
    body['deleted'] = {}
    body['deleted']['state'] = state
    body['bundle'] = {}
    body['bundle']['album'] = album
    body['bundle']['child_count'] = integer_child_count
    return client.update_files_folder(team_id=team_id,
                                      body=body)


def teams_team_primary_channel_update_member(client,
                                             team_id,
                                             conversation_member_id,
                                             id_=None,
                                             display_name=None,
                                             roles=None):
    body = {}
    body['id'] = id_
    body['display_name'] = display_name
    body['roles'] = roles
    return client.update_members(team_id=team_id,
                                 conversation_member_id=conversation_member_id,
                                 body=body)


def teams_team_primary_channel_update_message(client,
                                              team_id,
                                              chat_message_id,
                                              body,
                                              id_=None,
                                              attachments=None,
                                              channel_identity=None,
                                              chat_id=None,
                                              created_date_time=None,
                                              deleted_date_time=None,
                                              etag=None,
                                              importance=None,
                                              last_edited_date_time=None,
                                              last_modified_date_time=None,
                                              locale=None,
                                              mentions=None,
                                              message_type=None,
                                              reactions=None,
                                              reply_to_id=None,
                                              subject=None,
                                              summary=None,
                                              web_url=None,
                                              hosted_contents=None,
                                              replies=None,
                                              dlp_action=None,
                                              justification_text=None,
                                              policy_tip=None,
                                              user_action=None,
                                              verdict_details=None,
                                              application=None,
                                              device=None,
                                              user=None):
    body = {}
    body['id'] = id_
    body['attachments'] = attachments
    body['body'] = body
    body['channel_identity'] = channel_identity
    body['chat_id'] = chat_id
    body['created_date_time'] = created_date_time
    body['deleted_date_time'] = deleted_date_time
    body['etag'] = etag
    body['importance'] = importance
    body['last_edited_date_time'] = last_edited_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['locale'] = locale
    body['mentions'] = mentions
    body['message_type'] = message_type
    body['reactions'] = reactions
    body['reply_to_id'] = reply_to_id
    body['subject'] = subject
    body['summary'] = summary
    body['web_url'] = web_url
    body['hosted_contents'] = hosted_contents
    body['replies'] = replies
    body['policy_violation'] = {}
    body['policy_violation']['dlp_action'] = dlp_action
    body['policy_violation']['justification_text'] = justification_text
    body['policy_violation']['policy_tip'] = policy_tip
    body['policy_violation']['user_action'] = user_action
    body['policy_violation']['verdict_details'] = verdict_details
    body['from_property'] = {}
    body['from_property']['application'] = application
    body['from_property']['device'] = device
    body['from_property']['user'] = user
    return client.update_messages(team_id=team_id,
                                  chat_message_id=chat_message_id,
                                  body=body)


def teams_team_primary_channel_update_tab(client,
                                          team_id,
                                          teams_tab_id,
                                          id_=None,
                                          configuration=None,
                                          display_name=None,
                                          message_id=None,
                                          sort_order_index=None,
                                          teams_app_id=None,
                                          web_url=None,
                                          microsoft_graph_entity_id=None,
                                          microsoft_graph_teams_app_display_name=None,
                                          distribution_method=None,
                                          external_id=None,
                                          app_definitions=None):
    body = {}
    body['id'] = id_
    body['configuration'] = configuration
    body['display_name'] = display_name
    body['message_id'] = message_id
    body['sort_order_index'] = sort_order_index
    body['teams_app_id'] = teams_app_id
    body['web_url'] = web_url
    body['teams_app'] = {}
    body['teams_app']['id'] = microsoft_graph_entity_id
    body['teams_app']['display_name'] = microsoft_graph_teams_app_display_name
    body['teams_app']['distribution_method'] = distribution_method
    body['teams_app']['external_id'] = external_id
    body['teams_app']['app_definitions'] = app_definitions
    return client.update_tabs(team_id=team_id,
                              teams_tab_id=teams_tab_id,
                              body=body)


def teams_team_primary_channel_member_add(client,
                                          team_id,
                                          values=None):
    body = {}
    body['values'] = values
    return client.add(team_id=team_id,
                      body=body)


def teams_team_primary_channel_message_create_hosted_content(client,
                                                             team_id,
                                                             chat_message_id,
                                                             content_type,
                                                             id_=None,
                                                             content_bytes=None):
    body = {}
    body['id'] = id_
    body['content_bytes'] = content_bytes
    body['content_type'] = content_type
    return client.create_hosted_contents(team_id=team_id,
                                         chat_message_id=chat_message_id,
                                         body=body)


def teams_team_primary_channel_message_create_reply(client,
                                                    team_id,
                                                    chat_message_id,
                                                    body,
                                                    id_=None,
                                                    attachments=None,
                                                    channel_identity=None,
                                                    chat_id=None,
                                                    created_date_time=None,
                                                    deleted_date_time=None,
                                                    etag=None,
                                                    importance=None,
                                                    last_edited_date_time=None,
                                                    last_modified_date_time=None,
                                                    locale=None,
                                                    mentions=None,
                                                    message_type=None,
                                                    reactions=None,
                                                    reply_to_id=None,
                                                    subject=None,
                                                    summary=None,
                                                    web_url=None,
                                                    hosted_contents=None,
                                                    replies=None,
                                                    dlp_action=None,
                                                    justification_text=None,
                                                    policy_tip=None,
                                                    user_action=None,
                                                    verdict_details=None,
                                                    application=None,
                                                    device=None,
                                                    user=None):
    body = {}
    body['id'] = id_
    body['attachments'] = attachments
    body['body'] = body
    body['channel_identity'] = channel_identity
    body['chat_id'] = chat_id
    body['created_date_time'] = created_date_time
    body['deleted_date_time'] = deleted_date_time
    body['etag'] = etag
    body['importance'] = importance
    body['last_edited_date_time'] = last_edited_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['locale'] = locale
    body['mentions'] = mentions
    body['message_type'] = message_type
    body['reactions'] = reactions
    body['reply_to_id'] = reply_to_id
    body['subject'] = subject
    body['summary'] = summary
    body['web_url'] = web_url
    body['hosted_contents'] = hosted_contents
    body['replies'] = replies
    body['policy_violation'] = {}
    body['policy_violation']['dlp_action'] = dlp_action
    body['policy_violation']['justification_text'] = justification_text
    body['policy_violation']['policy_tip'] = policy_tip
    body['policy_violation']['user_action'] = user_action
    body['policy_violation']['verdict_details'] = verdict_details
    body['from_property'] = {}
    body['from_property']['application'] = application
    body['from_property']['device'] = device
    body['from_property']['user'] = user
    return client.create_replies(team_id=team_id,
                                 chat_message_id=chat_message_id,
                                 body=body)


def teams_team_primary_channel_message_delete_hosted_content(client,
                                                             team_id,
                                                             chat_message_id,
                                                             chat_message_hosted_content_id,
                                                             if_match=None):
    return client.delete_hosted_contents(team_id=team_id,
                                         chat_message_id=chat_message_id,
                                         chat_message_hosted_content_id=chat_message_hosted_content_id,
                                         if_match=if_match)


def teams_team_primary_channel_message_delete_reply(client,
                                                    team_id,
                                                    chat_message_id,
                                                    chat_message_id1,
                                                    if_match=None):
    return client.delete_replies(team_id=team_id,
                                 chat_message_id=chat_message_id,
                                 chat_message_id1=chat_message_id1,
                                 if_match=if_match)


def teams_team_primary_channel_message_delta(client,
                                             team_id):
    return client.delta(team_id=team_id)


def teams_team_primary_channel_message_list_hosted_content(client,
                                                           team_id,
                                                           chat_message_id,
                                                           orderby=None,
                                                           select=None,
                                                           expand=None):
    return client.list_hosted_contents(team_id=team_id,
                                       chat_message_id=chat_message_id,
                                       orderby=orderby,
                                       select=select,
                                       expand=expand)


def teams_team_primary_channel_message_list_reply(client,
                                                  team_id,
                                                  chat_message_id,
                                                  orderby=None,
                                                  select=None,
                                                  expand=None):
    return client.list_replies(team_id=team_id,
                               chat_message_id=chat_message_id,
                               orderby=orderby,
                               select=select,
                               expand=expand)


def teams_team_primary_channel_message_set_hosted_content_content(client,
                                                                  team_id,
                                                                  chat_message_id,
                                                                  chat_message_hosted_content_id,
                                                                  data):
    return client.set_hosted_contents_content(team_id=team_id,
                                              chat_message_id=chat_message_id,
                                              chat_message_hosted_content_id=chat_message_hosted_content_id,
                                              data=data)


def teams_team_primary_channel_message_show_hosted_content(client,
                                                           team_id,
                                                           chat_message_id,
                                                           chat_message_hosted_content_id,
                                                           select=None,
                                                           expand=None):
    return client.get_hosted_contents(team_id=team_id,
                                      chat_message_id=chat_message_id,
                                      chat_message_hosted_content_id=chat_message_hosted_content_id,
                                      select=select,
                                      expand=expand)


def teams_team_primary_channel_message_show_hosted_content_content(client,
                                                                   team_id,
                                                                   chat_message_id,
                                                                   chat_message_hosted_content_id):
    return client.get_hosted_contents_content(team_id=team_id,
                                              chat_message_id=chat_message_id,
                                              chat_message_hosted_content_id=chat_message_hosted_content_id)


def teams_team_primary_channel_message_show_reply(client,
                                                  team_id,
                                                  chat_message_id,
                                                  chat_message_id1,
                                                  select=None,
                                                  expand=None):
    return client.get_replies(team_id=team_id,
                              chat_message_id=chat_message_id,
                              chat_message_id1=chat_message_id1,
                              select=select,
                              expand=expand)


def teams_team_primary_channel_message_update_hosted_content(client,
                                                             team_id,
                                                             chat_message_id,
                                                             chat_message_hosted_content_id,
                                                             content_type,
                                                             id_=None,
                                                             content_bytes=None):
    body = {}
    body['id'] = id_
    body['content_bytes'] = content_bytes
    body['content_type'] = content_type
    return client.update_hosted_contents(team_id=team_id,
                                         chat_message_id=chat_message_id,
                                         chat_message_hosted_content_id=chat_message_hosted_content_id,
                                         body=body)


def teams_team_primary_channel_message_update_reply(client,
                                                    team_id,
                                                    chat_message_id,
                                                    chat_message_id1,
                                                    body,
                                                    id_=None,
                                                    attachments=None,
                                                    channel_identity=None,
                                                    chat_id=None,
                                                    created_date_time=None,
                                                    deleted_date_time=None,
                                                    etag=None,
                                                    importance=None,
                                                    last_edited_date_time=None,
                                                    last_modified_date_time=None,
                                                    locale=None,
                                                    mentions=None,
                                                    message_type=None,
                                                    reactions=None,
                                                    reply_to_id=None,
                                                    subject=None,
                                                    summary=None,
                                                    web_url=None,
                                                    hosted_contents=None,
                                                    replies=None,
                                                    dlp_action=None,
                                                    justification_text=None,
                                                    policy_tip=None,
                                                    user_action=None,
                                                    verdict_details=None,
                                                    application=None,
                                                    device=None,
                                                    user=None):
    body = {}
    body['id'] = id_
    body['attachments'] = attachments
    body['body'] = body
    body['channel_identity'] = channel_identity
    body['chat_id'] = chat_id
    body['created_date_time'] = created_date_time
    body['deleted_date_time'] = deleted_date_time
    body['etag'] = etag
    body['importance'] = importance
    body['last_edited_date_time'] = last_edited_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['locale'] = locale
    body['mentions'] = mentions
    body['message_type'] = message_type
    body['reactions'] = reactions
    body['reply_to_id'] = reply_to_id
    body['subject'] = subject
    body['summary'] = summary
    body['web_url'] = web_url
    body['hosted_contents'] = hosted_contents
    body['replies'] = replies
    body['policy_violation'] = {}
    body['policy_violation']['dlp_action'] = dlp_action
    body['policy_violation']['justification_text'] = justification_text
    body['policy_violation']['policy_tip'] = policy_tip
    body['policy_violation']['user_action'] = user_action
    body['policy_violation']['verdict_details'] = verdict_details
    body['from_property'] = {}
    body['from_property']['application'] = application
    body['from_property']['device'] = device
    body['from_property']['user'] = user
    return client.update_replies(team_id=team_id,
                                 chat_message_id=chat_message_id,
                                 chat_message_id1=chat_message_id1,
                                 body=body)


def teams_team_primary_channel_message_reply_delta(client,
                                                   team_id,
                                                   chat_message_id):
    return client.delta(team_id=team_id,
                        chat_message_id=chat_message_id)


def teams_team_primary_channel_tab_delete_ref_team_app(client,
                                                       team_id,
                                                       teams_tab_id,
                                                       if_match=None):
    return client.delete_ref_teams_app(team_id=team_id,
                                       teams_tab_id=teams_tab_id,
                                       if_match=if_match)


def teams_team_primary_channel_tab_set_ref_team_app(client,
                                                    team_id,
                                                    teams_tab_id,
                                                    body):
    return client.set_ref_teams_app(team_id=team_id,
                                    teams_tab_id=teams_tab_id,
                                    body=body)


def teams_team_primary_channel_tab_show_ref_team_app(client,
                                                     team_id,
                                                     teams_tab_id):
    return client.get_ref_teams_app(team_id=team_id,
                                    teams_tab_id=teams_tab_id)


def teams_team_primary_channel_tab_show_team_app(client,
                                                 team_id,
                                                 teams_tab_id,
                                                 select=None,
                                                 expand=None):
    return client.get_teams_app(team_id=team_id,
                                teams_tab_id=teams_tab_id,
                                select=select,
                                expand=expand)


def teams_team_schedule_create_offer_shift_request(client,
                                                   team_id,
                                                   id_=None,
                                                   created_date_time=None,
                                                   last_modified_date_time=None,
                                                   application=None,
                                                   device=None,
                                                   user=None,
                                                   microsoft_graph_identity_application=None,
                                                   microsoft_graph_identity_device=None,
                                                   microsoft_graph_identity_user=None,
                                                   assigned_to=None,
                                                   manager_action_date_time=None,
                                                   manager_action_message=None,
                                                   manager_user_id=None,
                                                   sender_date_time=None,
                                                   sender_message=None,
                                                   sender_user_id=None,
                                                   state=None,
                                                   recipient_action_date_time=None,
                                                   recipient_action_message=None,
                                                   recipient_user_id=None,
                                                   sender_shift_id=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['assigned_to'] = assigned_to
    body['manager_action_date_time'] = manager_action_date_time
    body['manager_action_message'] = manager_action_message
    body['manager_user_id'] = manager_user_id
    body['sender_date_time'] = sender_date_time
    body['sender_message'] = sender_message
    body['sender_user_id'] = sender_user_id
    body['state'] = state
    body['recipient_action_date_time'] = recipient_action_date_time
    body['recipient_action_message'] = recipient_action_message
    body['recipient_user_id'] = recipient_user_id
    body['sender_shift_id'] = sender_shift_id
    return client.create_offer_shift_requests(team_id=team_id,
                                              body=body)


def teams_team_schedule_create_open_shift(client,
                                          team_id,
                                          id_=None,
                                          created_date_time=None,
                                          last_modified_date_time=None,
                                          application=None,
                                          device=None,
                                          user=None,
                                          microsoft_graph_identity_application=None,
                                          microsoft_graph_identity_device=None,
                                          microsoft_graph_identity_user=None,
                                          draft_open_shift=None,
                                          is_staged_for_deletion=None,
                                          scheduling_group_id=None,
                                          shared_open_shift=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['draft_open_shift'] = draft_open_shift
    body['is_staged_for_deletion'] = is_staged_for_deletion
    body['scheduling_group_id'] = scheduling_group_id
    body['shared_open_shift'] = shared_open_shift
    return client.create_open_shifts(team_id=team_id,
                                     body=body)


def teams_team_schedule_create_open_shift_change_request(client,
                                                         team_id,
                                                         id_=None,
                                                         created_date_time=None,
                                                         last_modified_date_time=None,
                                                         application=None,
                                                         device=None,
                                                         user=None,
                                                         microsoft_graph_identity_application=None,
                                                         microsoft_graph_identity_device=None,
                                                         microsoft_graph_identity_user=None,
                                                         assigned_to=None,
                                                         manager_action_date_time=None,
                                                         manager_action_message=None,
                                                         manager_user_id=None,
                                                         sender_date_time=None,
                                                         sender_message=None,
                                                         sender_user_id=None,
                                                         state=None,
                                                         open_shift_id=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['assigned_to'] = assigned_to
    body['manager_action_date_time'] = manager_action_date_time
    body['manager_action_message'] = manager_action_message
    body['manager_user_id'] = manager_user_id
    body['sender_date_time'] = sender_date_time
    body['sender_message'] = sender_message
    body['sender_user_id'] = sender_user_id
    body['state'] = state
    body['open_shift_id'] = open_shift_id
    return client.create_open_shift_change_requests(team_id=team_id,
                                                    body=body)


def teams_team_schedule_create_scheduling_group(client,
                                                team_id,
                                                id_=None,
                                                created_date_time=None,
                                                last_modified_date_time=None,
                                                application=None,
                                                device=None,
                                                user=None,
                                                microsoft_graph_identity_application=None,
                                                microsoft_graph_identity_device=None,
                                                microsoft_graph_identity_user=None,
                                                display_name=None,
                                                is_active=None,
                                                user_ids=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['display_name'] = display_name
    body['is_active'] = is_active
    body['user_ids'] = user_ids
    return client.create_scheduling_groups(team_id=team_id,
                                           body=body)


def teams_team_schedule_create_shift(client,
                                     team_id,
                                     id_=None,
                                     created_date_time=None,
                                     last_modified_date_time=None,
                                     application=None,
                                     device=None,
                                     user=None,
                                     microsoft_graph_identity_application=None,
                                     microsoft_graph_identity_device=None,
                                     microsoft_graph_identity_user=None,
                                     is_staged_for_deletion=None,
                                     scheduling_group_id=None,
                                     user_id=None,
                                     end_date_time=None,
                                     start_date_time=None,
                                     theme=None,
                                     activities=None,
                                     display_name=None,
                                     notes=None,
                                     microsoft_graph_schedule_entity_end_date_time_end_date_time=None,
                                     microsoft_graph_schedule_entity_start_date_time_start_date_time=None,
                                     microsoft_graph_schedule_entity_theme=None,
                                     microsoft_graph_shift_item_activities=None,
                                     microsoft_graph_shift_item_display_name=None,
                                     microsoft_graph_shift_item_notes=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['is_staged_for_deletion'] = is_staged_for_deletion
    body['scheduling_group_id'] = scheduling_group_id
    body['user_id'] = user_id
    body['shared_shift'] = {}
    body['shared_shift']['end_date_time'] = end_date_time
    body['shared_shift']['start_date_time'] = start_date_time
    body['shared_shift']['theme'] = theme
    body['shared_shift']['activities'] = activities
    body['shared_shift']['display_name'] = display_name
    body['shared_shift']['notes'] = notes
    body['draft_shift'] = {}
    body['draft_shift']['end_date_time'] = microsoft_graph_schedule_entity_end_date_time_end_date_time
    body['draft_shift']['start_date_time'] = microsoft_graph_schedule_entity_start_date_time_start_date_time
    body['draft_shift']['theme'] = microsoft_graph_schedule_entity_theme
    body['draft_shift']['activities'] = microsoft_graph_shift_item_activities
    body['draft_shift']['display_name'] = microsoft_graph_shift_item_display_name
    body['draft_shift']['notes'] = microsoft_graph_shift_item_notes
    return client.create_shifts(team_id=team_id,
                                body=body)


def teams_team_schedule_create_swap_shift_change_request(client,
                                                         team_id,
                                                         id_=None,
                                                         created_date_time=None,
                                                         last_modified_date_time=None,
                                                         application=None,
                                                         device=None,
                                                         user=None,
                                                         microsoft_graph_identity_application=None,
                                                         microsoft_graph_identity_device=None,
                                                         microsoft_graph_identity_user=None,
                                                         assigned_to=None,
                                                         manager_action_date_time=None,
                                                         manager_action_message=None,
                                                         manager_user_id=None,
                                                         sender_date_time=None,
                                                         sender_message=None,
                                                         sender_user_id=None,
                                                         state=None,
                                                         recipient_action_date_time=None,
                                                         recipient_action_message=None,
                                                         recipient_user_id=None,
                                                         sender_shift_id=None,
                                                         recipient_shift_id=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['assigned_to'] = assigned_to
    body['manager_action_date_time'] = manager_action_date_time
    body['manager_action_message'] = manager_action_message
    body['manager_user_id'] = manager_user_id
    body['sender_date_time'] = sender_date_time
    body['sender_message'] = sender_message
    body['sender_user_id'] = sender_user_id
    body['state'] = state
    body['recipient_action_date_time'] = recipient_action_date_time
    body['recipient_action_message'] = recipient_action_message
    body['recipient_user_id'] = recipient_user_id
    body['sender_shift_id'] = sender_shift_id
    body['recipient_shift_id'] = recipient_shift_id
    return client.create_swap_shifts_change_requests(team_id=team_id,
                                                     body=body)


def teams_team_schedule_create_time_card(client,
                                         team_id,
                                         id_=None,
                                         created_date_time=None,
                                         last_modified_date_time=None,
                                         application=None,
                                         device=None,
                                         user=None,
                                         microsoft_graph_identity_application=None,
                                         microsoft_graph_identity_device=None,
                                         microsoft_graph_identity_user=None,
                                         breaks=None,
                                         confirmed_by=None,
                                         notes=None,
                                         state=None,
                                         user_id=None,
                                         microsoft_graph_time_card_entry_breaks=None,
                                         clock_in_event=None,
                                         clock_out_event=None,
                                         at_approved_location=None,
                                         date_time=None,
                                         microsoft_graph_item_body_notes=None,
                                         boolean_at_approved_location=None,
                                         microsoft_graph_time_card_event_date_time=None,
                                         notes1=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['breaks'] = breaks
    body['confirmed_by'] = confirmed_by
    body['notes'] = notes
    body['state'] = state
    body['user_id'] = user_id
    body['original_entry'] = {}
    body['original_entry']['breaks'] = microsoft_graph_time_card_entry_breaks
    body['original_entry']['clock_in_event'] = clock_in_event
    body['original_entry']['clock_out_event'] = clock_out_event
    body['clock_out_event'] = {}
    body['clock_out_event']['at_approved_location'] = at_approved_location
    body['clock_out_event']['date_time'] = date_time
    body['clock_out_event']['notes'] = microsoft_graph_item_body_notes
    body['clock_in_event'] = {}
    body['clock_in_event']['at_approved_location'] = boolean_at_approved_location
    body['clock_in_event']['date_time'] = microsoft_graph_time_card_event_date_time
    body['clock_in_event']['notes'] = notes1
    return client.create_time_cards(team_id=team_id,
                                    body=body)


def teams_team_schedule_create_time_off(client,
                                        team_id,
                                        id_=None,
                                        created_date_time=None,
                                        last_modified_date_time=None,
                                        application=None,
                                        device=None,
                                        user=None,
                                        microsoft_graph_identity_application=None,
                                        microsoft_graph_identity_device=None,
                                        microsoft_graph_identity_user=None,
                                        draft_time_off=None,
                                        is_staged_for_deletion=None,
                                        shared_time_off=None,
                                        user_id=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['draft_time_off'] = draft_time_off
    body['is_staged_for_deletion'] = is_staged_for_deletion
    body['shared_time_off'] = shared_time_off
    body['user_id'] = user_id
    return client.create_times_off(team_id=team_id,
                                   body=body)


def teams_team_schedule_create_time_off_reason(client,
                                               team_id,
                                               id_=None,
                                               created_date_time=None,
                                               last_modified_date_time=None,
                                               application=None,
                                               device=None,
                                               user=None,
                                               microsoft_graph_identity_application=None,
                                               microsoft_graph_identity_device=None,
                                               microsoft_graph_identity_user=None,
                                               display_name=None,
                                               icon_type=None,
                                               is_active=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['display_name'] = display_name
    body['icon_type'] = icon_type
    body['is_active'] = is_active
    return client.create_time_off_reasons(team_id=team_id,
                                          body=body)


def teams_team_schedule_create_time_off_request(client,
                                                team_id,
                                                id_=None,
                                                created_date_time=None,
                                                last_modified_date_time=None,
                                                application=None,
                                                device=None,
                                                user=None,
                                                microsoft_graph_identity_application=None,
                                                microsoft_graph_identity_device=None,
                                                microsoft_graph_identity_user=None,
                                                assigned_to=None,
                                                manager_action_date_time=None,
                                                manager_action_message=None,
                                                manager_user_id=None,
                                                sender_date_time=None,
                                                sender_message=None,
                                                sender_user_id=None,
                                                state=None,
                                                end_date_time=None,
                                                start_date_time=None,
                                                time_off_reason_id=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['assigned_to'] = assigned_to
    body['manager_action_date_time'] = manager_action_date_time
    body['manager_action_message'] = manager_action_message
    body['manager_user_id'] = manager_user_id
    body['sender_date_time'] = sender_date_time
    body['sender_message'] = sender_message
    body['sender_user_id'] = sender_user_id
    body['state'] = state
    body['end_date_time'] = end_date_time
    body['start_date_time'] = start_date_time
    body['time_off_reason_id'] = time_off_reason_id
    return client.create_time_off_requests(team_id=team_id,
                                           body=body)


def teams_team_schedule_delete_offer_shift_request(client,
                                                   team_id,
                                                   offer_shift_request_id,
                                                   if_match=None):
    return client.delete_offer_shift_requests(team_id=team_id,
                                              offer_shift_request_id=offer_shift_request_id,
                                              if_match=if_match)


def teams_team_schedule_delete_open_shift(client,
                                          team_id,
                                          open_shift_id,
                                          if_match=None):
    return client.delete_open_shifts(team_id=team_id,
                                     open_shift_id=open_shift_id,
                                     if_match=if_match)


def teams_team_schedule_delete_open_shift_change_request(client,
                                                         team_id,
                                                         open_shift_change_request_id,
                                                         if_match=None):
    return client.delete_open_shift_change_requests(team_id=team_id,
                                                    open_shift_change_request_id=open_shift_change_request_id,
                                                    if_match=if_match)


def teams_team_schedule_delete_scheduling_group(client,
                                                team_id,
                                                scheduling_group_id,
                                                if_match=None):
    return client.delete_scheduling_groups(team_id=team_id,
                                           scheduling_group_id=scheduling_group_id,
                                           if_match=if_match)


def teams_team_schedule_delete_shift(client,
                                     team_id,
                                     shift_id,
                                     if_match=None):
    return client.delete_shifts(team_id=team_id,
                                shift_id=shift_id,
                                if_match=if_match)


def teams_team_schedule_delete_swap_shift_change_request(client,
                                                         team_id,
                                                         swap_shifts_change_request_id,
                                                         if_match=None):
    return client.delete_swap_shifts_change_requests(team_id=team_id,
                                                     swap_shifts_change_request_id=swap_shifts_change_request_id,
                                                     if_match=if_match)


def teams_team_schedule_delete_time_card(client,
                                         team_id,
                                         time_card_id,
                                         if_match=None):
    return client.delete_time_cards(team_id=team_id,
                                    time_card_id=time_card_id,
                                    if_match=if_match)


def teams_team_schedule_delete_time_off(client,
                                        team_id,
                                        time_off_id,
                                        if_match=None):
    return client.delete_times_off(team_id=team_id,
                                   time_off_id=time_off_id,
                                   if_match=if_match)


def teams_team_schedule_delete_time_off_reason(client,
                                               team_id,
                                               time_off_reason_id,
                                               if_match=None):
    return client.delete_time_off_reasons(team_id=team_id,
                                          time_off_reason_id=time_off_reason_id,
                                          if_match=if_match)


def teams_team_schedule_delete_time_off_request(client,
                                                team_id,
                                                time_off_request_id,
                                                if_match=None):
    return client.delete_time_off_requests(team_id=team_id,
                                           time_off_request_id=time_off_request_id,
                                           if_match=if_match)


def teams_team_schedule_list_offer_shift_request(client,
                                                 team_id,
                                                 orderby=None,
                                                 select=None,
                                                 expand=None):
    return client.list_offer_shift_requests(team_id=team_id,
                                            orderby=orderby,
                                            select=select,
                                            expand=expand)


def teams_team_schedule_list_open_shift(client,
                                        team_id,
                                        orderby=None,
                                        select=None,
                                        expand=None):
    return client.list_open_shifts(team_id=team_id,
                                   orderby=orderby,
                                   select=select,
                                   expand=expand)


def teams_team_schedule_list_open_shift_change_request(client,
                                                       team_id,
                                                       orderby=None,
                                                       select=None,
                                                       expand=None):
    return client.list_open_shift_change_requests(team_id=team_id,
                                                  orderby=orderby,
                                                  select=select,
                                                  expand=expand)


def teams_team_schedule_list_scheduling_group(client,
                                              team_id,
                                              orderby=None,
                                              select=None,
                                              expand=None):
    return client.list_scheduling_groups(team_id=team_id,
                                         orderby=orderby,
                                         select=select,
                                         expand=expand)


def teams_team_schedule_list_shift(client,
                                   team_id,
                                   orderby=None,
                                   select=None,
                                   expand=None):
    return client.list_shifts(team_id=team_id,
                              orderby=orderby,
                              select=select,
                              expand=expand)


def teams_team_schedule_list_swap_shift_change_request(client,
                                                       team_id,
                                                       orderby=None,
                                                       select=None,
                                                       expand=None):
    return client.list_swap_shifts_change_requests(team_id=team_id,
                                                   orderby=orderby,
                                                   select=select,
                                                   expand=expand)


def teams_team_schedule_list_time_card(client,
                                       team_id,
                                       orderby=None,
                                       select=None,
                                       expand=None):
    return client.list_time_cards(team_id=team_id,
                                  orderby=orderby,
                                  select=select,
                                  expand=expand)


def teams_team_schedule_list_time_off(client,
                                      team_id,
                                      orderby=None,
                                      select=None,
                                      expand=None):
    return client.list_times_off(team_id=team_id,
                                 orderby=orderby,
                                 select=select,
                                 expand=expand)


def teams_team_schedule_list_time_off_reason(client,
                                             team_id,
                                             orderby=None,
                                             select=None,
                                             expand=None):
    return client.list_time_off_reasons(team_id=team_id,
                                        orderby=orderby,
                                        select=select,
                                        expand=expand)


def teams_team_schedule_list_time_off_request(client,
                                              team_id,
                                              orderby=None,
                                              select=None,
                                              expand=None):
    return client.list_time_off_requests(team_id=team_id,
                                         orderby=orderby,
                                         select=select,
                                         expand=expand)


def teams_team_schedule_share(client,
                              team_id,
                              notify_team=None,
                              start_date_time=None,
                              end_date_time=None):
    if notify_team is None:
        notify_team = False
    body = {}
    body['notify_team'] = False if notify_team is None else notify_team
    body['start_date_time'] = start_date_time
    body['end_date_time'] = end_date_time
    return client.share(team_id=team_id,
                        body=body)


def teams_team_schedule_show_offer_shift_request(client,
                                                 team_id,
                                                 offer_shift_request_id,
                                                 select=None,
                                                 expand=None):
    return client.get_offer_shift_requests(team_id=team_id,
                                           offer_shift_request_id=offer_shift_request_id,
                                           select=select,
                                           expand=expand)


def teams_team_schedule_show_open_shift(client,
                                        team_id,
                                        open_shift_id,
                                        select=None,
                                        expand=None):
    return client.get_open_shifts(team_id=team_id,
                                  open_shift_id=open_shift_id,
                                  select=select,
                                  expand=expand)


def teams_team_schedule_show_open_shift_change_request(client,
                                                       team_id,
                                                       open_shift_change_request_id,
                                                       select=None,
                                                       expand=None):
    return client.get_open_shift_change_requests(team_id=team_id,
                                                 open_shift_change_request_id=open_shift_change_request_id,
                                                 select=select,
                                                 expand=expand)


def teams_team_schedule_show_scheduling_group(client,
                                              team_id,
                                              scheduling_group_id,
                                              select=None,
                                              expand=None):
    return client.get_scheduling_groups(team_id=team_id,
                                        scheduling_group_id=scheduling_group_id,
                                        select=select,
                                        expand=expand)


def teams_team_schedule_show_shift(client,
                                   team_id,
                                   shift_id,
                                   select=None,
                                   expand=None):
    return client.get_shifts(team_id=team_id,
                             shift_id=shift_id,
                             select=select,
                             expand=expand)


def teams_team_schedule_show_swap_shift_change_request(client,
                                                       team_id,
                                                       swap_shifts_change_request_id,
                                                       select=None,
                                                       expand=None):
    return client.get_swap_shifts_change_requests(team_id=team_id,
                                                  swap_shifts_change_request_id=swap_shifts_change_request_id,
                                                  select=select,
                                                  expand=expand)


def teams_team_schedule_show_time_card(client,
                                       team_id,
                                       time_card_id,
                                       select=None,
                                       expand=None):
    return client.get_time_cards(team_id=team_id,
                                 time_card_id=time_card_id,
                                 select=select,
                                 expand=expand)


def teams_team_schedule_show_time_off(client,
                                      team_id,
                                      time_off_id,
                                      select=None,
                                      expand=None):
    return client.get_times_off(team_id=team_id,
                                time_off_id=time_off_id,
                                select=select,
                                expand=expand)


def teams_team_schedule_show_time_off_reason(client,
                                             team_id,
                                             time_off_reason_id,
                                             select=None,
                                             expand=None):
    return client.get_time_off_reasons(team_id=team_id,
                                       time_off_reason_id=time_off_reason_id,
                                       select=select,
                                       expand=expand)


def teams_team_schedule_show_time_off_request(client,
                                              team_id,
                                              time_off_request_id,
                                              select=None,
                                              expand=None):
    return client.get_time_off_requests(team_id=team_id,
                                        time_off_request_id=time_off_request_id,
                                        select=select,
                                        expand=expand)


def teams_team_schedule_update_offer_shift_request(client,
                                                   team_id,
                                                   offer_shift_request_id,
                                                   id_=None,
                                                   created_date_time=None,
                                                   last_modified_date_time=None,
                                                   application=None,
                                                   device=None,
                                                   user=None,
                                                   microsoft_graph_identity_application=None,
                                                   microsoft_graph_identity_device=None,
                                                   microsoft_graph_identity_user=None,
                                                   assigned_to=None,
                                                   manager_action_date_time=None,
                                                   manager_action_message=None,
                                                   manager_user_id=None,
                                                   sender_date_time=None,
                                                   sender_message=None,
                                                   sender_user_id=None,
                                                   state=None,
                                                   recipient_action_date_time=None,
                                                   recipient_action_message=None,
                                                   recipient_user_id=None,
                                                   sender_shift_id=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['assigned_to'] = assigned_to
    body['manager_action_date_time'] = manager_action_date_time
    body['manager_action_message'] = manager_action_message
    body['manager_user_id'] = manager_user_id
    body['sender_date_time'] = sender_date_time
    body['sender_message'] = sender_message
    body['sender_user_id'] = sender_user_id
    body['state'] = state
    body['recipient_action_date_time'] = recipient_action_date_time
    body['recipient_action_message'] = recipient_action_message
    body['recipient_user_id'] = recipient_user_id
    body['sender_shift_id'] = sender_shift_id
    return client.update_offer_shift_requests(team_id=team_id,
                                              offer_shift_request_id=offer_shift_request_id,
                                              body=body)


def teams_team_schedule_update_open_shift(client,
                                          team_id,
                                          open_shift_id,
                                          id_=None,
                                          created_date_time=None,
                                          last_modified_date_time=None,
                                          application=None,
                                          device=None,
                                          user=None,
                                          microsoft_graph_identity_application=None,
                                          microsoft_graph_identity_device=None,
                                          microsoft_graph_identity_user=None,
                                          draft_open_shift=None,
                                          is_staged_for_deletion=None,
                                          scheduling_group_id=None,
                                          shared_open_shift=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['draft_open_shift'] = draft_open_shift
    body['is_staged_for_deletion'] = is_staged_for_deletion
    body['scheduling_group_id'] = scheduling_group_id
    body['shared_open_shift'] = shared_open_shift
    return client.update_open_shifts(team_id=team_id,
                                     open_shift_id=open_shift_id,
                                     body=body)


def teams_team_schedule_update_open_shift_change_request(client,
                                                         team_id,
                                                         open_shift_change_request_id,
                                                         id_=None,
                                                         created_date_time=None,
                                                         last_modified_date_time=None,
                                                         application=None,
                                                         device=None,
                                                         user=None,
                                                         microsoft_graph_identity_application=None,
                                                         microsoft_graph_identity_device=None,
                                                         microsoft_graph_identity_user=None,
                                                         assigned_to=None,
                                                         manager_action_date_time=None,
                                                         manager_action_message=None,
                                                         manager_user_id=None,
                                                         sender_date_time=None,
                                                         sender_message=None,
                                                         sender_user_id=None,
                                                         state=None,
                                                         open_shift_id=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['assigned_to'] = assigned_to
    body['manager_action_date_time'] = manager_action_date_time
    body['manager_action_message'] = manager_action_message
    body['manager_user_id'] = manager_user_id
    body['sender_date_time'] = sender_date_time
    body['sender_message'] = sender_message
    body['sender_user_id'] = sender_user_id
    body['state'] = state
    body['open_shift_id'] = open_shift_id
    return client.update_open_shift_change_requests(team_id=team_id,
                                                    open_shift_change_request_id=open_shift_change_request_id,
                                                    body=body)


def teams_team_schedule_update_scheduling_group(client,
                                                team_id,
                                                scheduling_group_id,
                                                id_=None,
                                                created_date_time=None,
                                                last_modified_date_time=None,
                                                application=None,
                                                device=None,
                                                user=None,
                                                microsoft_graph_identity_application=None,
                                                microsoft_graph_identity_device=None,
                                                microsoft_graph_identity_user=None,
                                                display_name=None,
                                                is_active=None,
                                                user_ids=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['display_name'] = display_name
    body['is_active'] = is_active
    body['user_ids'] = user_ids
    return client.update_scheduling_groups(team_id=team_id,
                                           scheduling_group_id=scheduling_group_id,
                                           body=body)


def teams_team_schedule_update_shift(client,
                                     team_id,
                                     shift_id,
                                     id_=None,
                                     created_date_time=None,
                                     last_modified_date_time=None,
                                     application=None,
                                     device=None,
                                     user=None,
                                     microsoft_graph_identity_application=None,
                                     microsoft_graph_identity_device=None,
                                     microsoft_graph_identity_user=None,
                                     is_staged_for_deletion=None,
                                     scheduling_group_id=None,
                                     user_id=None,
                                     end_date_time=None,
                                     start_date_time=None,
                                     theme=None,
                                     activities=None,
                                     display_name=None,
                                     notes=None,
                                     microsoft_graph_schedule_entity_end_date_time_end_date_time=None,
                                     microsoft_graph_schedule_entity_start_date_time_start_date_time=None,
                                     microsoft_graph_schedule_entity_theme=None,
                                     microsoft_graph_shift_item_activities=None,
                                     microsoft_graph_shift_item_display_name=None,
                                     microsoft_graph_shift_item_notes=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['is_staged_for_deletion'] = is_staged_for_deletion
    body['scheduling_group_id'] = scheduling_group_id
    body['user_id'] = user_id
    body['shared_shift'] = {}
    body['shared_shift']['end_date_time'] = end_date_time
    body['shared_shift']['start_date_time'] = start_date_time
    body['shared_shift']['theme'] = theme
    body['shared_shift']['activities'] = activities
    body['shared_shift']['display_name'] = display_name
    body['shared_shift']['notes'] = notes
    body['draft_shift'] = {}
    body['draft_shift']['end_date_time'] = microsoft_graph_schedule_entity_end_date_time_end_date_time
    body['draft_shift']['start_date_time'] = microsoft_graph_schedule_entity_start_date_time_start_date_time
    body['draft_shift']['theme'] = microsoft_graph_schedule_entity_theme
    body['draft_shift']['activities'] = microsoft_graph_shift_item_activities
    body['draft_shift']['display_name'] = microsoft_graph_shift_item_display_name
    body['draft_shift']['notes'] = microsoft_graph_shift_item_notes
    return client.update_shifts(team_id=team_id,
                                shift_id=shift_id,
                                body=body)


def teams_team_schedule_update_swap_shift_change_request(client,
                                                         team_id,
                                                         swap_shifts_change_request_id,
                                                         id_=None,
                                                         created_date_time=None,
                                                         last_modified_date_time=None,
                                                         application=None,
                                                         device=None,
                                                         user=None,
                                                         microsoft_graph_identity_application=None,
                                                         microsoft_graph_identity_device=None,
                                                         microsoft_graph_identity_user=None,
                                                         assigned_to=None,
                                                         manager_action_date_time=None,
                                                         manager_action_message=None,
                                                         manager_user_id=None,
                                                         sender_date_time=None,
                                                         sender_message=None,
                                                         sender_user_id=None,
                                                         state=None,
                                                         recipient_action_date_time=None,
                                                         recipient_action_message=None,
                                                         recipient_user_id=None,
                                                         sender_shift_id=None,
                                                         recipient_shift_id=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['assigned_to'] = assigned_to
    body['manager_action_date_time'] = manager_action_date_time
    body['manager_action_message'] = manager_action_message
    body['manager_user_id'] = manager_user_id
    body['sender_date_time'] = sender_date_time
    body['sender_message'] = sender_message
    body['sender_user_id'] = sender_user_id
    body['state'] = state
    body['recipient_action_date_time'] = recipient_action_date_time
    body['recipient_action_message'] = recipient_action_message
    body['recipient_user_id'] = recipient_user_id
    body['sender_shift_id'] = sender_shift_id
    body['recipient_shift_id'] = recipient_shift_id
    return client.update_swap_shifts_change_requests(team_id=team_id,
                                                     swap_shifts_change_request_id=swap_shifts_change_request_id,
                                                     body=body)


def teams_team_schedule_update_time_card(client,
                                         team_id,
                                         time_card_id,
                                         id_=None,
                                         created_date_time=None,
                                         last_modified_date_time=None,
                                         application=None,
                                         device=None,
                                         user=None,
                                         microsoft_graph_identity_application=None,
                                         microsoft_graph_identity_device=None,
                                         microsoft_graph_identity_user=None,
                                         breaks=None,
                                         confirmed_by=None,
                                         notes=None,
                                         state=None,
                                         user_id=None,
                                         microsoft_graph_time_card_entry_breaks=None,
                                         clock_in_event=None,
                                         clock_out_event=None,
                                         at_approved_location=None,
                                         date_time=None,
                                         microsoft_graph_item_body_notes=None,
                                         boolean_at_approved_location=None,
                                         microsoft_graph_time_card_event_date_time=None,
                                         notes1=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['breaks'] = breaks
    body['confirmed_by'] = confirmed_by
    body['notes'] = notes
    body['state'] = state
    body['user_id'] = user_id
    body['original_entry'] = {}
    body['original_entry']['breaks'] = microsoft_graph_time_card_entry_breaks
    body['original_entry']['clock_in_event'] = clock_in_event
    body['original_entry']['clock_out_event'] = clock_out_event
    body['clock_out_event'] = {}
    body['clock_out_event']['at_approved_location'] = at_approved_location
    body['clock_out_event']['date_time'] = date_time
    body['clock_out_event']['notes'] = microsoft_graph_item_body_notes
    body['clock_in_event'] = {}
    body['clock_in_event']['at_approved_location'] = boolean_at_approved_location
    body['clock_in_event']['date_time'] = microsoft_graph_time_card_event_date_time
    body['clock_in_event']['notes'] = notes1
    return client.update_time_cards(team_id=team_id,
                                    time_card_id=time_card_id,
                                    body=body)


def teams_team_schedule_update_time_off(client,
                                        team_id,
                                        time_off_id,
                                        id_=None,
                                        created_date_time=None,
                                        last_modified_date_time=None,
                                        application=None,
                                        device=None,
                                        user=None,
                                        microsoft_graph_identity_application=None,
                                        microsoft_graph_identity_device=None,
                                        microsoft_graph_identity_user=None,
                                        draft_time_off=None,
                                        is_staged_for_deletion=None,
                                        shared_time_off=None,
                                        user_id=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['draft_time_off'] = draft_time_off
    body['is_staged_for_deletion'] = is_staged_for_deletion
    body['shared_time_off'] = shared_time_off
    body['user_id'] = user_id
    return client.update_times_off(team_id=team_id,
                                   time_off_id=time_off_id,
                                   body=body)


def teams_team_schedule_update_time_off_reason(client,
                                               team_id,
                                               time_off_reason_id,
                                               id_=None,
                                               created_date_time=None,
                                               last_modified_date_time=None,
                                               application=None,
                                               device=None,
                                               user=None,
                                               microsoft_graph_identity_application=None,
                                               microsoft_graph_identity_device=None,
                                               microsoft_graph_identity_user=None,
                                               display_name=None,
                                               icon_type=None,
                                               is_active=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['display_name'] = display_name
    body['icon_type'] = icon_type
    body['is_active'] = is_active
    return client.update_time_off_reasons(team_id=team_id,
                                          time_off_reason_id=time_off_reason_id,
                                          body=body)


def teams_team_schedule_update_time_off_request(client,
                                                team_id,
                                                time_off_request_id,
                                                id_=None,
                                                created_date_time=None,
                                                last_modified_date_time=None,
                                                application=None,
                                                device=None,
                                                user=None,
                                                microsoft_graph_identity_application=None,
                                                microsoft_graph_identity_device=None,
                                                microsoft_graph_identity_user=None,
                                                assigned_to=None,
                                                manager_action_date_time=None,
                                                manager_action_message=None,
                                                manager_user_id=None,
                                                sender_date_time=None,
                                                sender_message=None,
                                                sender_user_id=None,
                                                state=None,
                                                end_date_time=None,
                                                start_date_time=None,
                                                time_off_reason_id=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['assigned_to'] = assigned_to
    body['manager_action_date_time'] = manager_action_date_time
    body['manager_action_message'] = manager_action_message
    body['manager_user_id'] = manager_user_id
    body['sender_date_time'] = sender_date_time
    body['sender_message'] = sender_message
    body['sender_user_id'] = sender_user_id
    body['state'] = state
    body['end_date_time'] = end_date_time
    body['start_date_time'] = start_date_time
    body['time_off_reason_id'] = time_off_reason_id
    return client.update_time_off_requests(team_id=team_id,
                                           time_off_request_id=time_off_request_id,
                                           body=body)


def teams_team_schedule_time_card_clock_in(client,
                                           team_id,
                                           at_approved_location=None,
                                           on_behalf_of_user_id=None,
                                           notes=None):
    if at_approved_location is None:
        at_approved_location = False
    body = {}
    body['at_approved_location'] = False if at_approved_location is None else at_approved_location
    body['on_behalf_of_user_id'] = on_behalf_of_user_id
    body['notes'] = notes
    return client.clock_in(team_id=team_id,
                           body=body)


def teams_team_schedule_time_card_clock_out(client,
                                            team_id,
                                            time_card_id,
                                            at_approved_location=None,
                                            notes=None):
    if at_approved_location is None:
        at_approved_location = False
    body = {}
    body['at_approved_location'] = False if at_approved_location is None else at_approved_location
    body['notes'] = notes
    return client.clock_out(team_id=team_id,
                            time_card_id=time_card_id,
                            body=body)


def teams_team_schedule_time_card_confirm(client,
                                          team_id,
                                          time_card_id):
    return client.confirm(team_id=team_id,
                          time_card_id=time_card_id)


def teams_team_schedule_time_card_end_break(client,
                                            team_id,
                                            time_card_id,
                                            at_approved_location=None,
                                            notes=None):
    if at_approved_location is None:
        at_approved_location = False
    body = {}
    body['at_approved_location'] = False if at_approved_location is None else at_approved_location
    body['notes'] = notes
    return client.end_break(team_id=team_id,
                            time_card_id=time_card_id,
                            body=body)


def teams_team_schedule_time_card_start_break(client,
                                              team_id,
                                              time_card_id,
                                              at_approved_location=None,
                                              notes=None):
    if at_approved_location is None:
        at_approved_location = False
    body = {}
    body['at_approved_location'] = False if at_approved_location is None else at_approved_location
    body['notes'] = notes
    return client.start_break(team_id=team_id,
                              time_card_id=time_card_id,
                              body=body)


def teams_teamwork_teamwork_show_teamwork(client,
                                          select=None,
                                          expand=None):
    return client.get_teamwork(select=select,
                               expand=expand)


def teams_teamwork_teamwork_update_teamwork(client,
                                            id_=None,
                                            workforce_integrations=None):
    body = {}
    body['id'] = id_
    body['workforce_integrations'] = workforce_integrations
    return client.update_teamwork(body=body)


def teams_teamwork_create_workforce_integration(client,
                                                id_=None,
                                                created_date_time=None,
                                                last_modified_date_time=None,
                                                application=None,
                                                device=None,
                                                user=None,
                                                microsoft_graph_identity_application=None,
                                                microsoft_graph_identity_device=None,
                                                microsoft_graph_identity_user=None,
                                                api_version=None,
                                                display_name=None,
                                                eligibility_filtering_enabled_entities=None,
                                                encryption=None,
                                                is_active=None,
                                                supported_entities=None,
                                                supports=None,
                                                url=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['api_version'] = api_version
    body['display_name'] = display_name
    body['eligibility_filtering_enabled_entities'] = eligibility_filtering_enabled_entities
    body['encryption'] = encryption
    body['is_active'] = is_active
    body['supported_entities'] = supported_entities
    body['supports'] = supports
    body['url'] = url
    return client.create_workforce_integrations(body=body)


def teams_teamwork_delete_workforce_integration(client,
                                                workforce_integration_id,
                                                if_match=None):
    return client.delete_workforce_integrations(workforce_integration_id=workforce_integration_id,
                                                if_match=if_match)


def teams_teamwork_list_workforce_integration(client,
                                              orderby=None,
                                              select=None,
                                              expand=None):
    return client.list_workforce_integrations(orderby=orderby,
                                              select=select,
                                              expand=expand)


def teams_teamwork_show_workforce_integration(client,
                                              workforce_integration_id,
                                              select=None,
                                              expand=None):
    return client.get_workforce_integrations(workforce_integration_id=workforce_integration_id,
                                             select=select,
                                             expand=expand)


def teams_teamwork_update_workforce_integration(client,
                                                workforce_integration_id,
                                                id_=None,
                                                created_date_time=None,
                                                last_modified_date_time=None,
                                                application=None,
                                                device=None,
                                                user=None,
                                                microsoft_graph_identity_application=None,
                                                microsoft_graph_identity_device=None,
                                                microsoft_graph_identity_user=None,
                                                api_version=None,
                                                display_name=None,
                                                eligibility_filtering_enabled_entities=None,
                                                encryption=None,
                                                is_active=None,
                                                supported_entities=None,
                                                supports=None,
                                                url=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['last_modified_by'] = {}
    body['last_modified_by']['application'] = application
    body['last_modified_by']['device'] = device
    body['last_modified_by']['user'] = user
    body['created_by'] = {}
    body['created_by']['application'] = microsoft_graph_identity_application
    body['created_by']['device'] = microsoft_graph_identity_device
    body['created_by']['user'] = microsoft_graph_identity_user
    body['api_version'] = api_version
    body['display_name'] = display_name
    body['eligibility_filtering_enabled_entities'] = eligibility_filtering_enabled_entities
    body['encryption'] = encryption
    body['is_active'] = is_active
    body['supported_entities'] = supported_entities
    body['supports'] = supports
    body['url'] = url
    return client.update_workforce_integrations(workforce_integration_id=workforce_integration_id,
                                                body=body)


def teams_user_create_chat(client,
                           user_id,
                           id_=None,
                           created_date_time=None,
                           last_updated_date_time=None,
                           topic=None,
                           installed_apps=None,
                           members=None,
                           messages=None,
                           tabs=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_updated_date_time'] = last_updated_date_time
    body['topic'] = topic
    body['installed_apps'] = installed_apps
    body['members'] = members
    body['messages'] = messages
    body['tabs'] = tabs
    return client.create_chats(user_id=user_id,
                               body=body)


def teams_user_create_joined_team(client,
                                  user_id,
                                  id_=None,
                                  classification=None,
                                  created_date_time=None,
                                  description=None,
                                  display_name=None,
                                  fun_settings=None,
                                  guest_settings=None,
                                  internal_id=None,
                                  is_archived=None,
                                  is_membership_limited_to_owners=None,
                                  member_settings=None,
                                  messaging_settings=None,
                                  specialization=None,
                                  visibility=None,
                                  web_url=None,
                                  channels=None,
                                  group=None,
                                  installed_apps=None,
                                  members=None,
                                  operations=None,
                                  owners=None,
                                  photo=None,
                                  primary_channel=None,
                                  microsoft_graph_entity_id=None,
                                  id1=None,
                                  enabled=None,
                                  offer_shift_requests_enabled=None,
                                  open_shifts_enabled=None,
                                  provision_status=None,
                                  provision_status_code=None,
                                  swap_shifts_requests_enabled=None,
                                  time_clock_enabled=None,
                                  time_off_requests_enabled=None,
                                  time_zone=None,
                                  workforce_integration_ids=None,
                                  offer_shift_requests=None,
                                  open_shift_change_requests=None,
                                  open_shifts=None,
                                  scheduling_groups=None,
                                  shifts=None,
                                  swap_shifts_change_requests=None,
                                  time_cards=None,
                                  time_off_reasons=None,
                                  time_off_requests=None,
                                  times_off=None,
                                  approved_location=None,
                                  show_in_teams_search_and_suggestions=None):
    body = {}
    body['id'] = id_
    body['classification'] = classification
    body['created_date_time'] = created_date_time
    body['description'] = description
    body['display_name'] = display_name
    body['fun_settings'] = fun_settings
    body['guest_settings'] = guest_settings
    body['internal_id'] = internal_id
    body['is_archived'] = is_archived
    body['is_membership_limited_to_owners'] = is_membership_limited_to_owners
    body['member_settings'] = member_settings
    body['messaging_settings'] = messaging_settings
    body['specialization'] = specialization
    body['visibility'] = visibility
    body['web_url'] = web_url
    body['channels'] = channels
    body['group'] = group
    body['installed_apps'] = installed_apps
    body['members'] = members
    body['operations'] = operations
    body['owners'] = owners
    body['photo'] = photo
    body['primary_channel'] = primary_channel
    body['template'] = {}
    body['template']['id'] = microsoft_graph_entity_id
    body['schedule'] = {}
    body['schedule']['id'] = id1
    body['schedule']['enabled'] = enabled
    body['schedule']['offer_shift_requests_enabled'] = offer_shift_requests_enabled
    body['schedule']['open_shifts_enabled'] = open_shifts_enabled
    body['schedule']['provision_status'] = provision_status
    body['schedule']['provision_status_code'] = provision_status_code
    body['schedule']['swap_shifts_requests_enabled'] = swap_shifts_requests_enabled
    body['schedule']['time_clock_enabled'] = time_clock_enabled
    body['schedule']['time_off_requests_enabled'] = time_off_requests_enabled
    body['schedule']['time_zone'] = time_zone
    body['schedule']['workforce_integration_ids'] = workforce_integration_ids
    body['schedule']['offer_shift_requests'] = offer_shift_requests
    body['schedule']['open_shift_change_requests'] = open_shift_change_requests
    body['schedule']['open_shifts'] = open_shifts
    body['schedule']['scheduling_groups'] = scheduling_groups
    body['schedule']['shifts'] = shifts
    body['schedule']['swap_shifts_change_requests'] = swap_shifts_change_requests
    body['schedule']['time_cards'] = time_cards
    body['schedule']['time_off_reasons'] = time_off_reasons
    body['schedule']['time_off_requests'] = time_off_requests
    body['schedule']['times_off'] = times_off
    body['schedule']['time_clock_settings'] = {}
    body['schedule']['time_clock_settings']['approved_location'] = approved_location
    body['discovery_settings'] = {}
    body['discovery_settings']['show_in_teams_search_and_suggestions'] = show_in_teams_search_and_suggestions
    return client.create_joined_teams(user_id=user_id,
                                      body=body)


def teams_user_delete_chat(client,
                           user_id,
                           chat_id,
                           if_match=None):
    return client.delete_chats(user_id=user_id,
                               chat_id=chat_id,
                               if_match=if_match)


def teams_user_delete_joined_team(client,
                                  user_id,
                                  team_id,
                                  if_match=None):
    return client.delete_joined_teams(user_id=user_id,
                                      team_id=team_id,
                                      if_match=if_match)


def teams_user_delete_teamwork(client,
                               user_id,
                               if_match=None):
    return client.delete_teamwork(user_id=user_id,
                                  if_match=if_match)


def teams_user_list_chat(client,
                         user_id,
                         orderby=None,
                         select=None,
                         expand=None):
    return client.list_chats(user_id=user_id,
                             orderby=orderby,
                             select=select,
                             expand=expand)


def teams_user_list_joined_team(client,
                                user_id,
                                orderby=None,
                                select=None,
                                expand=None):
    return client.list_joined_teams(user_id=user_id,
                                    orderby=orderby,
                                    select=select,
                                    expand=expand)


def teams_user_show_chat(client,
                         user_id,
                         chat_id,
                         select=None,
                         expand=None):
    return client.get_chats(user_id=user_id,
                            chat_id=chat_id,
                            select=select,
                            expand=expand)


def teams_user_show_joined_team(client,
                                user_id,
                                team_id,
                                select=None,
                                expand=None):
    return client.get_joined_teams(user_id=user_id,
                                   team_id=team_id,
                                   select=select,
                                   expand=expand)


def teams_user_show_teamwork(client,
                             user_id,
                             select=None,
                             expand=None):
    return client.get_teamwork(user_id=user_id,
                               select=select,
                               expand=expand)


def teams_user_update_chat(client,
                           user_id,
                           chat_id,
                           id_=None,
                           created_date_time=None,
                           last_updated_date_time=None,
                           topic=None,
                           installed_apps=None,
                           members=None,
                           messages=None,
                           tabs=None):
    body = {}
    body['id'] = id_
    body['created_date_time'] = created_date_time
    body['last_updated_date_time'] = last_updated_date_time
    body['topic'] = topic
    body['installed_apps'] = installed_apps
    body['members'] = members
    body['messages'] = messages
    body['tabs'] = tabs
    return client.update_chats(user_id=user_id,
                               chat_id=chat_id,
                               body=body)


def teams_user_update_joined_team(client,
                                  user_id,
                                  team_id,
                                  id_=None,
                                  classification=None,
                                  created_date_time=None,
                                  description=None,
                                  display_name=None,
                                  fun_settings=None,
                                  guest_settings=None,
                                  internal_id=None,
                                  is_archived=None,
                                  is_membership_limited_to_owners=None,
                                  member_settings=None,
                                  messaging_settings=None,
                                  specialization=None,
                                  visibility=None,
                                  web_url=None,
                                  channels=None,
                                  group=None,
                                  installed_apps=None,
                                  members=None,
                                  operations=None,
                                  owners=None,
                                  photo=None,
                                  primary_channel=None,
                                  microsoft_graph_entity_id=None,
                                  id1=None,
                                  enabled=None,
                                  offer_shift_requests_enabled=None,
                                  open_shifts_enabled=None,
                                  provision_status=None,
                                  provision_status_code=None,
                                  swap_shifts_requests_enabled=None,
                                  time_clock_enabled=None,
                                  time_off_requests_enabled=None,
                                  time_zone=None,
                                  workforce_integration_ids=None,
                                  offer_shift_requests=None,
                                  open_shift_change_requests=None,
                                  open_shifts=None,
                                  scheduling_groups=None,
                                  shifts=None,
                                  swap_shifts_change_requests=None,
                                  time_cards=None,
                                  time_off_reasons=None,
                                  time_off_requests=None,
                                  times_off=None,
                                  approved_location=None,
                                  show_in_teams_search_and_suggestions=None):
    body = {}
    body['id'] = id_
    body['classification'] = classification
    body['created_date_time'] = created_date_time
    body['description'] = description
    body['display_name'] = display_name
    body['fun_settings'] = fun_settings
    body['guest_settings'] = guest_settings
    body['internal_id'] = internal_id
    body['is_archived'] = is_archived
    body['is_membership_limited_to_owners'] = is_membership_limited_to_owners
    body['member_settings'] = member_settings
    body['messaging_settings'] = messaging_settings
    body['specialization'] = specialization
    body['visibility'] = visibility
    body['web_url'] = web_url
    body['channels'] = channels
    body['group'] = group
    body['installed_apps'] = installed_apps
    body['members'] = members
    body['operations'] = operations
    body['owners'] = owners
    body['photo'] = photo
    body['primary_channel'] = primary_channel
    body['template'] = {}
    body['template']['id'] = microsoft_graph_entity_id
    body['schedule'] = {}
    body['schedule']['id'] = id1
    body['schedule']['enabled'] = enabled
    body['schedule']['offer_shift_requests_enabled'] = offer_shift_requests_enabled
    body['schedule']['open_shifts_enabled'] = open_shifts_enabled
    body['schedule']['provision_status'] = provision_status
    body['schedule']['provision_status_code'] = provision_status_code
    body['schedule']['swap_shifts_requests_enabled'] = swap_shifts_requests_enabled
    body['schedule']['time_clock_enabled'] = time_clock_enabled
    body['schedule']['time_off_requests_enabled'] = time_off_requests_enabled
    body['schedule']['time_zone'] = time_zone
    body['schedule']['workforce_integration_ids'] = workforce_integration_ids
    body['schedule']['offer_shift_requests'] = offer_shift_requests
    body['schedule']['open_shift_change_requests'] = open_shift_change_requests
    body['schedule']['open_shifts'] = open_shifts
    body['schedule']['scheduling_groups'] = scheduling_groups
    body['schedule']['shifts'] = shifts
    body['schedule']['swap_shifts_change_requests'] = swap_shifts_change_requests
    body['schedule']['time_cards'] = time_cards
    body['schedule']['time_off_reasons'] = time_off_reasons
    body['schedule']['time_off_requests'] = time_off_requests
    body['schedule']['times_off'] = times_off
    body['schedule']['time_clock_settings'] = {}
    body['schedule']['time_clock_settings']['approved_location'] = approved_location
    body['discovery_settings'] = {}
    body['discovery_settings']['show_in_teams_search_and_suggestions'] = show_in_teams_search_and_suggestions
    return client.update_joined_teams(user_id=user_id,
                                      team_id=team_id,
                                      body=body)


def teams_user_update_teamwork(client,
                               user_id,
                               id_=None,
                               installed_apps=None):
    body = {}
    body['id'] = id_
    body['installed_apps'] = installed_apps
    return client.update_teamwork(user_id=user_id,
                                  body=body)


def teams_user_teamwork_create_installed_app(client,
                                             user_id,
                                             id_=None,
                                             microsoft_graph_entity_id=None,
                                             azure_ad_app_id=None,
                                             description=None,
                                             display_name=None,
                                             last_modified_date_time=None,
                                             publishing_state=None,
                                             shortdescription=None,
                                             teams_app_id=None,
                                             version=None,
                                             application=None,
                                             device=None,
                                             user=None,
                                             id1=None,
                                             microsoft_graph_teams_app_display_name=None,
                                             distribution_method=None,
                                             external_id=None,
                                             app_definitions=None,
                                             id2=None,
                                             created_date_time=None,
                                             last_updated_date_time=None,
                                             topic=None,
                                             installed_apps=None,
                                             members=None,
                                             messages=None,
                                             tabs=None):
    body = {}
    body['id'] = id_
    body['teams_app_definition'] = {}
    body['teams_app_definition']['id'] = microsoft_graph_entity_id
    body['teams_app_definition']['azure_ad_app_id'] = azure_ad_app_id
    body['teams_app_definition']['description'] = description
    body['teams_app_definition']['display_name'] = display_name
    body['teams_app_definition']['last_modified_date_time'] = last_modified_date_time
    body['teams_app_definition']['publishing_state'] = publishing_state
    body['teams_app_definition']['shortdescription'] = shortdescription
    body['teams_app_definition']['teams_app_id'] = teams_app_id
    body['teams_app_definition']['version'] = version
    body['teams_app_definition']['created_by'] = {}
    body['teams_app_definition']['created_by']['application'] = application
    body['teams_app_definition']['created_by']['device'] = device
    body['teams_app_definition']['created_by']['user'] = user
    body['teams_app'] = {}
    body['teams_app']['id'] = id1
    body['teams_app']['display_name'] = microsoft_graph_teams_app_display_name
    body['teams_app']['distribution_method'] = distribution_method
    body['teams_app']['external_id'] = external_id
    body['teams_app']['app_definitions'] = app_definitions
    body['chat'] = {}
    body['chat']['id'] = id2
    body['chat']['created_date_time'] = created_date_time
    body['chat']['last_updated_date_time'] = last_updated_date_time
    body['chat']['topic'] = topic
    body['chat']['installed_apps'] = installed_apps
    body['chat']['members'] = members
    body['chat']['messages'] = messages
    body['chat']['tabs'] = tabs
    return client.create_installed_apps(user_id=user_id,
                                        body=body)


def teams_user_teamwork_delete_installed_app(client,
                                             user_id,
                                             user_scope_teams_app_installation_id,
                                             if_match=None):
    return client.delete_installed_apps(user_id=user_id,
                                        user_scope_teams_app_installation_id=user_scope_teams_app_installation_id,
                                        if_match=if_match)


def teams_user_teamwork_list_installed_app(client,
                                           user_id,
                                           orderby=None,
                                           select=None,
                                           expand=None):
    return client.list_installed_apps(user_id=user_id,
                                      orderby=orderby,
                                      select=select,
                                      expand=expand)


def teams_user_teamwork_show_installed_app(client,
                                           user_id,
                                           user_scope_teams_app_installation_id,
                                           select=None,
                                           expand=None):
    return client.get_installed_apps(user_id=user_id,
                                     user_scope_teams_app_installation_id=user_scope_teams_app_installation_id,
                                     select=select,
                                     expand=expand)


def teams_user_teamwork_update_installed_app(client,
                                             user_id,
                                             user_scope_teams_app_installation_id,
                                             id_=None,
                                             microsoft_graph_entity_id=None,
                                             azure_ad_app_id=None,
                                             description=None,
                                             display_name=None,
                                             last_modified_date_time=None,
                                             publishing_state=None,
                                             shortdescription=None,
                                             teams_app_id=None,
                                             version=None,
                                             application=None,
                                             device=None,
                                             user=None,
                                             id1=None,
                                             microsoft_graph_teams_app_display_name=None,
                                             distribution_method=None,
                                             external_id=None,
                                             app_definitions=None,
                                             id2=None,
                                             created_date_time=None,
                                             last_updated_date_time=None,
                                             topic=None,
                                             installed_apps=None,
                                             members=None,
                                             messages=None,
                                             tabs=None):
    body = {}
    body['id'] = id_
    body['teams_app_definition'] = {}
    body['teams_app_definition']['id'] = microsoft_graph_entity_id
    body['teams_app_definition']['azure_ad_app_id'] = azure_ad_app_id
    body['teams_app_definition']['description'] = description
    body['teams_app_definition']['display_name'] = display_name
    body['teams_app_definition']['last_modified_date_time'] = last_modified_date_time
    body['teams_app_definition']['publishing_state'] = publishing_state
    body['teams_app_definition']['shortdescription'] = shortdescription
    body['teams_app_definition']['teams_app_id'] = teams_app_id
    body['teams_app_definition']['version'] = version
    body['teams_app_definition']['created_by'] = {}
    body['teams_app_definition']['created_by']['application'] = application
    body['teams_app_definition']['created_by']['device'] = device
    body['teams_app_definition']['created_by']['user'] = user
    body['teams_app'] = {}
    body['teams_app']['id'] = id1
    body['teams_app']['display_name'] = microsoft_graph_teams_app_display_name
    body['teams_app']['distribution_method'] = distribution_method
    body['teams_app']['external_id'] = external_id
    body['teams_app']['app_definitions'] = app_definitions
    body['chat'] = {}
    body['chat']['id'] = id2
    body['chat']['created_date_time'] = created_date_time
    body['chat']['last_updated_date_time'] = last_updated_date_time
    body['chat']['topic'] = topic
    body['chat']['installed_apps'] = installed_apps
    body['chat']['members'] = members
    body['chat']['messages'] = messages
    body['chat']['tabs'] = tabs
    return client.update_installed_apps(user_id=user_id,
                                        user_scope_teams_app_installation_id=user_scope_teams_app_installation_id,
                                        body=body)


def teams_user_teamwork_installed_app_delete_ref_chat(client,
                                                      user_id,
                                                      user_scope_teams_app_installation_id,
                                                      if_match=None):
    return client.delete_ref_chat(user_id=user_id,
                                  user_scope_teams_app_installation_id=user_scope_teams_app_installation_id,
                                  if_match=if_match)


def teams_user_teamwork_installed_app_set_ref_chat(client,
                                                   user_id,
                                                   user_scope_teams_app_installation_id,
                                                   body):
    return client.set_ref_chat(user_id=user_id,
                               user_scope_teams_app_installation_id=user_scope_teams_app_installation_id,
                               body=body)


def teams_user_teamwork_installed_app_show_chat(client,
                                                user_id,
                                                user_scope_teams_app_installation_id,
                                                select=None,
                                                expand=None):
    return client.get_chat(user_id=user_id,
                           user_scope_teams_app_installation_id=user_scope_teams_app_installation_id,
                           select=select,
                           expand=expand)


def teams_user_teamwork_installed_app_show_ref_chat(client,
                                                    user_id,
                                                    user_scope_teams_app_installation_id):
    return client.get_ref_chat(user_id=user_id,
                               user_scope_teams_app_installation_id=user_scope_teams_app_installation_id)
