# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import (
    tags_type,
    get_three_state_flag
)
from msgraph.cli.core.commands.validators import validate_file_or_dict
from azext_applications_v1_0.action import (
    AddApplicationsApplicationAppRoles,
    AddInfo,
    AddApplicationsApplicationKeyCredentials,
    AddParentalControlSettings,
    AddApplicationsApplicationPasswordCredentials,
    AddPublicClient,
    AddCreatedOnBehalfOf,
    AddExtensionProperties,
    AddApplicationsApplicationHomeRealmDiscoveryPolicies,
    AddApplicationsApplicationOwners,
    AddApplicationsApplicationTokenIssuancePolicies,
    AddApplicationsApplicationTokenLifetimePolicies,
    AddImplicitGrantSettings,
    AddAccessToken,
    AddIdToken,
    AddSaml2Token,
    AddApplicationsApplicationOauth2PermissionScopes,
    AddPreAuthorizedApplications,
    AddKeyCredential,
    AddPasswordCredential,
    AddServiceprincipalsServiceprincipalAppRoles,
    AddServiceprincipalsServiceprincipalKeyCredentials,
    AddServiceprincipalsServiceprincipalOauth2PermissionScopes,
    AddServiceprincipalsServiceprincipalPasswordCredentials,
    AddAppRoleAssignedTo,
    AddAppRoleAssignments,
    AddClaimsMappingPolicies,
    AddCreatedObjects,
    AddEndpoints,
    AddServiceprincipalsServiceprincipalHomeRealmDiscoveryPolicies,
    AddMemberOf,
    AddOauth2PermissionGrants,
    AddOwnedObjects,
    AddServiceprincipalsServiceprincipalOwners,
    AddServiceprincipalsServiceprincipalTokenIssuancePolicies,
    AddServiceprincipalsServiceprincipalTokenLifetimePolicies,
    AddTransitiveMemberOf
)


def load_arguments(self, _):

    with self.argument_context('applications application list') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications application create') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('add_ins', type=validate_file_or_dict, help='Defines custom behavior that a consuming service can '
                   'use to call an app in specific contexts. For example, applications that can render file streams '
                   'may set the addIns property for its \'FileHandler\' functionality. This will let services like '
                   'Microsoft 365 call the application in the context of a document the user is working on. Expected '
                   'value: json-string/@json-file.')
        c.argument('app_id', type=str, help='The unique identifier for the application that is assigned to an '
                   'application by Azure AD. Not nullable. Read-only.')
        c.argument('application_template_id', type=str, help='')
        c.argument('app_roles', action=AddApplicationsApplicationAppRoles, nargs='+', help='The collection of roles '
                   'the application declares. With app role assignments, these roles can be assigned to users, groups, '
                   'or other applications\' service principals. Not nullable.')
        c.argument('created_date_time', help='The date and time the application was registered. Read-only.')
        c.argument('description', type=str, help='')
        c.argument('display_name', type=str, help='The display name for the application.')
        c.argument('group_membership_claims', type=str, help='Configures the groups claim issued in a user or OAuth '
                   '2.0 access token that the application expects. To set this attribute, use one of the following '
                   'valid string values:NoneSecurityGroup: For security groups and Azure AD rolesAll: This will get '
                   'all of the security groups, distribution groups, and Azure AD directory roles that the signed-in '
                   'user is a member of')
        c.argument('identifier_uris', nargs='+', help='The URIs that identify the application within its Azure AD '
                   'tenant, or within a verified custom domain if the application is multi-tenant. For more '
                   'information see Application Objects and Service Principal Objects. The any operator is required '
                   'for filter expressions on multi-valued properties. Not nullable.')
        c.argument('info', action=AddInfo, nargs='+', help='informationalUrl')
        c.argument('is_device_only_auth_supported', arg_type=get_three_state_flag(), help='')
        c.argument('is_fallback_public_client', arg_type=get_three_state_flag(), help='Specifies the fallback '
                   'application type as public client, such as an installed application running on a mobile device. '
                   'The default value is false which means the fallback application type is confidential client such '
                   'as web app. There are certain scenarios where Azure AD cannot determine the client application '
                   'type (e.g. ROPC flow where it is configured without specifying a redirect URI). In those cases '
                   'Azure AD will interpret the application type based on the value of this property.')
        c.argument('key_credentials', action=AddApplicationsApplicationKeyCredentials, nargs='+', help='The collection '
                   'of key credentials associated with the application Not nullable.')
        c.argument('logo', help='The main logo for the application. Not nullable.')
        c.argument('notes', type=str, help='')
        c.argument('oauth2_require_post_response', arg_type=get_three_state_flag(), help='')
        c.argument('parental_control_settings', action=AddParentalControlSettings, nargs='+',
                   help='parentalControlSettings')
        c.argument('password_credentials', action=AddApplicationsApplicationPasswordCredentials, nargs='+', help='The '
                   'collection of password credentials associated with the application. Not nullable.')
        c.argument('public_client', action=AddPublicClient, nargs='+', help='publicClientApplication')
        c.argument('publisher_domain', type=str, help='The verified publisher domain for the application. Read-only.')
        c.argument('required_resource_access', type=validate_file_or_dict, help='Specifies resources that this '
                   'application requires access to and the set of OAuth permission scopes and application roles that '
                   'it needs under each of those resources. This pre-configuration of required resource access drives '
                   'the consent experience. Not nullable. Expected value: json-string/@json-file.')
        c.argument('sign_in_audience', type=str, help='Specifies the Microsoft accounts that are supported for the '
                   'current application. Supported values are:AzureADMyOrg: Users with a Microsoft work or school '
                   'account in my organization’s Azure AD tenant (single tenant)AzureADMultipleOrgs: Users with a '
                   'Microsoft work or school account in any organization’s Azure AD tenant '
                   '(multi-tenant)AzureADandPersonalMicrosoftAccount: Users with a personal Microsoft account, or a '
                   'work or school account in any organization’s Azure AD tenant.')
        c.argument('tags', tags_type)
        c.argument('token_encryption_key_id', help='Specifies the keyId of a public key from the keyCredentials '
                   'collection. When configured, Azure AD encrypts all the tokens it emits by using the key this '
                   'property points to. The application code that receives the encrypted token must use the matching '
                   'private key to decrypt the token before it can be used for the signed-in user.')
        c.argument('created_on_behalf_of', action=AddCreatedOnBehalfOf, nargs='+', help='Represents an Azure Active '
                   'Directory object. The directoryObject type is the base type for many other directory entity types.')
        c.argument('extension_properties', action=AddExtensionProperties, nargs='+', help='Read-only. Nullable.')
        c.argument('home_realm_discovery_policies', action=AddApplicationsApplicationHomeRealmDiscoveryPolicies,
                   nargs='+', help='')
        c.argument('owners', action=AddApplicationsApplicationOwners, nargs='+', help='Directory objects that are '
                   'owners of the application. The owners are a set of non-admin users who are allowed to modify this '
                   'object. Requires version 2013-11-08 or newer. Read-only. Nullable.')
        c.argument('token_issuance_policies', action=AddApplicationsApplicationTokenIssuancePolicies, nargs='+',
                   help='')
        c.argument('token_lifetime_policies', action=AddApplicationsApplicationTokenLifetimePolicies, nargs='+',
                   help='')
        c.argument('home_page_url', type=str, help='Home page or landing page of the application.', arg_group='Web')
        c.argument('implicit_grant_settings', action=AddImplicitGrantSettings, nargs='+', help='implicitGrantSettings',
                   arg_group='Web')
        c.argument('logout_url', type=str, help='Specifies the URL that will be used by Microsoft\'s authorization '
                   'service to logout an user using front-channel, back-channel or SAML logout protocols.',
                   arg_group='Web')
        c.argument('redirect_uris', nargs='+', help='Specifies the URLs where user tokens are sent for sign-in, or the '
                   'redirect URIs where OAuth 2.0 authorization codes and access tokens are sent.', arg_group='Web')
        c.argument('access_token', action=AddAccessToken, nargs='+', help='The optional claims returned in the JWT '
                   'access token.', arg_group='Optional Claims')
        c.argument('id_token', action=AddIdToken, nargs='+', help='The optional claims returned in the JWT ID token.',
                   arg_group='Optional Claims')
        c.argument('saml2_token', action=AddSaml2Token, nargs='+', help='The optional claims returned in the SAML '
                   'token.', arg_group='Optional Claims')
        c.argument('accept_mapped_claims', arg_type=get_three_state_flag(), help='When true, allows an application to '
                   'use claims mapping without specifying a custom signing key.', arg_group='Api')
        c.argument('known_client_applications', nargs='+', help='Used for bundling consent if you have a solution that '
                   'contains two parts: a client app and a custom web API app. If you set the appID of the client app '
                   'to this value, the user only consents once to the client app. Azure AD knows that consenting to '
                   'the client means implicitly consenting to the web API and automatically provisions service '
                   'principals for both APIs at the same time. Both the client and the web API app must be registered '
                   'in the same tenant.', arg_group='Api')
        c.argument('oauth2_permission_scopes', action=AddApplicationsApplicationOauth2PermissionScopes, nargs='+',
                   help='The definition of the delegated permissions exposed by the web API represented by this '
                   'application registration. These delegated permissions may be requested by a client application, '
                   'and may be granted by users or administrators during consent. Delegated permissions are sometimes '
                   'referred to as OAuth 2.0 scopes.', arg_group='Api')
        c.argument('pre_authorized_applications', action=AddPreAuthorizedApplications, nargs='+', help='Lists the '
                   'client applications that are pre-authorized with the specified delegated permissions to access '
                   'this application\'s APIs. Users are not required to consent to any pre-authorized application (for '
                   'the permissions specified). However, any additional permissions not listed in '
                   'preAuthorizedApplications (requested through incremental consent for example) will require user '
                   'consent.', arg_group='Api')
        c.argument('requested_access_token_version', type=int, help='Specifies the access token version expected by '
                   'this resource. This changes the version and format of the JWT produced independent of the endpoint '
                   'or client used to request the access token.  The endpoint used, v1.0 or v2.0, is chosen by the '
                   'client and only impacts the version of id_tokens. Resources need to explicitly configure '
                   'requestedAccessTokenVersion to indicate the supported access token format.  Possible values for '
                   'requestedAccessTokenVersion are 1, 2, or null. If the value is null, this defaults to 1, which '
                   'corresponds to the v1.0 endpoint.  If signInAudience on the application is configured as '
                   'AzureADandPersonalMicrosoftAccount, the value for this property must be 2', arg_group='Api')

    with self.argument_context('applications application update') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('add_ins', type=validate_file_or_dict, help='Defines custom behavior that a consuming service can '
                   'use to call an app in specific contexts. For example, applications that can render file streams '
                   'may set the addIns property for its \'FileHandler\' functionality. This will let services like '
                   'Microsoft 365 call the application in the context of a document the user is working on. Expected '
                   'value: json-string/@json-file.')
        c.argument('app_id', type=str, help='The unique identifier for the application that is assigned to an '
                   'application by Azure AD. Not nullable. Read-only.')
        c.argument('application_template_id', type=str, help='')
        c.argument('app_roles', action=AddApplicationsApplicationAppRoles, nargs='+', help='The collection of roles '
                   'the application declares. With app role assignments, these roles can be assigned to users, groups, '
                   'or other applications\' service principals. Not nullable.')
        c.argument('created_date_time', help='The date and time the application was registered. Read-only.')
        c.argument('description', type=str, help='')
        c.argument('display_name', type=str, help='The display name for the application.')
        c.argument('group_membership_claims', type=str, help='Configures the groups claim issued in a user or OAuth '
                   '2.0 access token that the application expects. To set this attribute, use one of the following '
                   'valid string values:NoneSecurityGroup: For security groups and Azure AD rolesAll: This will get '
                   'all of the security groups, distribution groups, and Azure AD directory roles that the signed-in '
                   'user is a member of')
        c.argument('identifier_uris', nargs='+', help='The URIs that identify the application within its Azure AD '
                   'tenant, or within a verified custom domain if the application is multi-tenant. For more '
                   'information see Application Objects and Service Principal Objects. The any operator is required '
                   'for filter expressions on multi-valued properties. Not nullable.')
        c.argument('info', action=AddInfo, nargs='+', help='informationalUrl')
        c.argument('is_device_only_auth_supported', arg_type=get_three_state_flag(), help='')
        c.argument('is_fallback_public_client', arg_type=get_three_state_flag(), help='Specifies the fallback '
                   'application type as public client, such as an installed application running on a mobile device. '
                   'The default value is false which means the fallback application type is confidential client such '
                   'as web app. There are certain scenarios where Azure AD cannot determine the client application '
                   'type (e.g. ROPC flow where it is configured without specifying a redirect URI). In those cases '
                   'Azure AD will interpret the application type based on the value of this property.')
        c.argument('key_credentials', action=AddApplicationsApplicationKeyCredentials, nargs='+', help='The collection '
                   'of key credentials associated with the application Not nullable.')
        c.argument('logo', help='The main logo for the application. Not nullable.')
        c.argument('notes', type=str, help='')
        c.argument('oauth2_require_post_response', arg_type=get_three_state_flag(), help='')
        c.argument('parental_control_settings', action=AddParentalControlSettings, nargs='+',
                   help='parentalControlSettings')
        c.argument('password_credentials', action=AddApplicationsApplicationPasswordCredentials, nargs='+', help='The '
                   'collection of password credentials associated with the application. Not nullable.')
        c.argument('public_client', action=AddPublicClient, nargs='+', help='publicClientApplication')
        c.argument('publisher_domain', type=str, help='The verified publisher domain for the application. Read-only.')
        c.argument('required_resource_access', type=validate_file_or_dict, help='Specifies resources that this '
                   'application requires access to and the set of OAuth permission scopes and application roles that '
                   'it needs under each of those resources. This pre-configuration of required resource access drives '
                   'the consent experience. Not nullable. Expected value: json-string/@json-file.')
        c.argument('sign_in_audience', type=str, help='Specifies the Microsoft accounts that are supported for the '
                   'current application. Supported values are:AzureADMyOrg: Users with a Microsoft work or school '
                   'account in my organization’s Azure AD tenant (single tenant)AzureADMultipleOrgs: Users with a '
                   'Microsoft work or school account in any organization’s Azure AD tenant '
                   '(multi-tenant)AzureADandPersonalMicrosoftAccount: Users with a personal Microsoft account, or a '
                   'work or school account in any organization’s Azure AD tenant.')
        c.argument('tags', tags_type)
        c.argument('token_encryption_key_id', help='Specifies the keyId of a public key from the keyCredentials '
                   'collection. When configured, Azure AD encrypts all the tokens it emits by using the key this '
                   'property points to. The application code that receives the encrypted token must use the matching '
                   'private key to decrypt the token before it can be used for the signed-in user.')
        c.argument('created_on_behalf_of', action=AddCreatedOnBehalfOf, nargs='+', help='Represents an Azure Active '
                   'Directory object. The directoryObject type is the base type for many other directory entity types.')
        c.argument('extension_properties', action=AddExtensionProperties, nargs='+', help='Read-only. Nullable.')
        c.argument('home_realm_discovery_policies', action=AddApplicationsApplicationHomeRealmDiscoveryPolicies,
                   nargs='+', help='')
        c.argument('owners', action=AddApplicationsApplicationOwners, nargs='+', help='Directory objects that are '
                   'owners of the application. The owners are a set of non-admin users who are allowed to modify this '
                   'object. Requires version 2013-11-08 or newer. Read-only. Nullable.')
        c.argument('token_issuance_policies', action=AddApplicationsApplicationTokenIssuancePolicies, nargs='+',
                   help='')
        c.argument('token_lifetime_policies', action=AddApplicationsApplicationTokenLifetimePolicies, nargs='+',
                   help='')
        c.argument('home_page_url', type=str, help='Home page or landing page of the application.', arg_group='Web')
        c.argument('implicit_grant_settings', action=AddImplicitGrantSettings, nargs='+', help='implicitGrantSettings',
                   arg_group='Web')
        c.argument('logout_url', type=str, help='Specifies the URL that will be used by Microsoft\'s authorization '
                   'service to logout an user using front-channel, back-channel or SAML logout protocols.',
                   arg_group='Web')
        c.argument('redirect_uris', nargs='+', help='Specifies the URLs where user tokens are sent for sign-in, or the '
                   'redirect URIs where OAuth 2.0 authorization codes and access tokens are sent.', arg_group='Web')
        c.argument('access_token', action=AddAccessToken, nargs='+', help='The optional claims returned in the JWT '
                   'access token.', arg_group='Optional Claims')
        c.argument('id_token', action=AddIdToken, nargs='+', help='The optional claims returned in the JWT ID token.',
                   arg_group='Optional Claims')
        c.argument('saml2_token', action=AddSaml2Token, nargs='+', help='The optional claims returned in the SAML '
                   'token.', arg_group='Optional Claims')
        c.argument('accept_mapped_claims', arg_type=get_three_state_flag(), help='When true, allows an application to '
                   'use claims mapping without specifying a custom signing key.', arg_group='Api')
        c.argument('known_client_applications', nargs='+', help='Used for bundling consent if you have a solution that '
                   'contains two parts: a client app and a custom web API app. If you set the appID of the client app '
                   'to this value, the user only consents once to the client app. Azure AD knows that consenting to '
                   'the client means implicitly consenting to the web API and automatically provisions service '
                   'principals for both APIs at the same time. Both the client and the web API app must be registered '
                   'in the same tenant.', arg_group='Api')
        c.argument('oauth2_permission_scopes', action=AddApplicationsApplicationOauth2PermissionScopes, nargs='+',
                   help='The definition of the delegated permissions exposed by the web API represented by this '
                   'application registration. These delegated permissions may be requested by a client application, '
                   'and may be granted by users or administrators during consent. Delegated permissions are sometimes '
                   'referred to as OAuth 2.0 scopes.', arg_group='Api')
        c.argument('pre_authorized_applications', action=AddPreAuthorizedApplications, nargs='+', help='Lists the '
                   'client applications that are pre-authorized with the specified delegated permissions to access '
                   'this application\'s APIs. Users are not required to consent to any pre-authorized application (for '
                   'the permissions specified). However, any additional permissions not listed in '
                   'preAuthorizedApplications (requested through incremental consent for example) will require user '
                   'consent.', arg_group='Api')
        c.argument('requested_access_token_version', type=int, help='Specifies the access token version expected by '
                   'this resource. This changes the version and format of the JWT produced independent of the endpoint '
                   'or client used to request the access token.  The endpoint used, v1.0 or v2.0, is chosen by the '
                   'client and only impacts the version of id_tokens. Resources need to explicitly configure '
                   'requestedAccessTokenVersion to indicate the supported access token format.  Possible values for '
                   'requestedAccessTokenVersion are 1, 2, or null. If the value is null, this defaults to 1, which '
                   'corresponds to the v1.0 endpoint.  If signInAudience on the application is configured as '
                   'AzureADandPersonalMicrosoftAccount, the value for this property must be 2', arg_group='Api')

    with self.argument_context('applications application delete-application') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('applications application set-logo') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('data', help='New media content.')

    with self.argument_context('applications application show-application') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications application show-logo') as c:
        c.argument('application_id', type=str, help='key: id of application')

    with self.argument_context('applications application add-key') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('key_credential', action=AddKeyCredential, nargs='+', help='keyCredential')
        c.argument('password_credential', action=AddPasswordCredential, nargs='+', help='passwordCredential')
        c.argument('proof', type=str, help='')

    with self.argument_context('applications application add-password') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('password_credential', action=AddPasswordCredential, nargs='+', help='passwordCredential')

    with self.argument_context('applications application check-member-group') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('group_ids', nargs='+', help='')

    with self.argument_context('applications application check-member-object') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('ids', nargs='+', help='')

    with self.argument_context('applications application create-extension-property') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('app_display_name', type=str, help='Display name of the application object on which this extension '
                   'property is defined. Read-only.')
        c.argument('data_type', type=str, help='Specifies the data type of the value the extension property can hold. '
                   'Following values are supported. Not nullable. Binary - 256 bytes maximumBooleanDateTime - Must be '
                   'specified in ISO 8601 format. Will be stored in UTC.Integer - 32-bit value.LargeInteger - 64-bit '
                   'value.String - 256 characters maximum')
        c.argument('is_synced_from_on_premises', arg_type=get_three_state_flag(), help='Indicates if this extension '
                   'property was sycned from onpremises directory using Azure AD Connect. Read-only.')
        c.argument('name', type=str, help='Name of the extension property. Not nullable.')
        c.argument('target_objects', nargs='+', help='Following values are supported. Not nullable. '
                   'UserGroupOrganizationDeviceApplication')

    with self.argument_context('applications application create-ref-home-realm-discovery-policy') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications application create-ref-owner') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications application create-ref-token-issuance-policy') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications application create-ref-token-lifetime-policy') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications application delete-extension-property') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('extension_property_id', type=str, help='key: id of extensionProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('applications application delete-ref-created-on-behalf-of') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('applications application get-available-extension-property') as c:
        c.argument('is_synced_from_on_premises', arg_type=get_three_state_flag(), help='')

    with self.argument_context('applications application get-by-id') as c:
        c.argument('ids', nargs='+', help='')
        c.argument('types', nargs='+', help='')

    with self.argument_context('applications application get-member-group') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('security_enabled_only', arg_type=get_three_state_flag(), help='')

    with self.argument_context('applications application get-member-object') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('security_enabled_only', arg_type=get_three_state_flag(), help='')

    with self.argument_context('applications application list-extension-property') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications application list-home-realm-discovery-policy') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications application list-owner') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications application list-ref-home-realm-discovery-policy') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('applications application list-ref-owner') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('applications application list-ref-token-issuance-policy') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('applications application list-ref-token-lifetime-policy') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('applications application list-token-issuance-policy') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications application list-token-lifetime-policy') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications application remove-key') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('key_id', help='')
        c.argument('proof', type=str, help='')

    with self.argument_context('applications application remove-password') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('key_id', help='')

    with self.argument_context('applications application restore') as c:
        c.argument('application_id', type=str, help='key: id of application')

    with self.argument_context('applications application set-ref-created-on-behalf-of') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications application show-created-on-behalf-of') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications application show-extension-property') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('extension_property_id', type=str, help='key: id of extensionProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications application show-ref-created-on-behalf-of') as c:
        c.argument('application_id', type=str, help='key: id of application')

    with self.argument_context('applications application update-extension-property') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('extension_property_id', type=str, help='key: id of extensionProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('app_display_name', type=str, help='Display name of the application object on which this extension '
                   'property is defined. Read-only.')
        c.argument('data_type', type=str, help='Specifies the data type of the value the extension property can hold. '
                   'Following values are supported. Not nullable. Binary - 256 bytes maximumBooleanDateTime - Must be '
                   'specified in ISO 8601 format. Will be stored in UTC.Integer - 32-bit value.LargeInteger - 64-bit '
                   'value.String - 256 characters maximum')
        c.argument('is_synced_from_on_premises', arg_type=get_three_state_flag(), help='Indicates if this extension '
                   'property was sycned from onpremises directory using Azure AD Connect. Read-only.')
        c.argument('name', type=str, help='Name of the extension property. Not nullable.')
        c.argument('target_objects', nargs='+', help='Following values are supported. Not nullable. '
                   'UserGroupOrganizationDeviceApplication')

    with self.argument_context('applications application validate-property') as c:
        c.argument('entity_type', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('mail_nickname', type=str, help='')
        c.argument('on_behalf_of_user_id', help='')

    with self.argument_context('applications group create-app-role-assignment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('app_role_id', help='The identifier (id) for the app role which is assigned to the principal. This '
                   'app role must be exposed in the appRoles property on the resource application\'s service principal '
                   '(resourceId). If the resource application has not declared any app roles, a default app role ID of '
                   '00000000-0000-0000-0000-000000000000 can be specified to signal that the principal is assigned to '
                   'the resource app without any specific app roles. Required on create. Does not support $filter.')
        c.argument('created_date_time', help='')
        c.argument('principal_display_name', type=str, help='The display name of the user, group, or service principal '
                   'that was granted the app role assignment. Read-only. Supports $filter (eq and startswith).')
        c.argument('principal_id', help='The unique identifier (id) for the user, group or service principal being '
                   'granted the app role. Required on create. Does not support $filter.')
        c.argument('principal_type', type=str, help='The type of the assigned principal. This can either be \'User\', '
                   '\'Group\' or \'ServicePrincipal\'. Read-only. Does not support $filter.')
        c.argument('resource_display_name', type=str, help='The display name of the resource app\'s service principal '
                   'to which the assignment is made. Does not support $filter.')
        c.argument('resource_id', help='The unique identifier (id) for the resource service principal for which the '
                   'assignment is made. Required on create. Supports $filter (eq only).')

    with self.argument_context('applications group delete-app-role-assignment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('app_role_assignment_id', type=str, help='key: id of appRoleAssignment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('applications group list-app-role-assignment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications group show-app-role-assignment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('app_role_assignment_id', type=str, help='key: id of appRoleAssignment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications group update-app-role-assignment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('app_role_assignment_id', type=str, help='key: id of appRoleAssignment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('app_role_id', help='The identifier (id) for the app role which is assigned to the principal. This '
                   'app role must be exposed in the appRoles property on the resource application\'s service principal '
                   '(resourceId). If the resource application has not declared any app roles, a default app role ID of '
                   '00000000-0000-0000-0000-000000000000 can be specified to signal that the principal is assigned to '
                   'the resource app without any specific app roles. Required on create. Does not support $filter.')
        c.argument('created_date_time', help='')
        c.argument('principal_display_name', type=str, help='The display name of the user, group, or service principal '
                   'that was granted the app role assignment. Read-only. Supports $filter (eq and startswith).')
        c.argument('principal_id', help='The unique identifier (id) for the user, group or service principal being '
                   'granted the app role. Required on create. Does not support $filter.')
        c.argument('principal_type', type=str, help='The type of the assigned principal. This can either be \'User\', '
                   '\'Group\' or \'ServicePrincipal\'. Read-only. Does not support $filter.')
        c.argument('resource_display_name', type=str, help='The display name of the resource app\'s service principal '
                   'to which the assignment is made. Does not support $filter.')
        c.argument('resource_id', help='The unique identifier (id) for the resource service principal for which the '
                   'assignment is made. Required on create. Supports $filter (eq only).')

    with self.argument_context('applications service-principal-service-principal create-service-principal') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('account_enabled', arg_type=get_three_state_flag(), help='true if the service principal account is '
                   'enabled; otherwise, false.')
        c.argument('add_ins', type=validate_file_or_dict, help='Defines custom behavior that a consuming service can '
                   'use to call an app in specific contexts. For example, applications that can render file streams '
                   'may set the addIns property for its \'FileHandler\' functionality. This will let services like '
                   'Microsoft 365 call the application in the context of a document the user is working on. Expected '
                   'value: json-string/@json-file.')
        c.argument('alternative_names', nargs='+', help='Used to retrieve service principals by subscription, identify '
                   'resource group and full resource ids for managed identities.')
        c.argument('app_description', type=str, help='')
        c.argument('app_display_name', type=str, help='The display name exposed by the associated application.')
        c.argument('app_id', type=str, help='The unique identifier for the associated application (its appId '
                   'property).')
        c.argument('application_template_id', type=str, help='Unique identifier of the applicationTemplate that the '
                   'servicePrincipal was created from. Read-only.')
        c.argument('app_owner_organization_id', help='Contains the tenant id where the application is registered. This '
                   'is applicable only to service principals backed by applications.')
        c.argument('app_role_assignment_required', arg_type=get_three_state_flag(), help='Specifies whether users or '
                   'other service principals need to be granted an app role assignment for this service principal '
                   'before users can sign in or apps can get tokens. The default value is false. Not nullable.')
        c.argument('app_roles', action=AddServiceprincipalsServiceprincipalAppRoles, nargs='+', help='The roles '
                   'exposed by the application which this service principal represents. For more information see the '
                   'appRoles property definition on the application entity. Not nullable.')
        c.argument('description', type=str, help='')
        c.argument('display_name', type=str, help='The display name for the service principal.')
        c.argument('homepage', type=str, help='Home page or landing page of the application.')
        c.argument('info', action=AddInfo, nargs='+', help='informationalUrl')
        c.argument('key_credentials', action=AddServiceprincipalsServiceprincipalKeyCredentials, nargs='+', help='The '
                   'collection of key credentials associated with the service principal. Not nullable.')
        c.argument('login_url', type=str, help='Specifies the URL where the service provider redirects the user to '
                   'Azure AD to authenticate. Azure AD uses the URL to launch the application from Microsoft 365 or '
                   'the Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for applications '
                   'configured with SAML-based single sign-on. The user launches the application from Microsoft 365, '
                   'the Azure AD My Apps, or the Azure AD SSO URL.')
        c.argument('logout_url', type=str, help='Specifies the URL that will be used by Microsoft\'s authorization '
                   'service to logout an user using OpenId Connect front-channel, back-channel or SAML logout '
                   'protocols.')
        c.argument('notes', type=str, help='')
        c.argument('notification_email_addresses', nargs='+', help='Specifies the list of email addresses where Azure '
                   'AD sends a notification when the active certificate is near the expiration date. This is only for '
                   'the certificates used to sign the SAML token issued for Azure AD Gallery applications.')
        c.argument('oauth2_permission_scopes', action=AddServiceprincipalsServiceprincipalOauth2PermissionScopes,
                   nargs='+', help='The delegated permissions exposed by the application. For more information see the '
                   'oauth2PermissionScopes property on the application entity\'s api property. Not nullable.')
        c.argument('password_credentials', action=AddServiceprincipalsServiceprincipalPasswordCredentials, nargs='+',
                   help='The collection of password credentials associated with the service principal. Not nullable.')
        c.argument('preferred_single_sign_on_mode', type=str, help='Specifies the single sign-on mode configured for '
                   'this application. Azure AD uses the preferred single sign-on mode to launch the application from '
                   'Microsoft 365 or the Azure AD My Apps. The supported values are password, saml, external, and '
                   'oidc.')
        c.argument('preferred_token_signing_key_thumbprint', type=str, help='')
        c.argument('reply_urls', nargs='+', help='The URLs that user tokens are sent to for sign in with the '
                   'associated application, or the redirect URIs that OAuth 2.0 authorization codes and access tokens '
                   'are sent to for the associated application. Not nullable.')
        c.argument('service_principal_names', nargs='+', help='Contains the list of identifiersUris, copied over from '
                   'the associated application. Additional values can be added to hybrid applications. These values '
                   'can be used to identify the permissions exposed by this app within Azure AD. For example,Client '
                   'apps can specify a resource URI which is based on the values of this property to acquire an access '
                   'token, which is the URI returned in the \'aud\' claim.The any operator is required for filter '
                   'expressions on multi-valued properties. Not nullable.')
        c.argument('service_principal_type', type=str, help='Identifies if the service principal represents an '
                   'application or a managed identity. This is set by Azure AD internally. For a service principal '
                   'that represents an application this is set as Application. For a service principal that represent '
                   'a managed identity this is set as ManagedIdentity.')
        c.argument('tags', tags_type)
        c.argument('token_encryption_key_id', help='Specifies the keyId of a public key from the keyCredentials '
                   'collection. When configured, Azure AD issues tokens for this application encrypted using the key '
                   'specified by this property. The application code that receives the encrypted token must use the '
                   'matching private key to decrypt the token before it can be used for the signed-in user.')
        c.argument('app_role_assigned_to', action=AddAppRoleAssignedTo, nargs='+', help='Principals (users, groups, '
                   'and service principals) that are assigned to this service principal. Read-only.')
        c.argument('app_role_assignments', action=AddAppRoleAssignments, nargs='+', help='Applications that this '
                   'service principal is assigned to. Read-only. Nullable.')
        c.argument('claims_mapping_policies', action=AddClaimsMappingPolicies, nargs='+', help='The '
                   'claimsMappingPolicies assigned to this service principal.')
        c.argument('created_objects', action=AddCreatedObjects, nargs='+', help='Directory objects created by this '
                   'service principal. Read-only. Nullable.')
        c.argument('endpoints', action=AddEndpoints, nargs='+', help='Endpoints available for discovery. Services like '
                   'Sharepoint populate this property with a tenant specific SharePoint endpoints that other '
                   'applications can discover and use in their experiences.')
        c.argument('home_realm_discovery_policies',
                   action=AddServiceprincipalsServiceprincipalHomeRealmDiscoveryPolicies, nargs='+', help='The '
                   'homeRealmDiscoveryPolicies assigned to this service principal.')
        c.argument('member_of', action=AddMemberOf, nargs='+', help='Roles that this service principal is a member of. '
                   'HTTP Methods: GET Read-only. Nullable.')
        c.argument('oauth2_permission_grants', action=AddOauth2PermissionGrants, nargs='+', help='Delegated permission '
                   'grants authorizing this service principal to access an API on behalf of a signed-in user. '
                   'Read-only. Nullable.')
        c.argument('owned_objects', action=AddOwnedObjects, nargs='+', help='Directory objects that are owned by this '
                   'service principal. Read-only. Nullable.')
        c.argument('owners', action=AddServiceprincipalsServiceprincipalOwners, nargs='+', help='Directory objects '
                   'that are owners of this servicePrincipal. The owners are a set of non-admin users or '
                   'servicePrincipals who are allowed to modify this object. Read-only. Nullable.')
        c.argument('token_issuance_policies', action=AddServiceprincipalsServiceprincipalTokenIssuancePolicies,
                   nargs='+', help='The tokenIssuancePolicies assigned to this service principal.')
        c.argument('token_lifetime_policies', action=AddServiceprincipalsServiceprincipalTokenLifetimePolicies,
                   nargs='+', help='The tokenLifetimePolicies assigned to this service principal.')
        c.argument('transitive_member_of', action=AddTransitiveMemberOf, nargs='+', help='')
        c.argument('relay_state', type=str, help='The relative URI the service provider would redirect to after '
                   'completion of the single sign-on flow.', arg_group='Saml Single Sign On Settings')

    with self.argument_context('applications service-principal-service-principal delete-service-principal') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('applications service-principal-service-principal list-service-principal') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications service-principal-service-principal show-service-principal') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications service-principal-service-principal update-service-principal') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('account_enabled', arg_type=get_three_state_flag(), help='true if the service principal account is '
                   'enabled; otherwise, false.')
        c.argument('add_ins', type=validate_file_or_dict, help='Defines custom behavior that a consuming service can '
                   'use to call an app in specific contexts. For example, applications that can render file streams '
                   'may set the addIns property for its \'FileHandler\' functionality. This will let services like '
                   'Microsoft 365 call the application in the context of a document the user is working on. Expected '
                   'value: json-string/@json-file.')
        c.argument('alternative_names', nargs='+', help='Used to retrieve service principals by subscription, identify '
                   'resource group and full resource ids for managed identities.')
        c.argument('app_description', type=str, help='')
        c.argument('app_display_name', type=str, help='The display name exposed by the associated application.')
        c.argument('app_id', type=str, help='The unique identifier for the associated application (its appId '
                   'property).')
        c.argument('application_template_id', type=str, help='Unique identifier of the applicationTemplate that the '
                   'servicePrincipal was created from. Read-only.')
        c.argument('app_owner_organization_id', help='Contains the tenant id where the application is registered. This '
                   'is applicable only to service principals backed by applications.')
        c.argument('app_role_assignment_required', arg_type=get_three_state_flag(), help='Specifies whether users or '
                   'other service principals need to be granted an app role assignment for this service principal '
                   'before users can sign in or apps can get tokens. The default value is false. Not nullable.')
        c.argument('app_roles', action=AddServiceprincipalsServiceprincipalAppRoles, nargs='+', help='The roles '
                   'exposed by the application which this service principal represents. For more information see the '
                   'appRoles property definition on the application entity. Not nullable.')
        c.argument('description', type=str, help='')
        c.argument('display_name', type=str, help='The display name for the service principal.')
        c.argument('homepage', type=str, help='Home page or landing page of the application.')
        c.argument('info', action=AddInfo, nargs='+', help='informationalUrl')
        c.argument('key_credentials', action=AddServiceprincipalsServiceprincipalKeyCredentials, nargs='+', help='The '
                   'collection of key credentials associated with the service principal. Not nullable.')
        c.argument('login_url', type=str, help='Specifies the URL where the service provider redirects the user to '
                   'Azure AD to authenticate. Azure AD uses the URL to launch the application from Microsoft 365 or '
                   'the Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for applications '
                   'configured with SAML-based single sign-on. The user launches the application from Microsoft 365, '
                   'the Azure AD My Apps, or the Azure AD SSO URL.')
        c.argument('logout_url', type=str, help='Specifies the URL that will be used by Microsoft\'s authorization '
                   'service to logout an user using OpenId Connect front-channel, back-channel or SAML logout '
                   'protocols.')
        c.argument('notes', type=str, help='')
        c.argument('notification_email_addresses', nargs='+', help='Specifies the list of email addresses where Azure '
                   'AD sends a notification when the active certificate is near the expiration date. This is only for '
                   'the certificates used to sign the SAML token issued for Azure AD Gallery applications.')
        c.argument('oauth2_permission_scopes', action=AddServiceprincipalsServiceprincipalOauth2PermissionScopes,
                   nargs='+', help='The delegated permissions exposed by the application. For more information see the '
                   'oauth2PermissionScopes property on the application entity\'s api property. Not nullable.')
        c.argument('password_credentials', action=AddServiceprincipalsServiceprincipalPasswordCredentials, nargs='+',
                   help='The collection of password credentials associated with the service principal. Not nullable.')
        c.argument('preferred_single_sign_on_mode', type=str, help='Specifies the single sign-on mode configured for '
                   'this application. Azure AD uses the preferred single sign-on mode to launch the application from '
                   'Microsoft 365 or the Azure AD My Apps. The supported values are password, saml, external, and '
                   'oidc.')
        c.argument('preferred_token_signing_key_thumbprint', type=str, help='')
        c.argument('reply_urls', nargs='+', help='The URLs that user tokens are sent to for sign in with the '
                   'associated application, or the redirect URIs that OAuth 2.0 authorization codes and access tokens '
                   'are sent to for the associated application. Not nullable.')
        c.argument('service_principal_names', nargs='+', help='Contains the list of identifiersUris, copied over from '
                   'the associated application. Additional values can be added to hybrid applications. These values '
                   'can be used to identify the permissions exposed by this app within Azure AD. For example,Client '
                   'apps can specify a resource URI which is based on the values of this property to acquire an access '
                   'token, which is the URI returned in the \'aud\' claim.The any operator is required for filter '
                   'expressions on multi-valued properties. Not nullable.')
        c.argument('service_principal_type', type=str, help='Identifies if the service principal represents an '
                   'application or a managed identity. This is set by Azure AD internally. For a service principal '
                   'that represents an application this is set as Application. For a service principal that represent '
                   'a managed identity this is set as ManagedIdentity.')
        c.argument('tags', tags_type)
        c.argument('token_encryption_key_id', help='Specifies the keyId of a public key from the keyCredentials '
                   'collection. When configured, Azure AD issues tokens for this application encrypted using the key '
                   'specified by this property. The application code that receives the encrypted token must use the '
                   'matching private key to decrypt the token before it can be used for the signed-in user.')
        c.argument('app_role_assigned_to', action=AddAppRoleAssignedTo, nargs='+', help='Principals (users, groups, '
                   'and service principals) that are assigned to this service principal. Read-only.')
        c.argument('app_role_assignments', action=AddAppRoleAssignments, nargs='+', help='Applications that this '
                   'service principal is assigned to. Read-only. Nullable.')
        c.argument('claims_mapping_policies', action=AddClaimsMappingPolicies, nargs='+', help='The '
                   'claimsMappingPolicies assigned to this service principal.')
        c.argument('created_objects', action=AddCreatedObjects, nargs='+', help='Directory objects created by this '
                   'service principal. Read-only. Nullable.')
        c.argument('endpoints', action=AddEndpoints, nargs='+', help='Endpoints available for discovery. Services like '
                   'Sharepoint populate this property with a tenant specific SharePoint endpoints that other '
                   'applications can discover and use in their experiences.')
        c.argument('home_realm_discovery_policies',
                   action=AddServiceprincipalsServiceprincipalHomeRealmDiscoveryPolicies, nargs='+', help='The '
                   'homeRealmDiscoveryPolicies assigned to this service principal.')
        c.argument('member_of', action=AddMemberOf, nargs='+', help='Roles that this service principal is a member of. '
                   'HTTP Methods: GET Read-only. Nullable.')
        c.argument('oauth2_permission_grants', action=AddOauth2PermissionGrants, nargs='+', help='Delegated permission '
                   'grants authorizing this service principal to access an API on behalf of a signed-in user. '
                   'Read-only. Nullable.')
        c.argument('owned_objects', action=AddOwnedObjects, nargs='+', help='Directory objects that are owned by this '
                   'service principal. Read-only. Nullable.')
        c.argument('owners', action=AddServiceprincipalsServiceprincipalOwners, nargs='+', help='Directory objects '
                   'that are owners of this servicePrincipal. The owners are a set of non-admin users or '
                   'servicePrincipals who are allowed to modify this object. Read-only. Nullable.')
        c.argument('token_issuance_policies', action=AddServiceprincipalsServiceprincipalTokenIssuancePolicies,
                   nargs='+', help='The tokenIssuancePolicies assigned to this service principal.')
        c.argument('token_lifetime_policies', action=AddServiceprincipalsServiceprincipalTokenLifetimePolicies,
                   nargs='+', help='The tokenLifetimePolicies assigned to this service principal.')
        c.argument('transitive_member_of', action=AddTransitiveMemberOf, nargs='+', help='')
        c.argument('relay_state', type=str, help='The relative URI the service provider would redirect to after '
                   'completion of the single sign-on flow.', arg_group='Saml Single Sign On Settings')

    with self.argument_context('applications service-principal add-key') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('key_credential', action=AddKeyCredential, nargs='+', help='keyCredential')
        c.argument('password_credential', action=AddPasswordCredential, nargs='+', help='passwordCredential')
        c.argument('proof', type=str, help='')

    with self.argument_context('applications service-principal add-password') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('password_credential', action=AddPasswordCredential, nargs='+', help='passwordCredential')

    with self.argument_context('applications service-principal check-member-group') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('group_ids', nargs='+', help='')

    with self.argument_context('applications service-principal check-member-object') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('ids', nargs='+', help='')

    with self.argument_context('applications service-principal create-app-role-assigned-to') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('app_role_id', help='The identifier (id) for the app role which is assigned to the principal. This '
                   'app role must be exposed in the appRoles property on the resource application\'s service principal '
                   '(resourceId). If the resource application has not declared any app roles, a default app role ID of '
                   '00000000-0000-0000-0000-000000000000 can be specified to signal that the principal is assigned to '
                   'the resource app without any specific app roles. Required on create. Does not support $filter.')
        c.argument('created_date_time', help='')
        c.argument('principal_display_name', type=str, help='The display name of the user, group, or service principal '
                   'that was granted the app role assignment. Read-only. Supports $filter (eq and startswith).')
        c.argument('principal_id', help='The unique identifier (id) for the user, group or service principal being '
                   'granted the app role. Required on create. Does not support $filter.')
        c.argument('principal_type', type=str, help='The type of the assigned principal. This can either be \'User\', '
                   '\'Group\' or \'ServicePrincipal\'. Read-only. Does not support $filter.')
        c.argument('resource_display_name', type=str, help='The display name of the resource app\'s service principal '
                   'to which the assignment is made. Does not support $filter.')
        c.argument('resource_id', help='The unique identifier (id) for the resource service principal for which the '
                   'assignment is made. Required on create. Supports $filter (eq only).')

    with self.argument_context('applications service-principal create-app-role-assignment') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('app_role_id', help='The identifier (id) for the app role which is assigned to the principal. This '
                   'app role must be exposed in the appRoles property on the resource application\'s service principal '
                   '(resourceId). If the resource application has not declared any app roles, a default app role ID of '
                   '00000000-0000-0000-0000-000000000000 can be specified to signal that the principal is assigned to '
                   'the resource app without any specific app roles. Required on create. Does not support $filter.')
        c.argument('created_date_time', help='')
        c.argument('principal_display_name', type=str, help='The display name of the user, group, or service principal '
                   'that was granted the app role assignment. Read-only. Supports $filter (eq and startswith).')
        c.argument('principal_id', help='The unique identifier (id) for the user, group or service principal being '
                   'granted the app role. Required on create. Does not support $filter.')
        c.argument('principal_type', type=str, help='The type of the assigned principal. This can either be \'User\', '
                   '\'Group\' or \'ServicePrincipal\'. Read-only. Does not support $filter.')
        c.argument('resource_display_name', type=str, help='The display name of the resource app\'s service principal '
                   'to which the assignment is made. Does not support $filter.')
        c.argument('resource_id', help='The unique identifier (id) for the resource service principal for which the '
                   'assignment is made. Required on create. Supports $filter (eq only).')

    with self.argument_context('applications service-principal create-endpoint') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('capability', type=str, help='Describes the capability that is associated with this resource. (e.g. '
                   'Messages, Conversations, etc.)  Not nullable. Read-only.')
        c.argument('provider_id', type=str, help='Application id of the publishing underlying service. Not nullable. '
                   'Read-only.')
        c.argument('provider_name', type=str, help='Name of the publishing underlying service. Read-only.')
        c.argument('provider_resource_id', type=str, help='For Microsoft 365 groups, this is set to a well-known name '
                   'for the resource (e.g. Yammer.FeedURL etc.). Not nullable. Read-only.')
        c.argument('uri', type=str, help='URL of the published resource. Not nullable. Read-only.')

    with self.argument_context('applications service-principal create-ref-claim-mapping-policy') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications service-principal create-ref-created-object') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications service-principal create-ref-home-realm-discovery-policy') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications service-principal create-ref-member-of') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications service-principal create-ref-oauth2-permission-grant') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications service-principal create-ref-owned-object') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications service-principal create-ref-owner') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications service-principal create-ref-token-issuance-policy') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications service-principal create-ref-token-lifetime-policy') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications service-principal create-ref-transitive-member-of') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications service-principal delete-app-role-assigned-to') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('app_role_assignment_id', type=str, help='key: id of appRoleAssignment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('applications service-principal delete-app-role-assignment') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('app_role_assignment_id', type=str, help='key: id of appRoleAssignment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('applications service-principal delete-endpoint') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('endpoint_id', type=str, help='key: id of endpoint')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('applications service-principal get-available-extension-property') as c:
        c.argument('is_synced_from_on_premises', arg_type=get_three_state_flag(), help='')

    with self.argument_context('applications service-principal get-by-id') as c:
        c.argument('ids', nargs='+', help='')
        c.argument('types', nargs='+', help='')

    with self.argument_context('applications service-principal get-member-group') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('security_enabled_only', arg_type=get_three_state_flag(), help='')

    with self.argument_context('applications service-principal get-member-object') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('security_enabled_only', arg_type=get_three_state_flag(), help='')

    with self.argument_context('applications service-principal list-app-role-assigned-to') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications service-principal list-app-role-assignment') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications service-principal list-claim-mapping-policy') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications service-principal list-created-object') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications service-principal list-endpoint') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications service-principal list-home-realm-discovery-policy') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications service-principal list-member-of') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications service-principal list-oauth2-permission-grant') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications service-principal list-owned-object') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications service-principal list-owner') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications service-principal list-ref-claim-mapping-policy') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('applications service-principal list-ref-created-object') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('applications service-principal list-ref-home-realm-discovery-policy') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('applications service-principal list-ref-member-of') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('applications service-principal list-ref-oauth2-permission-grant') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('applications service-principal list-ref-owned-object') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('applications service-principal list-ref-owner') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('applications service-principal list-ref-token-issuance-policy') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('applications service-principal list-ref-token-lifetime-policy') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('applications service-principal list-ref-transitive-member-of') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('applications service-principal list-token-issuance-policy') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications service-principal list-token-lifetime-policy') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications service-principal list-transitive-member-of') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications service-principal remove-key') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('key_id', help='')
        c.argument('proof', type=str, help='')

    with self.argument_context('applications service-principal remove-password') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('key_id', help='')

    with self.argument_context('applications service-principal restore') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')

    with self.argument_context('applications service-principal show-app-role-assigned-to') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('app_role_assignment_id', type=str, help='key: id of appRoleAssignment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications service-principal show-app-role-assignment') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('app_role_assignment_id', type=str, help='key: id of appRoleAssignment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications service-principal show-endpoint') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('endpoint_id', type=str, help='key: id of endpoint')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications service-principal update-app-role-assigned-to') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('app_role_assignment_id', type=str, help='key: id of appRoleAssignment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('app_role_id', help='The identifier (id) for the app role which is assigned to the principal. This '
                   'app role must be exposed in the appRoles property on the resource application\'s service principal '
                   '(resourceId). If the resource application has not declared any app roles, a default app role ID of '
                   '00000000-0000-0000-0000-000000000000 can be specified to signal that the principal is assigned to '
                   'the resource app without any specific app roles. Required on create. Does not support $filter.')
        c.argument('created_date_time', help='')
        c.argument('principal_display_name', type=str, help='The display name of the user, group, or service principal '
                   'that was granted the app role assignment. Read-only. Supports $filter (eq and startswith).')
        c.argument('principal_id', help='The unique identifier (id) for the user, group or service principal being '
                   'granted the app role. Required on create. Does not support $filter.')
        c.argument('principal_type', type=str, help='The type of the assigned principal. This can either be \'User\', '
                   '\'Group\' or \'ServicePrincipal\'. Read-only. Does not support $filter.')
        c.argument('resource_display_name', type=str, help='The display name of the resource app\'s service principal '
                   'to which the assignment is made. Does not support $filter.')
        c.argument('resource_id', help='The unique identifier (id) for the resource service principal for which the '
                   'assignment is made. Required on create. Supports $filter (eq only).')

    with self.argument_context('applications service-principal update-app-role-assignment') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('app_role_assignment_id', type=str, help='key: id of appRoleAssignment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('app_role_id', help='The identifier (id) for the app role which is assigned to the principal. This '
                   'app role must be exposed in the appRoles property on the resource application\'s service principal '
                   '(resourceId). If the resource application has not declared any app roles, a default app role ID of '
                   '00000000-0000-0000-0000-000000000000 can be specified to signal that the principal is assigned to '
                   'the resource app without any specific app roles. Required on create. Does not support $filter.')
        c.argument('created_date_time', help='')
        c.argument('principal_display_name', type=str, help='The display name of the user, group, or service principal '
                   'that was granted the app role assignment. Read-only. Supports $filter (eq and startswith).')
        c.argument('principal_id', help='The unique identifier (id) for the user, group or service principal being '
                   'granted the app role. Required on create. Does not support $filter.')
        c.argument('principal_type', type=str, help='The type of the assigned principal. This can either be \'User\', '
                   '\'Group\' or \'ServicePrincipal\'. Read-only. Does not support $filter.')
        c.argument('resource_display_name', type=str, help='The display name of the resource app\'s service principal '
                   'to which the assignment is made. Does not support $filter.')
        c.argument('resource_id', help='The unique identifier (id) for the resource service principal for which the '
                   'assignment is made. Required on create. Supports $filter (eq only).')

    with self.argument_context('applications service-principal update-endpoint') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('endpoint_id', type=str, help='key: id of endpoint')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('capability', type=str, help='Describes the capability that is associated with this resource. (e.g. '
                   'Messages, Conversations, etc.)  Not nullable. Read-only.')
        c.argument('provider_id', type=str, help='Application id of the publishing underlying service. Not nullable. '
                   'Read-only.')
        c.argument('provider_name', type=str, help='Name of the publishing underlying service. Read-only.')
        c.argument('provider_resource_id', type=str, help='For Microsoft 365 groups, this is set to a well-known name '
                   'for the resource (e.g. Yammer.FeedURL etc.). Not nullable. Read-only.')
        c.argument('uri', type=str, help='URL of the published resource. Not nullable. Read-only.')

    with self.argument_context('applications service-principal validate-property') as c:
        c.argument('entity_type', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('mail_nickname', type=str, help='')
        c.argument('on_behalf_of_user_id', help='')

    with self.argument_context('applications user create-app-role-assignment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('app_role_id', help='The identifier (id) for the app role which is assigned to the principal. This '
                   'app role must be exposed in the appRoles property on the resource application\'s service principal '
                   '(resourceId). If the resource application has not declared any app roles, a default app role ID of '
                   '00000000-0000-0000-0000-000000000000 can be specified to signal that the principal is assigned to '
                   'the resource app without any specific app roles. Required on create. Does not support $filter.')
        c.argument('created_date_time', help='')
        c.argument('principal_display_name', type=str, help='The display name of the user, group, or service principal '
                   'that was granted the app role assignment. Read-only. Supports $filter (eq and startswith).')
        c.argument('principal_id', help='The unique identifier (id) for the user, group or service principal being '
                   'granted the app role. Required on create. Does not support $filter.')
        c.argument('principal_type', type=str, help='The type of the assigned principal. This can either be \'User\', '
                   '\'Group\' or \'ServicePrincipal\'. Read-only. Does not support $filter.')
        c.argument('resource_display_name', type=str, help='The display name of the resource app\'s service principal '
                   'to which the assignment is made. Does not support $filter.')
        c.argument('resource_id', help='The unique identifier (id) for the resource service principal for which the '
                   'assignment is made. Required on create. Supports $filter (eq only).')

    with self.argument_context('applications user delete-app-role-assignment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('app_role_assignment_id', type=str, help='key: id of appRoleAssignment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('applications user list-app-role-assignment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications user show-app-role-assignment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('app_role_assignment_id', type=str, help='key: id of appRoleAssignment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('applications user update-app-role-assignment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('app_role_assignment_id', type=str, help='key: id of appRoleAssignment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('app_role_id', help='The identifier (id) for the app role which is assigned to the principal. This '
                   'app role must be exposed in the appRoles property on the resource application\'s service principal '
                   '(resourceId). If the resource application has not declared any app roles, a default app role ID of '
                   '00000000-0000-0000-0000-000000000000 can be specified to signal that the principal is assigned to '
                   'the resource app without any specific app roles. Required on create. Does not support $filter.')
        c.argument('created_date_time', help='')
        c.argument('principal_display_name', type=str, help='The display name of the user, group, or service principal '
                   'that was granted the app role assignment. Read-only. Supports $filter (eq and startswith).')
        c.argument('principal_id', help='The unique identifier (id) for the user, group or service principal being '
                   'granted the app role. Required on create. Does not support $filter.')
        c.argument('principal_type', type=str, help='The type of the assigned principal. This can either be \'User\', '
                   '\'Group\' or \'ServicePrincipal\'. Read-only. Does not support $filter.')
        c.argument('resource_display_name', type=str, help='The display name of the resource app\'s service principal '
                   'to which the assignment is made. Does not support $filter.')
        c.argument('resource_id', help='The unique identifier (id) for the resource service principal for which the '
                   'assignment is made. Required on create. Supports $filter (eq only).')
